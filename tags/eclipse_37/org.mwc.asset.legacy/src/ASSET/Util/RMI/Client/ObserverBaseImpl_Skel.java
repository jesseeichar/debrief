// Skeleton class generated by rmic, do not edit.
// Contents subject to change without notice.

package ASSET.Util.RMI.Client;

@SuppressWarnings("deprecation")
final class ObserverBaseImpl_Skel
    implements java.rmi.server.Skeleton
{
    private static final java.rmi.server.Operation[] operations = {
	new java.rmi.server.Operation("void newParticipant(int)"),
	new java.rmi.server.Operation("void participantRemoved(int)"),
	new java.rmi.server.Operation("void propertyChange(java.lang.String, java.lang.Object, java.lang.Object)"),
	new java.rmi.server.Operation("void restart()"),
	new java.rmi.server.Operation("void scenarioCreated(int)"),
	new java.rmi.server.Operation("void scenarioDestroyed(int)"),
	new java.rmi.server.Operation("void step(long)")
    };
    
    private static final long interfaceHash = -6458680418860554713L;
    
    public java.rmi.server.Operation[] getOperations() {
	return (java.rmi.server.Operation[]) operations.clone();
    }
    
    public void dispatch(final java.rmi.Remote obj, final java.rmi.server.RemoteCall call, int opnum, final long hash)
	throws java.lang.Exception
    {
	if (opnum < 0) {
	    if (hash == 6058815235368992318L) {
		opnum = 0;
	    } else if (hash == 6918855842559771137L) {
		opnum = 1;
	    } else if (hash == 6250943665385694296L) {
		opnum = 2;
	    } else if (hash == -2563244869731757367L) {
		opnum = 3;
	    } else if (hash == -8759210789926416634L) {
		opnum = 4;
	    } else if (hash == 7120272653670683755L) {
		opnum = 5;
	    } else if (hash == 8658722000524436368L) {
		opnum = 6;
	    } else {
		throw new java.rmi.UnmarshalException("invalid method hash");
	    }
	} else {
	    if (hash != interfaceHash)
		throw new java.rmi.server.SkeletonMismatchException("interface hash mismatch");
	}
	
	final ASSET.Util.RMI.Client.ObserverBaseImpl server = (ASSET.Util.RMI.Client.ObserverBaseImpl) obj;
	switch (opnum) {
	case 0: // newParticipant(int)
	{
	    final int $param_int_1;
	    try {
		final java.io.ObjectInput in = call.getInputStream();
		$param_int_1 = in.readInt();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    server.newParticipant($param_int_1);
	    try {
		call.getResultStream(true);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 1: // participantRemoved(int)
	{
	    final int $param_int_1;
	    try {
		final java.io.ObjectInput in = call.getInputStream();
		$param_int_1 = in.readInt();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    server.participantRemoved($param_int_1);
	    try {
		call.getResultStream(true);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 2: // propertyChange(String, Object, Object)
	{
	    final java.lang.String $param_String_1;
	    final java.lang.Object $param_Object_2;
	    final java.lang.Object $param_Object_3;
	    try {
		final java.io.ObjectInput in = call.getInputStream();
		$param_String_1 = (java.lang.String) in.readObject();
		$param_Object_2 = (java.lang.Object) in.readObject();
		$param_Object_3 = (java.lang.Object) in.readObject();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } catch (java.lang.ClassNotFoundException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    server.propertyChange($param_String_1, $param_Object_2, $param_Object_3);
	    try {
		call.getResultStream(true);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 3: // restart()
	{
	    call.releaseInputStream();
	    server.restart();
	    try {
		call.getResultStream(true);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 4: // scenarioCreated(int)
	{
	    final int $param_int_1;
	    try {
		final java.io.ObjectInput in = call.getInputStream();
		$param_int_1 = in.readInt();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    server.scenarioCreated($param_int_1);
	    try {
		call.getResultStream(true);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 5: // scenarioDestroyed(int)
	{
	    final int $param_int_1;
	    try {
		final java.io.ObjectInput in = call.getInputStream();
		$param_int_1 = in.readInt();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    server.scenarioDestroyed($param_int_1);
	    try {
		call.getResultStream(true);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	case 6: // step(long)
	{
	    final long $param_long_1;
	    try {
		final java.io.ObjectInput in = call.getInputStream();
		$param_long_1 = in.readLong();
	    } catch (java.io.IOException e) {
		throw new java.rmi.UnmarshalException("error unmarshalling arguments", e);
	    } finally {
		call.releaseInputStream();
	    }
	    server.step($param_long_1);
	    try {
		call.getResultStream(true);
	    } catch (java.io.IOException e) {
		throw new java.rmi.MarshalException("error marshalling return", e);
	    }
	    break;
	}
	    
	default:
	    throw new java.rmi.UnmarshalException("invalid method number");
	}
    }
}
