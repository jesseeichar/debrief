<?xml version="1.0" encoding="UTF-8"?>
<cheatsheet
      title="Generating the scenario controller">
   <intro>
      <description>
         So, we have a scenario, now we have to tell ASSET how to run the scenario, and what data we want to record.
      </description>
   </intro>
   <item
         title="Sort out where to put controller">
      <description>
         Before you create the scenario controller file, you must decide where you&apos;re going to put it.  I&apos;ve been putting the controller files in the same directory as the scenario file.  So, if you want to be just like me (and who doesn&apos;t...), that&apos;s the way to do it.
      </description>
   </item>
   <item
         title="Create empty scenario controller file">
          <description>
   Now you&apos;ve decided where to put the controller, right click on the parent folder in the <b>Navigator</b>,  and select &apos;New/Other..&apos;. From the options provided select <b>XML File</b> from the <b>XML</b> branch.  Name the control file trial1.xml,  indicate that you&apos;re going to create the xml file from an XML template, and select <b>ASSET Control File</b>.  On completion, the file should open in the XML editor.
      </description>
   </item>
   <item
         title="Set the high level settings">
      <description>
         Next, set the output directory to <b>Results</b>.   Note this directory specification doesn&apos;t include path or drive details - directing ASSET to put the output directory in the current workspace.
      </description>
   </item>
   <item
         title="Consider scenario control items">
      <description>
         Now, our test scenario is quite straightforward, and doesn&apos;t include generation of participants or scenarios.  So, don&apos;t worry about scenario generation controls - move along.
      </description>
   </item>
   <item
         title="Add first scenario observer">
      <description> 
      Next, we&apos;re ready to add some observers.  Right-click on the <b>ScenarioController</b>, and select <b>ObserverList</b> from the <b>Add child</b> drop-down.  Next, if you right-click on the new ObserverList, you&apos;ll see the range of observers that may be added.  First, we&apos;re going to add an observer that stops the scenario after a specified time.  Right-click on the <b>ObserverList</b>, and select <b>TimeObserver</b> from <b>add child</b>.  Configure the time observer by naming it as &apos;doomsday timer&apos;, and specifying the duration as 24 hours.
      </description>
   </item>
   <item
         title="Add plot generator">
      <description>
         After time After the time observer, we&apos;re going to create an observer that generates a track plot. Right click on <b>ObserverList</b> and select <b>TrackPlotObserver</b>.  Next, name the observer (something like <b>Track Plot</b>), and give it a delta of 4 nautical miles.  Also, use the Properties window to indicate that the plot generator should <b>show_positions</b>.
      </description>
   </item>
   <item
         title="Add Debrief track recorder">
      <description>
         Next, we&apos;re going to create an observer that will record positions, detections, and decisions to a file in Debrief&apos;s Replay file format.<br/>
So, right-click on ObserverList and select <b>DebriefReplayObserver</b> from the <b>Add Child</b> drop-down.
<br/>With more complex scenarios, we can instruct this observer in what type of contact to track (using a <b>SubjectToTrack</b> element).  Give the observer a name (&apos;Debrief tracks&apos;).
      </description>
   </item>
   <item
         title="And we're done">
      <description>
      	Lastly, save your work ready for the next step.
      </description>
   </item>
</cheatsheet>
