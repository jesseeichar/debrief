<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V5//EN"
"http://www.docbook.org/xml/5.0/dtd/docbook.dtd">
<book version="5.0" xmlns="http://docbook.org/ns/docbook">
  <info>
    <title>Debrief NG User Documentation</title>

    <mediaobject>
      <imageobject>
        <imagedata align="center" fileref="figures/DebriefNGlogo.gif"></imagedata>
      </imageobject>
    </mediaobject>

    <author>
      <personname>Ian Mayo</personname>

      <affiliation>
        <org>
          <orgname></orgname>

          <orgdiv><inlinemediaobject>
              <imageobject>
                <imagedata fileref="figures/planet.gif"></imagedata>
              </imageobject>
            </inlinemediaobject></orgdiv>

          <orgdiv><inlinemediaobject>
              <imageobject>
                <imagedata fileref="figures/mwc_crest.gif"></imagedata>
              </imageobject>
            </inlinemediaobject></orgdiv>
        </org>
      </affiliation>
    </author>

    <edition>Documentation for Debrief NG</edition>

    <pubdate>Summer 2011</pubdate>

    <abstract xml:id="contact_details">
      <title>Contact details</title>

      <para>Should you wish to learn more about
      <application>Debrief</application> please contact one of the
      following:</para>

      <formalpara>
        <title>Debrief Project Sponsor</title>

        <para><address>
            <personname>Lt Cdr Bob Mannion</personname>
            <personname>SO2 UW OA</personname>
            <otheraddr>Maritime Warfare Centre</otheraddr>
            <street>Marlborough Building, HMS Collingwood</street>
            <city>Fareham</city>
            <state>HANTS</state>
            <country>UK</country>
            <postcode>  PO14 1AS</postcode>
          </address></para>
      </formalpara>

      <formalpara>
        <title>Debrief Project Manager</title>

        <para><address>
            <personname>Mr Ian A Mayo</personname>
            <personname>Debrief Project Manager</personname>
            <otheraddr>PlanetMayo Ltd</otheraddr>
            <street>34 Shearwater Avenue</street>
            <city>Fareham</city>
            <state>HANTS</state>
            <country>UK</country>
            <postcode>  PO16 8YE</postcode>
            <country>e-mail: ian@planetmayo.com</country>
          </address></para>
      </formalpara>
    </abstract>

    <revhistory>
      <revision>
        <revnumber>2.4</revnumber>

        <date>1st June 2011</date>

        <authorinitials>IM</authorinitials>

        <revremark>Full document update/tidying. Update to DocBook 5.0</revremark>
      </revision>
      <revision>
        <revnumber>2.3</revnumber>

        <date>1st December 2010</date>

        <authorinitials>IM</authorinitials>

        <revremark>Add guidance for right-click integration, worm in the
        hole</revremark>
      </revision>

      <revision>
        <revnumber>2.2</revnumber>

        <date>1st July 2009</date>

        <authorinitials>IM</authorinitials>

        <revremark>Update for single-sided reconstruction</revremark>
      </revision>

      <revision>
        <revnumber>2.1</revnumber>

        <date>1st July 2007</date>

        <authorinitials>IM</authorinitials>

        <revremark>Polish final Debrief NG content</revremark>
      </revision>

      <revision>
        <revnumber>2.0</revnumber>

        <date>1st March 2006</date>

        <authorinitials>IM</authorinitials>

        <revremark>Start transition to Debrief NG</revremark>
      </revision>

      <revision>
        <revnumber>1.7</revnumber>

        <date>10th July 2004</date>

        <authorinitials>IM</authorinitials>

        <revremark>Include track-shifting</revremark>
      </revision>

      <revision>
        <revnumber>1.6</revnumber>

        <date>10th March 2003</date>

        <authorinitials>IM</authorinitials>

        <revremark>Update to Debrief 2003 functionality</revremark>
      </revision>

      <revision>
        <revnumber>1.5</revnumber>

        <date>10th Nov 2002</date>

        <authorinitials>IM</authorinitials>

        <revremark>Add ETOPO-2 data support</revremark>
      </revision>

      <revision>
        <revnumber>1.4</revnumber>

        <date>10th July 2002</date>

        <authorinitials>IM</authorinitials>

        <revremark>D2002 post-beta revisions, including starting with higher
        memory allocation</revremark>
      </revision>

      <revision>
        <revnumber>1.3</revnumber>

        <date>7th May 2002</date>

        <authorinitials>IM</authorinitials>

        <revremark>Update to reflect Debrief 2002</revremark>
      </revision>

      <revision>
        <revnumber>1.2</revnumber>

        <date>13th February 2002</date>

        <authorinitials>IM</authorinitials>

        <revremark>Bought up to date with new features (per-fix colouring,
        cascade/tile, x-y plot tracking bar)</revremark>
      </revision>

      <revision>
        <revnumber>1.1</revnumber>

        <date>25th October 2001</date>

        <authorinitials>IM</authorinitials>

        <revremark>Acknowledged Debrief users added, together with extended
        Welcome/History</revremark>
      </revision>

      <revision>
        <revnumber>1.0</revnumber>

        <date>8th October 2001</date>

        <authorinitials>IM</authorinitials>

        <revremark>Initial version, following collation of existing HTML pages
        to DocBook format, together with full review by SMTAC OA.</revremark>
      </revision>
    </revhistory>

    <copyright>
      <year>2000-2011</year>

      <holder>Maritime Warfare Centre Ltd. Permission is granted to copy,
      distribute and/or modify this document under the terms of the GNU Free
      Documentation License, Version 1.1 or any later version published by the
      Free Software Foundation. A copy of the license is included in the
      section entitled "GNU Free Documentation License".</holder>
    </copyright>
  </info>

  <preface xml:id="PrefaceIntro">
    <title>Introduction</title>

    <sect1 xml:id="intro_welcome">
      <title>Welcome</title>

      <para>Welcome to the documentation for <application>Debrief
      NG</application>. <application>Debrief</application> has been produced
      by the Maritime Warfare Centre in Portsmouth UK, to support the analysis
      and reporting of maritime tactical exercises.</para>

      <para>In December 2000 the Maritime Warfare Centre decided to give
      <application>Debrief</application> an Open Source status, opening the
      application and its source code into the public domain. Debrief has been
      made <indexterm>
          <primary>Open Source</primary>
        </indexterm>Open Source to facilitate its wider use, encouraging
      adoption of standard file formats, presentation and practices between
      analysis agencies.</para>

      <para>Debrief provides the following features: <itemizedlist>
          <listitem>
            <para>2-Dimensional (top-down) view of vessel tracks</para>
          </listitem>

          <listitem>
            <para>Ability for user to <emphasis>step-through</emphasis>
            exercise serials</para>
          </listitem>

          <listitem>
            <para>Full formatting of data presented on screen</para>
          </listitem>

          <listitem>
            <para>Palette of tactical, vector map and chart-related features
            for insertion onto <glossterm
            linkend="g_plt">plot</glossterm></para>
          </listitem>

          <listitem>
            <para>Export of plot images for insertion into word
            processor</para>
          </listitem>

          <listitem>
            <para>X-Y plotting of relationships between tracks</para>
          </listitem>

          <listitem>
            <para>3-Dimensional view of tracks using height/depth data</para>
          </listitem>

          <listitem>
            <para>Gridded database of bathymetry/elevation</para>
          </listitem>

          <listitem>
            <para>Display of time-stamped text and sensor data</para>
          </listitem>
        </itemizedlist></para>
    </sect1>

    <sect1>
      <title>What's new?</title>

      <formalpara>
        <title>Adoption of Eclipse framework</title>

        <para>2006 has seen a change in direction for the delivery of Debrief.
        Instead of being a standalone application build from scratch (albeit
        with a couple of third-party components), Debrief NG has been rehosted
        into an existing framework; <link xlink:href="http://www.eclipse.org"
        xmlns:xlink="http://www.w3.org/1999/xlink">Eclipse</link>. Adoption of
        Eclipse has bought the following benefits:<variablelist>
            <varlistentry>
              <term>Functionally rich user interface</term>

              <listitem>
                <para>Eclipse has provided a wealth of trees, tables and
                slider controls to make your analysis job easier. You are now
                able to drag &amp; drop any window anywhere on the
                screen.</para>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term>Persistent window layout.</term>

              <listitem>
                <para>Your modified window layout is remembered when you
                re-open Debrief NG.</para>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term>Online updating.</term>

              <listitem>
                <para>If you're connected to a suitable network (MWC or the Internet) Eclipse is
                  able to download &amp; install its own updates. Agencies with large numbers of
                  Eclipse users can provide their own internal update site for Eclipse installations
                  to download updates from.</para>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term>Extensive guidance.</term>

              <listitem>
                <para>Since Debrief sits "on top" of Eclipse, the broad
                spectrum of Eclipse online &amp; printed guidance is
                available. You rely less on Debrief-specific guidance to
                resolve your problems. Don't worry, all of the guidance is
                presented together and covered by a single search
                engine.</para>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term>Modular infrastructure.</term>

              <listitem>
                <para>It is now easier to create Debrief plug-ins, and
                applications based on Debrief. Developers no longer have to
                learn the full depth and breadth of Debrief prior to adding
                new features. They just need to learn about the interfaces
                presented by Debrief, and how the Eclipse infrastructure
                works. Eclipse development is documented online and in many
                off-the-shelf books, and it has a strong support
                community</para>
              </listitem>
            </varlistentry>
          </variablelist></para>
      </formalpara>

      <formalpara>
        <title>Editing multiple items</title>

        <para>It is now easy to edit multiple items at once. As you select
        them on the layer manager, their common properties are shown in the
        properties window. Then just edit away...</para>
      </formalpara>

      <formalpara>
        <title>Polished user interface</title>

        <para>All of the user interface have received a refresh. The layer
        manager includes contextual icons giving an extra indication of what's
        in each layer.<figure xml:id="fig_context_icons">
            <title>Contextual icons</title>

            <screenshot>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="figures/updated_layer_mgr.jpg"
                             width="147"></imagedata>
                </imageobject>
              </mediaobject>
            </screenshot>
          </figure>The time-controller has also received some TLC, it is now
        tidier, more capable, and will act as a firm foundation for more
        time-related operations in the future.<figure
            xml:id="fig_improved_time_controller">
            <title>Improved time controller</title>

            <screenshot>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="figures/updated_time_controller.jpg"
                             width="231"></imagedata>
                </imageobject>
              </mediaobject>
            </screenshot>
          </figure></para>
      </formalpara>

      <formalpara>
        <title>Bookmarks</title>

        <para>You can now bookmark significant events within an exercise. The
        list of bookmarks across all of your Debrief plots are managed from
        the Bookmarks dialog, and generated from the drop-down menu of the
        improved Time Controller.<figure xml:id="fig_adding_bookmark">
            <title>Adding a bookmark</title>

            <screenshot>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="figures/adding_bookmark.jpg" width="300"></imagedata>
                </imageobject>
              </mediaobject>
            </screenshot>
          </figure><figure xml:id="fig_managing_bookmarks">
            <title>Managing bookmarks</title>

            <screenshot>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="figures/bookmarks.jpg" width="444"></imagedata>
                </imageobject>
              </mediaobject>
            </screenshot>
          </figure></para>
      </formalpara>
    </sect1>

    <sect1 xml:id="History">
      <title>History</title>

      <sect2 xml:id="PreHistory">
        <title>Prehistory</title>

        <para><application>Debrief</application> was originally <indexterm>
            <primary>History</primary>
          </indexterm>produced in 1995 in the <glossterm
        linkend="g_MWC">Maritime Warfare Centre</glossterm> to act as a
        desktop viewer for results produced by the MWC's ASSET <indexterm>
            <primary>ASSET</primary>
          </indexterm> submarine simulator. In use it quickly became apparent
        that real exercise data could also be viewed in the application
        removing the requirement for clerical staff to produce paper plots for
        use in analysis. The initial version of
        <application>Debrief</application> was a 16-bit MS Windows C++
        application.</para>

        <para><application>Debrief</application> was updated in late 1996 to
        32 bits, in order to exploit the richer user interface components
        available for 32 bit Windows applications. It was at this stage that
        the application was demonstrated and subsequently issued under license
        to <indexterm>
            <primary>COMSUBDEVRON 12</primary>

            <secondary>CSDS 12</secondary>
          </indexterm>COMSUBDEVRON 12 of the US Navy.</para>

        <para>In 1999 development of an updated version of
        <application>Debrief</application>, <application>Debrief</application>
        2000 was started. Over the previous four years a number of fresh
        requirements had arisen, requirements which could not be economically
        met using the existing architecture. Accordingly development of the
        <application>Debrief</application> 2000 application started from a
        fresh-whiteboard, adopting a modern modular approach to allow
        incremental implementation and insertion of future modules as they
        were required. The rapid maturity experienced by Java together with
        the availability of cheaply available development environments, rich
        application libraries (serialisation, Java3D and XML in particular)
        and its platform independence made Java the natural choice for the
        application.</para>

        <para>During 2000 <application>Debrief</application> gained wider use
        within the Maritime Warfare Centre, being used for more varied types
        of submarine exercise analysis together with analysis in
        surface-related warfare areas.</para>
      </sect2>

      <sect2 xml:id="SwitchToOpen">
        <title>The switch to Open Source</title>

        <para>In Summer 2000 the Maritime Warfare Centre committed to
        switching the <application>Debrief</application> application to
        <indexterm significance="preferred">
            <primary>Open Source</primary>
          </indexterm>Open Source status. The adoption of the Open Source
        licensing model affects MWC in a number of ways: <orderedlist>
            <title>List of Debrief adopters</title>

            <listitem>
              <para>Organisations that are currently using
              <application>Debrief</application> will have full access to the
              source code of <application>Debrief</application>, allowing them
              to identify and correct bugs (provided they have sufficiently
              trained staff). The licensing is such that these modifications
              can be again made public through the re-insertion into the
              central, online "code base".</para>
            </listitem>

            <listitem>
              <para>Organisations that are not currently using
              <application>Debrief</application> also have full access to the
              application and its source code. Since the application and its
              supporting documentation clearly describe its origins in MWC
              this will spread the name of the organisation together with
              enforcing its reputation as a centre of maritime tactical
              analysis.</para>
            </listitem>

            <listitem>
              <para>Any organisation using <application>Debrief</application>
              that identifies a bug/algorithmic problem is able to
              independently correct the problem and submit the corrected code
              back into the central "code base". In time, this will greatly
              increase the accuracy and reliability of the application. MWC
              may then freely utilise these improvements, only incurring the
              administrative overhead of "checking-in" code modified by third
              party organisations.</para>
            </listitem>

            <listitem>
              <para>The free, open source status of the application makes it
              easier for third party, commercial organisations to bid for
              development contracts to maintain or extend
              <application>Debrief</application>. This wider availability will
              only bring economic advantages to MWC and fellow
              organisations.</para>
            </listitem>

            <listitem>
              <para>The wider national/international use of
              <application>Debrief</application> will also lead to easier
              exchange of exercise data between nations (through common file
              formats) and potentially offer an increase in efficiency and the
              general quality of naval exercise analysis</para>
            </listitem>
          </orderedlist></para>
      </sect2>

      <sect2 xml:id="TwoThouOnwards">
        <title>Debrief 2001 onwards</title>

        <para>At the end of 2000, Ian Mayo, the developer and <link
        linkend="project_manager">project manager</link> of
        <application>Debrief</application>, left full-time employment at the
        Maritime Warfare Centre to setup his own software development
        consultancy, <indexterm>
            <primary>PlanetMayo</primary>
          </indexterm>PlanetMayo Ltd.</para>

        <para>A competitive open tender process was conducted during late 2001
        to supply the Maritime Warfare Centre with
        <application>Debrief</application> support. The contract was won by
        PlanetMayo, who grouped up the implementation of the MWC's fresh
        requirements in a major update to <application>Debrief</application>,
        titled <application>Debrief 2001</application>. This update bought
        new, large areas of functionality to
        <application>Debrief</application> including vectored chart data,
        display of narrative text, and display of sensor-data.</para>

        <para>Debrief development continued in 2002, with the update to
        <application>Debrief 2002</application>, which bought greatly improved
        3-d plotting facilities and a number of incremental improvements to
        other areas of functionality.</para>

        <para>The year 2002 also saw the first conference paper extolling the
        virtues of Debrief and the Open Source principles behind it, at
        <indexterm>
            <primary>UDT</primary>
          </indexterm>Undersea Defence Technology 2002 in La Spezia, Italy.
        The paper itself is available for viewing at the: <link
        xlink:href="http://www.debrief.info"
        xmlns:xlink="http://www.w3.org/1999/xlink">Debrief web
        site</link>.</para>

        <para>Another significant step forward for Debrief in 2002 was the
        contribution from <indexterm>
            <primary>NUWC</primary>
          </indexterm> <link linkend="nuwc_address">NUWC</link> of an
        algorithm and code suitable for shifting tracks. NUWC developed a set
        of experimental classes used to perform <link
        linkend="track_shifting_note">track-shifting</link>. The algorithms
        used in these classes were taken and modified to complement the
        Debrief look and feel, and to provide greater usability resulting in
        the track-shifting editor included in Debrief 2002.</para>

        <para>Through 2003-2007 PlanetMayo has continued to provide MWC with
        contracted support for Debrief. This support has included user
        guidance, bug fixes and addition of new features. Additionally this
        support contract was used to deliver Debrief 2003; (including
        provision of a bathymetric bottom in 3-d views, presentation of TMA
        data, and improved time-variable graphs), and the fundamental rebuild
        of Debrief into Debrief NG (providing a modular architecture ready to
        seamlessly accommodate ad-hoc analysis tools).</para>

        <para xml:id="SingleSidedChanges">In 2009 MWC extended Debrief to
        support Single Sided Reconstruction, that is the derivation of a Red
        track from a Blue track plus sensor data. These extensions also
        included Track Grooming changes that support the removal of jumps and
        general data smoothing.</para>
      </sect2>
    </sect1>

    <sect1 xml:id="users">
      <title>Debrief users</title>

      <para>Whilst <application>Debrief</application> was originally developed
      for use within the Maritime Warfare Centre, the switch to Open Source
      licensing has led to its adoption by the following organisations and
      companies:</para>

      <para><table frame="none" xml:id="ackUsers">
          <title>List of acknowledged Debrief users</title>

          <tgroup cols="2">
            <colspec colname="col01" colnum="1" colwidth="1.30*" />

            <colspec colname="col1" colnum="2" colwidth="1.5*" />

            <tbody>
              <row xml:id="mwc">
                <entry><para><inlinemediaobject>
                    <imageobject>
                      <imagedata fileref="figures/mwc_crest.gif" width="100"></imagedata>
                    </imageobject>
                  </inlinemediaobject></para></entry>

                <entry xml:id="project_sponsor"><para xml:id="MWC">Debrief
                project sponsor. <address>
<personname>Lt Cdr Bob Mannion RN</personname>
<otheraddr>Maritime Warfare Centre</otheraddr>
<street>Marlborough Building, HMS Collingwood</street>
<city>Fareham, HANTS</city>
<postcode>  PO14 1AS</postcode>
<country>United Kingdom</country></address></para></entry>
              </row>

              <row>
                <entry><para><inlinemediaobject>
                    <imageobject>
                      <imagedata fileref="figures/planet.gif" width="100"></imagedata>
                    </imageobject>
                  </inlinemediaobject></para></entry>

                <entry xml:id="project_manager"><para>Debrief project manager.
                <address>
<personname>Mr Ian Mayo</personname>
<street>Marlborough Building, HMS Collingwood</street>
<city>Fareham, HANTS</city>
<postcode>  PO14 1AS</postcode>
<country>United Kingdom</country>
<email>ian@planetmayo.com</email>
</address></para></entry>
              </row>

              <row xml:id="csds">
                <entry><para><inlinemediaobject>
                    <imageobject>
                      <imagedata fileref="figures/csds12.gif" width="100"></imagedata>
                    </imageobject>
                  </inlinemediaobject></para></entry>

                <entry><para>COMSUBDEVRON 12 <address>
                      
<street>Submarine Development Squadron Twelve</street>
<city>Naval Submarine Base New London</city>
<state>Groton, CT, 06349-5200</state>
<country>USA</country>
</address></para></entry>
              </row>

              <row>
                <entry><para xml:id="nuwc_address"><inlinemediaobject>
                    <imageobject>
                      <imagedata fileref="figures/nuwc.gif" width="100"></imagedata>
                    </imageobject>
                  </inlinemediaobject></para></entry>

                <entry><para>Naval Undersea Warfare Center (NUWC) <address>
                      <personname>Roger Howlett </personname>
                      <otheraddr>Code 2212 Combat Systems</otheraddr>
                      <street>ICE Development Team</street>
Naval Undersea Warfare Center (NUWC)
                      <city>1176 Howell St</city>
                      <state>Bldg 1171 CSTL Laboratory</state>
                      <postcode>Newport, Rhode Island, USA</postcode>
                      <email>HowletRW@npt.nuwc.navy.mil</email>
                    
</address></para></entry>
              </row>

              <row xml:id="comsubpac">
                <entry><para><inlinemediaobject>
                    <imageobject>
                      <imagedata fileref="figures/CSP_LOGO_SM.gif" width="100"></imagedata>
                    </imageobject>
                  </inlinemediaobject></para></entry>

                <entry><para><address>
                      <personname>Joe Sileo</personname>
                      <otheraddr>COMSUBPAC Tactical Analysis Group (N7231)</otheraddr>
                      <street>Commander Submarine Force, U.S. Pacific Fleet</street>
                      <city>1430 Morton St, Bldg 619</city>
                      <state>Pearl Harbor</state>
                      <postcode>HI 96860-4664</postcode>
                    </address> </para></entry>
              </row>

              <row xml:id="COMSEVENTHFLT">
                <entry><para></para></entry>

                <entry><para> <address>
                      <personname>Jay Spry</personname>
                      <otheraddr>COMSEVENTHFLT/COMSUBGRU 7 </otheraddr>
                    </address> </para></entry>
              </row>
            </tbody>
          </tgroup>
        </table></para>

      <para>If your organisation or company uses
      <application>Debrief</application> and wishes to be included as an
      acknowledged user please forward your details to the Debrief <link
      linkend="project_manager">Project Manager</link> as recorded
      above.</para>
    </sect1>

    <sect1 xml:id="conventions">
      <title>Document conventions</title>

      <para>This document uses the following conventions <table frame="none"
          xml:id="docConventions">
          <title>Document conventions</title>

          <tgroup cols="2">
            <colspec colname="col01" colnum="1" colwidth="1.00*" />

            <colspec colname="col1" colnum="2" colwidth="3.0*" />

            <thead>
              <row>
                <entry>Descriptions</entry>

                <entry>Appearance</entry>
              </row>
            </thead>

            <tbody>
              <row>
                <entry>File Names</entry>

                <entry><filename>file.extension</filename></entry>
              </row>

              <row>
                <entry>Label of a screen item</entry>

                <entry><guilabel>View Toolbar</guilabel></entry>
              </row>

              <row>
                <entry>On-screen button</entry>

                <entry><guibutton>Auto Generate</guibutton></entry>
              </row>

              <row>
                <entry>Name of an applications</entry>

                <entry><application>Internet Explorer</application></entry>
              </row>

              <row>
                <entry>Emphasized text</entry>

                <entry><emphasis>word</emphasis></entry>
              </row>

              <row>
                <entry>An entry in the glossary (click to view)</entry>

                <entry><glossterm linkend="g_plt">Plot</glossterm></entry>
              </row>

              <row>
                <entry>Source Example</entry>

                <entry><programlisting>
 <tag class="starttag">para</tag>Beginning and end of paragraph
 <tag class="endtag">para</tag>
                  </programlisting></entry>
              </row>
            </tbody>
          </tgroup>
        </table></para>
    </sect1>
  </preface>

  <!-- ********************************************************************* -->

  <!-- ********************************************************************** -->

  <!--   Tutorial                                                            -->

  <!-- ********************************************************************** -->

  <!-- ********************************************************************** -->

  <part xml:id="tutorial">
    <title>Getting started</title>

    <partintro xml:id="tutorial_intro">
      <para>This tutorial will lead you through
      <application>Debrief</application> right from the installation through
      to more advanced topics such as creating custom sets of layers for
      annotation fresh plots.</para>
    </partintro>

    <chapter xml:id="get_start">
      <title>First steps</title>

      <sect1 xml:id="pre_install_debrief">
        <title>Before installing Debrief</title>

        <sect2 xml:id="obtainingDebrief">
          <title>Obtaining Debrief</title>

          <para>A number of project <indexterm>
              <primary>Debrief</primary>

              <secondary>Obtaining Debrief</secondary>
            </indexterm>support activities (news, feature-requests,
          bug-reports) for <application>Debrief</application> are conducted
          online, at a web-site known as
          <application>SourceForge</application>.
          <application>SourceForge</application> is also used to store the
          newest versions of Debrief, ready for download.</para>

          <para>The home page for <application>Debrief</application> on
          <application>SourceForge</application> is at <link
          xlink:href="http://sourceforge.net/projects/debrief"
          xmlns:xlink="http://www.w3.org/1999/xlink">http://sourceforge.net/projects/debrief</link>.
          From this home you can read the latest news on Debrief, request new
          features, report bugs, and download the most recent version.</para>

          <para>To obtain the latest version, examine the table titled "Latest
          File Releases", and click on the <guilabel>Download</guilabel> link
          next to <guilabel>Debrief-Installation-Set</guilabel>. Then click on
          <guilabel>install.exe</guilabel> for a windows version of Debrief,
          or <guilabel>install.bin</guilabel> for a unix version.</para>

          <tip>
            <para>If you already have <application>DebriefNG</application>
            installed, but just want to install an update, look at the files
            listed in the <guilabel>Debrief-Updates</guilabel> section of the
            <guilabel>Latest File Releases</guilabel>. For each new release of
            Debrief, the significant files are located individually in the
            <guilabel>Latest File Releases</guilabel>. If you do not wish to
            download the full Debrief installation, just download these
            individual files and replace your existing copies with these. It
            is important to download and use all of the files provided to
            ensure compatibility.</para>
          </tip>

          <note>
            <para>Debrief is also available in source and binary distributions
            from the SourceForge web-site, in the Debrief-Developer package.
            These distributions are suited to the software developer wishing
            to learn more about the structure of Debrief or wishing to extend
            its functionality. Once either of these distributions are
            downloaded, unzip them and examine the
            <filename>readme.txt</filename> file in the top level
            directory.</para>
          </note>
        </sect2>

        <sect2 xml:id="where_to_get_help">
          <title>Where to get help on Debrief</title>

          <para>If you get stuck with Debrief, the following sources of
          information are available:<orderedlist>
              <listitem>
                <formalpara>
                  <title>This document</title>

                  <para>The Debrief NG User guide is a useful reference for
                  determining where to find something, the overall
                  capabilities of the tool, and assorted reference guidance.
                  It's presented online as part of Debrief NG help within a
                  help browser (accessed via <guimenuitem>Help
                  Contents</guimenuitem> on the <guimenu>Help</guimenu>
                  menu.</para>
                </formalpara>
              </listitem>

              <listitem>
                <formalpara>
                  <title>Cheat sheets</title>

                  <para><indexterm><primary>Cheat sheets</primary></indexterm>A series of online cheat sheets is distributed with
                  Debrief. These sheets guide the user through a series of
                  complex tasks to achieve an overall goals such as:
                  <emphasis>loading data into Debrief</emphasis> or
                  <emphasis>analysing narrative data</emphasis>. The cheat
                  sheets are accessed by selecting <guimenuitem>Debrief Cheat
                  Sheets</guimenuitem> from the <guimenu>Help</guimenu> menu
                  in Debrief NG.</para>
                </formalpara>
              </listitem>

              <listitem>
                <formalpara>
                  <title>Welcome Page</title>

                  <para>Debrief NG's welcome page provides a high level
                  overview of Debrief, and guides the user to further sources
                  of information, tutorials (cheat sheets), and
                  samples.</para>
                </formalpara>
              </listitem>
            </orderedlist></para>
        </sect2>

        <sect2 xml:id="onCD_Rom">
          <title>Debrief on CD-Rom</title>

          <note>
            <para>If you are unable to download Debrief from the Internet,
            please contact the <link linkend="project_manager">Project
            Manager</link>, and a copy of Debrief on CD-ROM will be forwarded
            to you.</para>
          </note>
        </sect2>
      </sect1>

      <sect1 xml:id="running_installer">
        <title>Performing installation</title>

        <warning>
          <para><indexterm><primary>Installing Debrief</primary></indexterm>If you already have <application>Debrief NG</application>
          installed on your machine you should remove it using the
          <guibutton>Add/Remove Programs</guibutton> button from the
          <guibutton>Settings</guibutton> button on the
          <application>Windows</application> <guibutton>Start</guibutton>
          menu.</para>
        </warning>

        <para>Once you have downloaded Debrief NG, double-click on
        <filename>install.exe</filename> and follow the steps provided. You
        are first met with the welcome screen: <figure
            xml:id="installer_welcome">
            <title>Welcome view of the installer</title>

            <screenshot>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="figures/install1.png" width="315"></imagedata>
                </imageobject>

                <textobject>
                  <phrase>Welcome view of the installer</phrase>
                </textobject>
              </mediaobject>
            </screenshot>
          </figure> Click on the <guibutton>Next</guibutton> button to move
        forward through the screens. The first choice you are offered is the
        destination of the <application>Debrief</application> files. Unless
        you have any strong objection this default destination is normally
        acceptable. <figure xml:id="select_loc">
            <title>Select Debrief location</title>

            <screenshot>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="figures/install2.png" width="315"></imagedata>
                </imageobject>
              </mediaobject>
            </screenshot>
          </figure> Next you will see the <guilabel>Pre-Installation
        Summary</guilabel> dialog which will allow you to step backwards to
        review installation settings prior to conducting the install.<figure
            xml:id="pre_install_summary">
            <title>Pre-installation summary</title>

            <screenshot>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="figures/install3.png" width="315"></imagedata>
                </imageobject>
              </mediaobject>
            </screenshot>
          </figure>After this you will see Debrief being installed onto your
        machine</para>

        <para><figure xml:id="install_progress">
            <title>Debrief installation progress</title>

            <screenshot>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="figures/install4.png" width="315"></imagedata>
                </imageobject>
              </mediaobject>
            </screenshot>
          </figure></para>

        <para>Finally you will be greeted with the <guilabel>Installation
        Complete</guilabel> dialog informing you that everything went
        ok.</para>

        <para><figure xml:id="install_complete">
            <title>Debrief installation complete</title>

            <screenshot>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="figures/install5.png" width="315"></imagedata>
                </imageobject>
              </mediaobject>
            </screenshot>
          </figure></para>

        <para>It's now time to start
        <application>Debrief</application>.</para>
      </sect1>

      <sect1 xml:id="setting_location_prefs">
        <title>Configuring reference data</title>

        <para>If you want to take advantage of Debrief's support for
        background datasets, don't forget to read the instructions on how to
        configure their locations, as below. Note, the VPF and ETOPO datasets
        probably aren't present in your Debrief installation (due to their
        size), so you will have to request/load them separately. The world.dat
        file used for the simple coastline should be in your Debrief
        installation folder. <itemizedlist>
            <listitem>
              <para>VPF instructions are <link
              linkend="configure_for_vpf">here</link></para>
            </listitem>

            <listitem>
              <para>ETOPO instructions are <link
              linkend="etopo_install">here</link></para>
            </listitem>

            <listitem>
              <para>Simple coastline instructions are similar to the
              above</para>
            </listitem>
          </itemizedlist></para>
      </sect1>

      <sect1 xml:id="start_up">
        <title>Start Debrief</title>

        <sect2 xml:id="opening_application">
          <title>Opening application</title>

          <para>Open the application using the shortcut placed in the Programs
          section of your Start menu. The application may take a couple of
          seconds to load, but don't worry about the speed; once the windows
          are open Debrief runs quite quickly. If you are viewing this
          tutorial online, arrange this window and the
          <application>Debrief</application> window so that both are visible
          (although you may need to let them overlap if you have limited
          screen space).</para>

          <figure xml:id="welcomeView">
            <title>Debrief's Welcome view</title>

            <screenshot>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="figures/apptoolbar.png" width="100%"></imagedata>
                </imageobject>
              </mediaobject>
            </screenshot>
          </figure>

          <para>When opened for the very first time Debrief shows its Welcome
          page. This page (shown above) includes a series of links to
          high-level introductory information. The Overview page contains
          guidance for new-adopters of Debrief, whereas the Tutorials page
          contains leads users through more specific tasks through the use of
          <glossterm linkend="g_cheat">cheat-sheets</glossterm> - small pages
          breaking a task down into a series of tasks. The buttons at the
          top-left of each page navigate you around the welcome guidance. On
          the <guilabel>Tutorials</guilabel> page one cheat-sheet in
          particular will help new Debrief-adopters:<variablelist>
              <varlistentry>
                <term>Getting started with Debrief NG</term>

                <listitem>
                  <para>Walking you through loading your first data into
                  Debrief</para>
                </listitem>
              </varlistentry>
            </variablelist></para>

          <para>Starting any of the cheat-sheets will shrink the Welcome
          guidance to a smaller pane exposing the rest of Debrief NG as shown
          in the following diagram.</para>

          <figure xml:id="defaultView">
            <title>Debrief's default view</title>

            <screenshot>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="figures/bare_app.png" width="100%"></imagedata>
                </imageobject>
              </mediaobject>
            </screenshot>
          </figure>

          <para>The Debrief user-interface follows the Workbench convention,
          whereby a users edits individual files in an
          <emphasis>Editor</emphasis> assisted by a series of supporting
          information panes called <emphasis>Views</emphasis>. The specific
          arrangement of editors and views offered by Default is called a
          <emphasis> <glossterm
          linkend="g_perspective">Perspective</glossterm> </emphasis>, in this
          instance the <emphasis>Tactical Analysis</emphasis> perspective. The
          Tactical Analysis perspective arranges the views into sets of
          grouped tabs, though views can be dragged to any other location on
          the workbench, or floated above the workbench. Views frequently have
          their own toolbar and drop-down menu providing actions related to
          that particular task. Once selected, views are closed by clicking on
          the white diagonally oriented cross. To re-open a view, or open a
          fresh view select <guimenuitem>Show View</guimenuitem> from the
          <guimenu>Window</guimenu> menu. A list of Debrief-related views will
          be shown. Other views can be selected from the
          <guimenuitem>Other...</guimenuitem> menu item</para>
        </sect2>

        <sect2 xml:id="navigating_debrief">
          <title>Navigating around Debrief</title>

          <para>Fundamentally, the Debrief user interface (generically termed
          the Workbench) is constructed from a plot editor, surrounded by a
          series of support panes (called views), both underpinned by a main
          menu and a series of toolbars. These elements are described further
          below.</para>

          <figure xml:id="thePlot">
            <title>A Debrief plot</title>

            <screenshot>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="figures/app_with_plot.png" width="100%"
                             xml:id="sample_plot"></imagedata>
                </imageobject>
              </mediaobject>
            </screenshot>
          </figure>

          <sect3 xml:id="debrief_editors">
            <title>Editors</title>

            <para><indexterm><primary>Editors</primary></indexterm>Any number of editors can be open at once, but only one can
            be active at a time. The main menu bar and toolbar for Debrief
            contain operations that are applicable to the active editor.
            Initially the active editor will always be the Debrief plot, but
            the extensibility of Debrief NG means other types of editor can be
            implemented. Tabs at the top of the editor area indicate the names
            of files that are currently open for editing
            (<filename>Sample.xml</filename> in the previous screenshot). An
            asterisk (*) indicates that an editor has unsaved changes. By
            default, editors are stacked in the editor area, but you can
            choose to tile them (by dragging the tabbed plot-name) in order to
            view source files simultaneously.</para>
          </sect3>

          <sect3 xml:id="debrief_views">
            <title>Views</title>

            <para><indexterm><primary>Views</primary></indexterm>Views support editors and provide alternative presentations
            as well as ways to navigate the information in your Workbench. For
            example, the <link linkend="navigating_debrief">Navigator</link>
            displays projects and other resources that you are working with,
            and the <link linkend="layer_mgr">Layer Manager</link> shows a
            list of selectable items within the current plot.</para>

            <para>Views also have their own drop-down menus. To open the menu
            for a view, click the icon at the right end of the view's title
            bar. Some views also have their own toolbars. The actions
            represented by buttons on view toolbars only affect the items
            within that view.</para>

            <para>A view might appear by itself, or stacked with other views
            in a tabbed notebook. You can change the layout of a perspective
            by opening and closing views and by docking them in different
            positions in the Workbench window. We've attempted to provide a
            logical arrangement of Debrief views, but feel free to experiment.
            Debrief will remember your settings, but you can return to the
            defaults at any point by selecting <guimenuitem>Reset
            Perspective</guimenuitem> from the <guimenu>Window</guimenu>
            menu.</para>
          </sect3>

          <sect3 xml:id="debrief_toolbars">
            <title>Toolbars</title>

            <para>There are four kinds of toolbars in Debrief.</para>

            <para>The main toolbar, sometimes called the Workbench toolbar, is
            displayed at the top of the Workbench window directly beneath the
            menu bar. Items in the toolbar might be enabled or disabled based
            on the state of either the active view or editor. Sections of the
            main toolbar can be rearranged using the mouse.</para>

            <para>There are also individual view toolbars, which appear in the
            title bar of a view. Actions in a view's toolbar apply only to the
            view in which they appear. Some view toolbars include a Menu
            button, shown as an inverted triangle, that contain actions for
            that view.</para>

            <para>Whilst Debrief doesn't currently make use of <link
            linkend="perspectives_note">Perspectives</link>, a third type of
            toolbar is the perspective switcher. The perspective switcher
            allows quick access to perspectives that are currently open. It
            also has a button that can open new perspectives. The perspective
            switcher is normally located in the top-right, next to the main
            toolbar. However, it is also possible to position it below the
            main toolbar ("top-left"), or to position it vertically on the
            left-hand side of the workbench ("left"). The name of the
            perspectives is shown by default, but it is possible to hide the
            text and show only the icons. To reposition the perspective or
            hide the text, right-click on it and choose the appropriate item
            from the context menu. When Debrief contains modules for Track
            Reconstruction it would be understandable for a Track
            Reconstruction perspective to provide a suitably tailored set of
            views.</para>

            <para>Finally, the fast view bar is a toolbar that contains icons
            representing the current set of fast views. A fast view is a
            shortcut to a view that is frequently used - generated by
            right-clicking in a view's title bar. The fast view bar appears in
            the bottom left corner of the workbench by default. However, it is
            possible to position it on the left or right as well. In all
            cases, you can find out what toolbar buttons do by moving your
            mouse pointer over the button and reading the tooltip that opens.
            . <note>
                <formalpara xml:id="perspectives_note">
                  <title>Perspectives</title>

                  <para><indexterm><primary>Perspectives</primary></indexterm>Each Workbench window contains one or more
                  perspectives. A perspective defines the initial set and
                  layout of views in the Workbench window. Within the window,
                  each perspective shares the same set of editors. Each
                  perspective provides a set of functionality aimed at
                  accomplishing a specific type of task or works with specific
                  types of resources. For example, the Tactical Analysis
                  perspective combines views that you would commonly use while
                  editing analysing tactical exercises. Perspectives control
                  what appears in certain menus and toolbars. They define
                  visible action sets, which you can change to customize a
                  perspective. You can save a perspective that you build in
                  this manner, making your own custom perspective that you can
                  open again later. You can use the
                  <guilabel>General</guilabel> &gt;
                  <guilabel>Perspectives</guilabel> preference page to open
                  perspectives in the same window or in a new window.</para>
                </formalpara>
              </note></para>
          </sect3>
        </sect2>

        <sect2 xml:id="first_plot">
          <title>Loading your first plot</title>

          <para>See the Debrief <link linkend="g_cheat">Cheat-Sheet</link> for
          guidance in creating a new Debrief plot, or loading an existing
          plot.</para>
        </sect2>
      </sect1>

      <sect1 xml:id="import_range_data">
        <title>Importing track data</title>

        <sect2 xml:id="intro_to_replay">
          <title>Introduction to Replay files</title>

          <para>Debrief reads text files using a format named the Replay file format ( <glossterm
          linkend="g_replay">Replay</glossterm> was an application used in
          <application>Debrief</application>-style tasks in Royal Navy
          analysis in past years).</para>

          <para>Replay files are ASCII-files containing vessel position data
          in a flat-file format similar to that below:</para>

          <example xml:id="sample_replay_file">
            <title>Sample Replay file contents</title>

            <programlisting>
 951212 050000.000 CARPET @C 12 11 10.63 N 11 41 52.37 W 269.7 2.0 0
 951212 050100.000 CARPET @C 12 11 10.58 N 11 42 2.98 W 269.7 2.0 0
 ;NARRATIVE: 951212 095700.000 TOMATO SUSPECTED DETECTION OF RED
 951212 050200.000 CARPET @C 12 11 10.51 N 11 42 14.81 W 269.9 2.0 0
 951212 050300.000 CARPET @C 12 11 10.51 N 11 42 27.27 W 268.7 2.0 0
 951212 050400.000 CARPET @C 12 11 10.28 N 11 42 40.33 W 270.6 2.0 0
            </programlisting>
          </example>

          <note>
            <para>Since Autumn 2004 multi-word track names can now be read in
            if they are <link linkend="quoted_track_names">surrounded by
            quotation marks</link>.</para>
          </note>

          <para>This data has a single vessel location per-line, with
          white-space separated columns containing this data:</para>

          <itemizedlist spacing="compact">
            <listitem>
              <para>Date (year, month, day)</para>
            </listitem>

            <listitem>
              <para>Time (hours, minutes, seconds, decimal seconds))</para>
            </listitem>

            <listitem>
              <para>Vessel Name (single-word))</para>
            </listitem>

            <listitem>
              <para>Formatting to apply (see the <link
              linkend="maintainers_guide">maintainer documentation</link> for
              details of this, but experiment with the second character to
              change the default colour of the <glossterm
              linkend="g_track">track</glossterm>).)</para>
            </listitem>

            <listitem>
              <para>Latitude (deg, min, sec, hemisphere))</para>
            </listitem>

            <listitem>
              <para>Longitude (deg, min, sec, hemisphere))</para>
            </listitem>

            <listitem>
              <para>Course (degrees))</para>
            </listitem>

            <listitem>
              <para>Speed (knots))</para>
            </listitem>

            <listitem>
              <para>Depth (m))</para>
            </listitem>
          </itemizedlist>

          <para>Note the third line, which contains a <glossterm
          linkend="g_narrative">narrative</glossterm> entry. This entry
          represents one of a group of types of data called <glossterm
          linkend="g_annotation">Annotation</glossterm> Entries. These entries
          allow inclusion of data other than vessel locations, and can be
          interspersed with positional data throughout the file.</para>

          <para>Multiple vessel tracks can be contained sequentially in a
          single Replay file.</para>

          <para>For more detail regarding this file format, including how to
          represent annotations which are only visible for a defined time
          period, together with lines, ellipses and rectangles, examine the
          <link linkend="maintainers_guide">maintainers</link> section of the
          this document.</para>
        </sect2>

        <sect2 xml:id="DebrieffileFormat">
          <title>The Debrief file format</title>

          <para>Note that the Replay file format just stores sensor readings,
          it does not store any formatting details. Thus, any formatting
          applied to a plot cannot be saved as a Replay file. Thus, Debrief
          has its <emphasis>Debrief File Format</emphasis>. This is a more
          complex file format that stores a wide range of data-types,
          formatting instructions, and user-interface settings (such as the
          current viewport on the data).</para>

          <para>Thus, whilst you may load data from a
          <emphasis>.REP</emphasis> Replay file, any modifications made to the
          plot must be stored in a Debrief plot file
          (<emphasis>.xml</emphasis>). No changes are save to REP files by the
          Debrief plot editor (though it possible to make textual changes to
          REP files using Debrief's built-in text editor). XML is a file
          format capable of storing structured information in predefined
          types, as in the following example:<programlisting width="70">&lt;?xml version="1.0" encoding="UTF-8" standalone="no"?&gt;
   &lt;plot Created="Tue Nov 18 09:54:38 GMT 2008" Name="Debrief Plot"&gt;
     &lt;details Text="Saved with Debrief version dated Tue Nov 18 09:51:52 GMT 2008"/&gt;
and so on....</programlisting></para>
        </sect2>

        <sect2 xml:id="import_section">
          <title>Importing data</title>

          <para>See the <link linkend="g_cheat">cheat-sheet</link> covering
          importing existing data into Debrief.</para>

          <para>When data is imported, <application>Debrief</application>
          applies default values to the time labels for positions. The first
          point in a <glossterm linkend="g_track">track</glossterm>, together
          with the first point every day includes the day, otherwise just
          hours and minutes are displayed.</para>

          <para>Of course though, you haven't learnt how to show the labels,
          so that's still to follow - but remember, when you switch on the
          labels for a <glossterm linkend="g_track">track</glossterm>, it was
          at the import stage that the default labels were set.</para>
        </sect2>

        <sect2 xml:id="import_modes">
          <title>Import modes</title>

          <para><indexterm><primary>DR import mode</primary></indexterm>
            <indexterm><primary>Import modes</primary></indexterm><indexterm><primary>OTG import mode</primary></indexterm>Since the 2009 introduction of extensions to support <link
          linkend="SingleSidedChanges">Single Sided Reconstruction</link>,
          Debrief is able to import data in either <glossterm
          linkend="g_DeadReckoning">DR</glossterm> or <glossterm
          linkend="g_OverTheGround">OTG</glossterm> mode. The mode to be used
          is decided at the REP Import stage by answering the following
          dialog:<screenshot>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="figures/SelectImportMode.png"></imagedata>
                </imageobject>
              </mediaobject>
            </screenshot></para>

          <para>Once imported, it is not possible to switch between the two
          track modes. To switch from one mode to the other, delete the track
          then re-import providing the relevant answer to the above
          dialog.</para>

          <para>It is possible to direct Debrief to always import using the
          indicated mode - by clicking on the Automatically use this mode next
          time. Once set to 'automatic', you can switch back to manual
          selection using the selections in the Maritime Analysis Preferences
          dialog:<screenshot>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="figures/ImportModePreference.png"
                             scalefit="1" width="100%"></imagedata>
                </imageobject>
              </mediaobject>
            </screenshot></para>
        </sect2>
      </sect1>

      <sect1 xml:id="moving_around">
        <title>Moving around the view</title>

        <sect2 xml:id="move_intro">
          <title>Introduction</title>

          <para>Once data is loaded into <application>Debrief</application>,
          there are a number of ways of controlling the view of the track data
          using the buttons on the View toolbar. <figure
              xml:id="view_toolbar_demo">
              <title>View toolbar</title>

              <screenshot>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="figures/PaletteButtons3.png"></imagedata>
                  </imageobject>
                </mediaobject>
              </screenshot>
            </figure></para>

          <tip>
            <para>For most of Debrief's operations (such as adding drawing
            features) it needs to have an area to look at. When re-opening an
            existing plot file, or importing data, Debrief can determine the
            area covered by the plot. However, when starting a new, blank
            session, Debrief does not know what area to cover. In this
            circumstance Debrief sets the origin to its own origin, at Fort
            Blockhouse, HMS Dolphin, Portsmouth, United Kingdom - the plot
            will be centred approximately on 50 degrees 49 minutes North, 1
            degree 19 minutes West.</para>
          </tip>
        </sect2>

        <sect2 xml:id="toggle_buttons">
          <title xml:id="toggle_buttons.title">Mouse mode buttons</title>

          <para><indexterm><primary>Drag buttons</primary></indexterm>The first five buttons represent modes of use and are
          selectable individually, with only one selected at a time. When one
          does get clicked, it remains depressed, popping up the button
          previously in use. <variablelist>
              <varlistentry>
                <term><guiicon><inlinemediaobject>
                    <imageobject>
                      <imagedata align="center"
                                 fileref="figures/SelectSegment.png"></imagedata>
                    </imageobject>
                  </inlinemediaobject></guiicon>Drag Track Segment</term>

                <listitem>
                  <para>This setting lets you drag a single segment of track,
                  and is of particular relevance when <link
                  linkend="track_shifting">manipulating track segments</link>
                  in Single Sided Reconstruction</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term><guiicon> <inlinemediaobject>
                    <imageobject>
                      <imagedata align="center"
                                 fileref="figures/DragComponent.png"></imagedata>
                    </imageobject>
                  </inlinemediaobject> </guiicon>Drag Component</term>

                <listitem>
                  <para>This setting lets you drag a single point within a
                  large feature. For example, after switching to Drag
                  Component mode you can drag the corners of a rectangle or a
                  single point within a vessel track.</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term><guiicon> <inlinemediaobject>
                    <imageobject>
                      <imagedata align="center"
                                 fileref="figures/DragWholeFeature.png"></imagedata>
                    </imageobject>
                  </inlinemediaobject> </guiicon>Drag Whole Feature</term>

                <listitem>
                  <para>This setting lets you drag a complete feature. In Drag
                  Whole Feature mode you can drag a rectangle around the plot,
                  or <link linkend="track_shifting">move a complete vessel
                  track</link>.</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term><guiicon> <inlinemediaobject>
                    <imageobject>
                      <imagedata align="center" fileref="figures/Pan.png"></imagedata>
                    </imageobject>
                  </inlinemediaobject> </guiicon>Pan</term>

                <listitem>
                  <para>The Pan control lets you move your current viewpoint.
                  Click on the Pan button, and then drag the mouse around the
                  <glossterm linkend="g_plt">plot</glossterm> -- you will see
                  the view change as you do it.</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term><guiicon> <inlinemediaobject>
                    <imageobject>
                      <imagedata align="center" fileref="figures/RngBrg.png"></imagedata>
                    </imageobject>
                  </inlinemediaobject> </guiicon>Range Bearing</term>

                <listitem>
                  <para>Whilst the Range and Bearing control does not allow
                  you to move around the view, it does merit discussion at
                  this point. Select the Range and Bearing control, then drag
                  the mouse to measure the range and bearing between two
                  points - you will see the calculated results displayed at
                  the mid-point of the connecting, as shown below. The default
                  units are yards, but different units may be selected from
                  the <guimenuitem>CMAP</guimenuitem> section of the
                  properties shown in the
                  <guimenu>Window</guimenu>/<guimenu>Preferences</guimenu>
                  dialog.</para>

                  <para><guiicon> <inlinemediaobject>
                      <imageobject>
                        <imagedata align="center"
                                   fileref="figures/RngDisplay.png"></imagedata>
                      </imageobject>
                    </inlinemediaobject> </guiicon></para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term xml:id="zoom_in.title"><guiicon> <inlinemediaobject>
                    <imageobject>
                      <imagedata align="center" fileref="figures/ZoomIn.png"></imagedata>
                    </imageobject>
                  </inlinemediaobject> </guiicon>Zoom in</term>

                <listitem>
                  <para>You are in the Zoom In mode by default. So, click and
                  drag the mouse across the area where the two <glossterm
                  linkend="g_track">track</glossterm>s are located near the
                  centre of the <glossterm linkend="g_plt">plot</glossterm>.
                  When you release the mouse button you will see a zoomed in
                  view of the data.</para>
                </listitem>
              </varlistentry>
            </variablelist></para>

          <tip xml:id="middle_controls">
            <para>In addition to the mouse mode buttons described above, the
            middle mouse button may be used to navigate irrespective of the
            current mouse mode. Hold the middle mouse button down and drag the
            cursor to pan around the plot, or hold down the
            <guibutton>CTRL</guibutton> key and roll your mouse backwards and
            forwards to zoom in and out of the plot</para>
          </tip>
        </sect2>

        <sect2 xml:id="the_click_btns">
          <title>Click buttons</title>

          <para>The next set of buttons do not involve mouse interaction with
          the plot, they just require mouse clicks <variablelist>
              <varlistentry>
                <term><guiicon> <inlinemediaobject>
                    <imageobject>
                      <imagedata align="center" fileref="figures/ZoomOut.png"></imagedata>
                    </imageobject>
                  </inlinemediaobject></guiicon>Zoom out</term>

                <listitem>
                  <para>If you now click on the Zoom out button, you will
                  "zoom out" of the <glossterm
                  linkend="g_plt">plot</glossterm> (surprise, surprise). This
                  button works well in conjunction with the Zoom in button,
                  since this does not take the mouse out of "zoom in" mode --
                  therefore you can zoom in on areas, click zoom out a couple
                  of times, then zoom in again, all with the minimum of mouse
                  clicks. The wheel-mouse may also be used to zoom out as
                  described above in <emphasis>Toggle
                  Buttons</emphasis></para>
                </listitem>
              </varlistentry>

              <varlistentry xml:id="Fit_To_Win">
                <term><guiicon> <inlinemediaobject>
                    <imageobject>
                      <imagedata fileref="figures/FitToWin.png"></imagedata>
                    </imageobject>
                  </inlinemediaobject> </guiicon>Fit to Window</term>

                <listitem>
                  <para>Whilst the meaning of the icon on this button is not
                  all that clear (it's meant to be a combination of zoom in,
                  zoom out, and all of the pan/move buttons), it fits the view
                  to display all of the currently visible data. Note that
                  there may be data on the <glossterm
                  linkend="g_plt">plot</glossterm> which is not visible
                  (hidden layers), the area covered by the hidden items of
                  information is not included in the "Fit to window"
                  operation. Additionally this phenomenon relates to the data
                  once you have pressed "Filter to time period" from the <link
                  linkend="filter_time_period">Time Controller</link> - the
                  <glossterm linkend="g_plt">plot</glossterm> is resized to
                  fit the data contained in the indicated time period (yes,
                  you'll learn about this later in <xref
                  linkend="filter_time_period" />).</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term><guiicon> <inlinemediaobject>
                    <imageobject>
                      <imagedata fileref="figures/Repaint.png"></imagedata>
                    </imageobject>
                  </inlinemediaobject> </guiicon>Refresh View</term>

                <listitem>
                  <para>This button refreshes the current view. Refreshing is
                  occasionally required when switching between display
                  modes</para>
                </listitem>
              </varlistentry>
            </variablelist></para>
        </sect2>

        <sect2 xml:id="overview_window">
          <title>Chart Overview</title>

          <para>The Chart Overview provides an overview of the full exercise
          area. This view is opened from the
          <guimenu>Window</guimenu>/<guimenuitem>Show View...</guimenuitem>
          drop down list. Using it is quite simple. Drag a region in the
          overview and the current plot will quickly zoom to show that area. A
          highlight rectangle shows the current plot view. Once you've zoomed
          in a little you can double-click in the overview to recenter the
          main plot on that point. <figure xml:id="overviewChart_sample">
              <title>Overview chart in use</title>

              <screenshot>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="figures/OverviewInUse.png"
                               width="100%"></imagedata>
                  </imageobject>
                </mediaobject>
              </screenshot>
            </figure></para>
        </sect2>

        <sect2 xml:id="undo_btn">
          <title>Undo</title>

          <para><indexterm><primary>Undo support</primary></indexterm><application>Debrief</application> contains an unending list
          of undo-able operations, only cleared when the current session is
          closed. Most changes to the <application>Debrief</application> plot
          are undo-able - whether they be creating a new feature, changing an
          attribute of a feature (such as color), or changing the current
          perspective. If something doesn't undo, then the changes are we've
          missed it. Please report the oversight using the procedure in <xref
          linkend="debrief_bugs" />and we'll correct it.</para>

          <para>Each open Debrief plot has its own undo buffer - so if the
          undo button appears disabled you must first make sure you've clicked
          on the plot it relates to. Whilst you may have made the edit via the
          Layer Manager, you must still click on the plot before conducting an
          undo operation.</para>
        </sect2>

        <sect2 xml:id="format_the_plot">
          <title>Formatting the plot</title>

          <para>The background color for the Debrief plot can be <indexterm>
              <primary>Formatting</primary>

              <secondary>Plot (background color)</secondary>
            </indexterm>changed to suit different projection/printing mediums,
          or to suit the analysts personal choice. Additionally, the width at
          which lines of tactical objects are drawn can also be changed.
          Either of these options are accessed by right-clicking on the plot
          and selecting <emphasis>Edit base chart</emphasis>. A properties
          panel will appear, use the drop-down list to change the background
          colour, or move the slider to change the line width itself.</para>
        </sect2>
      </sect1>

      <!-- formatting track data -->
    </chapter>
  </part>

  <part xml:id="UsingDebrief">
    <title>Using Debrief</title>

    <partintro xml:id="IntroPart2">
      <para>You're now ready to start using the more advanced features of
      <application>DebriefNG</application>, the following chapters will guide
      you through specific areas of <application>Debrief</application>'s
      analysis capability.</para>
    </partintro>

    <chapter xml:id="formatting_data">
      <title>Manipulating track data</title>

      <para>Before you are able to analyse or export plots from your data you
      need to know how to format <indexterm>
          <primary>Formatting</primary>

          <secondary>track data</secondary>
        </indexterm> what you see to improve its legibility. Learn more about
      formatting tracks in the <emphasis>Editing your data</emphasis>
      cheat-sheet. <note>
          <para>Apologies in advance to the British users of
          <application>Debrief</application> for the American-spelling of
          colour. The software environment within which
          <application>Debrief</application> is developed is American, and in
          this case superimposing the UK spelling upon it is not a battle
          worth fighting.</para>
        </note></para>

      <sect1 xml:id="property_editing">
        <title>Property editing</title>

        <figure xml:id="properties_view">
          <title>Properties view</title>

          <screenshot>
            <mediaobject>
              <imageobject>
                <imagedata fileref="figures/PropertiesView.png" width="237"></imagedata>
              </imageobject>
            </mediaobject>
          </screenshot>
        </figure>

        <sect2 xml:id="edit_track">
          <title>Edit track</title>

          <para><indexterm><primary>Property editor</primary></indexterm>Track editing is performed on the <link
          linkend="g_property_window">Properties Window</link>, and is
          initiated by selecting the track either from the plot or the Layer
          Manager, as described in the <emphasis>Editing your data</emphasis>
          cheat-sheet.</para>
        </sect2>

        <sect2 xml:id="sym_intervals">
          <title>Set label and symbol display intervals</title>

          <para>In addition to switching the symbols and labels on and off for
          individual positions, you can instruct Debrief to show symbols or
          labels at one of a series of frequencies - allowing you to quickly
          add 15 minute symbols and hourly time labels to a track. The timings
          of the particular positions that get highlighted do not have their
          origin at the start of the track - but from 0000 hrs - thus the 15
          minute positions will be marked for 00, 15, 30, 45 minutes past the
          hour.</para>
        </sect2>

        <sect2 xml:id="track_shifting">
          <title>Track shifting</title>

          <para>The track-shifting <indexterm>
              <primary>Track Shifting</primary>
            </indexterm><indexterm>
              <primary>Reconstruction</primary>

              <secondary>Track Shifting</secondary>
            </indexterm>function has been incorporated to allow users to move
          a track and its associated sensor data. The principle requirement
          for this functionality is to enable the user to move the track to a
          specific geographic reference point (i.e. GPS fix) or to lock the
          relative position of one track to another using sensor data. This
          positioning relative to another track is sometimes termed plot-lock
          <indexterm>
              <primary>Reconstruction</primary>

              <secondary>Plot-lock</secondary>
            </indexterm>or tie-point <indexterm>
              <primary>Reconstruction</primary>

              <secondary>Tie-point</secondary>
            </indexterm>.</para>

          <para><note xml:id="track_shifting_note">
              <para>The Track-shifting implementation was originally provided
              by Mr David Gong at <link
              linkend="nuwc_address">NUWC</link>.</para>
            </note></para>

          <para>Debrief NG provides three modes of track shifting - moving
          individual track segments, moving individual points in a track to
          correct a potentially erroneous data point, moving whole tracks to
          overcome navigational system inaccuracies - such as during a
          plot-lock or tie-in. See the three modes above in <xref
          linkend="toggle_buttons" />.</para>

          <para>A Stacked Dots view is used to show bearing-errors when the
          track-shift is being conducted to line up one or two sets of <link
          linkend="sensor_data">sensor data</link>. For each <link
          linkend="g_sensor_contact">sensor bearing</link> on a track,
          <application>Debrief</application> identifies the point on the
          opposing track nearest to that time. Each time the track is shifted
          (dragged) <application>Debrief</application> calculates the error
          between the sensor bearing and the current measured bearing, showing
          these in a plot (bearing error against time).<note
              xml:id="sensor_offset_note">
              <para>A <link linkend="SensorOffsetsEditor">Sensor Offset</link>
              measurement is applied to the sensor bearing line where there
              sensor datum is offset from the attack datum of the
              platform</para>
            </note></para>

          <para><application>Debrief</application> displays a symbol for each
          visible sensor data, with the symbol being plotted the same colour
          as the sensor data. When track-shifting a long exercise serial, the
          time-variable plot may become difficult to use due to the y-axis
          always auto-scaling to accommodate all available data. Overcome this
          by instruction Debrief to <link
          linkend="filter_to_time_period">filter-to-time-period</link> (from
          the <link linkend="time_controller">time controller</link>, <xref
          linkend="time_controller" />) for the plot-lock period, thus viewing
          a much smaller data-set in the time-variable plot. Additionally, you
          can zoom in on a particular area (by dragging an area downward and
          to the right) of the time-variable plot for detailed analysis,
          dragging the mouse up and to the left to clear the zoom.</para>

          <para>Note the four modes of drag supported by the bearing error
          view. For the non-translate operations you are still able to perform
          a translate by picking up the track segment at its mid-way
          mark.</para>

          <figure xml:id="stacked_dots_view">
            <title>Stacked Dots view</title>

            <screenshot>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="figures/brg_error.png" width="333"></imagedata>
                </imageobject>
              </mediaobject>
            </screenshot>
          </figure>

          <para xml:id="DotsConstraints">For the track-shifting to work, your
          data must be configured as follows:<orderedlist>
              <listitem>
                <para>You must have a Debrief plot open (duh)</para>
              </listitem>

              <listitem>
                <para>You must have a vessel track as the <link
                linkend="primary_track">primary track</link> on the <link
                linkend="the_tote_area">Tote</link> (not an annotation or
                other time-related object)</para>
              </listitem>

              <listitem>
                <para>You must have a secondary track on the Tote, but only
                one secondary track. This must also be a vehicle track.</para>
              </listitem>

              <listitem>
                <para>The primary track must have <link
                linkend="sensor_data">sensor data</link>.</para>
              </listitem>
            </orderedlist></para>
        </sect2>
      </sect1>

      <sect1 xml:id="new_chart_features">
        <title>Adding chart features</title>

        <sect2 xml:id="chart_toolbar">
          <title>Chart features toolbar</title>

          <para>Debrief also allows you to add items to the <glossterm
          linkend="g_plt">plot</glossterm>.</para>

          <para>These items are contained in two menus; <guilabel>Chart
          Features</guilabel> and <guilabel>Drawing</guilabel>. In
          <application>Debrief</application>, hover the mouse over them to see
          what type of item they create. <figure xml:id="chart_features_demo">
              <title>Chart features menu</title>

              <screenshot>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="figures/PaletteButtons2.png"></imagedata>
                  </imageobject>
                </mediaobject>
              </screenshot>
            </figure></para>

          <important>
            <para>It is important to note that each time you click on an item
            from the toolbar, a new instance of it is created, it does not
            re-open an existing item.</para>
          </important>
        </sect2>

        <sect2 xml:id="the_Scale">
          <title>Scale</title>

          <para>The Scale button provides a scale, indicating <indexterm>
              <primary>Scale</primary>
            </indexterm> to the viewer the current area of coverage of the
          plot. Once created the scale values can be set automatically or
          manually, as described below: <variablelist>
              <varlistentry>
                <term>Auto Mode</term>

                <listitem>
                  <para>In auto-mode Debrief assesses the current screen size
                  and area of data covered, and attempts to set the most
                  appropriate range of values and step size for the scale. A
                  good working practice is to switch to auto-mode to allow
                  Debrief to estimate the optimal values, then switch out of
                  auto-mode to fine-tune the <guilabel>ScaleMax</guilabel> and
                  <guilabel>ScaleStep</guilabel> values provided.</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term>Color</term>

                <listitem>
                  <para>The colour used to draw the scale.</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term>Location</term>

                <listitem>
                  <para>The corner of the plot where the scale is
                  placed.</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term>ScaleMax</term>

                <listitem>
                  <para>The maximum value of the scale (in yards)</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term>ScaleStep</term>

                <listitem>
                  <para>The size of the steps used to break up the scale
                  (again in yards)</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term>Visible</term>

                <listitem>
                  <para>You can clear the visibility flag to temporarily hide
                  a scale, allowing you to switch between scales, for
                  example.</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term>Units</term>

                <listitem>
                  <para>Use this list to select the units displayed in the
                  scale</para>
                </listitem>
              </varlistentry>
            </variablelist></para>

          <para><figure xml:id="sample_scale_demo">
              <title>Sample scale</title>

              <screenshot>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="figures/scale_demo.gif"></imagedata>
                  </imageobject>
                </mediaobject>
              </screenshot>
            </figure></para>
        </sect2>

        <sect2 xml:id="the_grid">
          <title>Grid</title>

          <para>Next, try with a new grid: <guiicon> <inlinemediaobject>
              <imageobject>
                <imagedata fileref="figures/GridBtn.png"></imagedata>
              </imageobject>
            </inlinemediaobject> </guiicon><variablelist>
              <varlistentry>
                <term>Auto Mode</term>

                <listitem>
                  <para>In auto-mode Debrief assesses the current screen size
                  and area of data covered, and attempts to set the most
                  appropriate range of values and step size for the scale. A
                  good working practice is to switch to auto-mode to allow
                  Debrief to estimate the optimal values, then switch out of
                  auto-mode to fine-tune the <guilabel>ScaleMax</guilabel> and
                  <guilabel>ScaleStep</guilabel> values provided.</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term>Color</term>

                <listitem>
                  <para>The colour used to draw the scale.</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term>Delta</term>

                <listitem>
                  <para>The interval between plotted lines</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term>PlotLabels</term>

                <listitem>
                  <para>Whether to label the grid. See tip <link
                  linkend="grid_labels">below</link> for details regarding how
                  the labels are formatted</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term>Visible</term>

                <listitem>
                  <para>Whether you can hide the grid, of course.</para>
                </listitem>
              </varlistentry>
            </variablelist></para>

          <tip xml:id="grid_labels">
            <para>Two methods are used to produce grid lines: <itemizedlist>
                <listitem>
                  <para><emphasis>Lat/Long Grid</emphasis>. Where angular
                  delta units are selected (degrees, minutes), vertical and
                  horizontal grid lines are calculated relative to the
                  latitude of the plot (thus a 1 degree grid requested at 60
                  degrees North will have grid lines of 60nm separation in
                  latitude, but with lines of longitude at 30nm
                  separation).</para>
                </listitem>

                <listitem>
                  <para><emphasis>Square Grid</emphasis>. Where distance
                  related delta units are selected (m, yd, km, nm, etc), the
                  vertical and horizontal grid lines are constructed using the
                  same delta distance (thus a selected delta of 1 kyd will
                  have lines of 1 kyd separation in the horizontal and
                  vertical).</para>
                </listitem>
              </itemizedlist></para>
          </tip>
        </sect2>

        <sect2 xml:id="the_local_grid">
          <title>Local Grid</title>

          <para>The Local Grid ( <guiicon> <inlinemediaobject>
              <imageobject>
                <imagedata fileref="figures/local_grid.png"></imagedata>
              </imageobject>
            </inlinemediaobject> </guiicon>) is a modified grid for which the
          origin has been over-ridden. Change the <guilabel>Origin</guilabel>
          attribute to move the grid origin. The
          <guilabel>PlotOrigin</guilabel> attribute has been provided to draw
          a small point at the origin of the grid - useful when initially
          designing/recording the grid.</para>
        </sect2>

        <sect2 xml:id="the_coastline">
          <title>Coastline</title>

          <para>The <application>Debrief</application> installation includes a
          <indexterm>
              <primary>Coastline</primary>

              <secondary>Introduction</secondary>
            </indexterm>low-resolution coastline datafile. Whilst it does
          cover the whole globe, it does so at a low resolution, so is only
          useful for an overview. The vectored chart data discussed later
          provides a much lower resolution of data. <figure
              xml:id="coastline_demo">
              <title>Sample of default coastline data</title>

              <screenshot>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="figures/old_coastline.gif"></imagedata>
                  </imageobject>
                </mediaobject>
              </screenshot>
            </figure></para>
        </sect2>

        <sect2 xml:id="vectored_data">
          <title>Vectored data</title>

          <para>The addition of vectored chart data is covered later in this
          document, in <xref linkend="view_vpf" />. The image below provides a
          sample of the level of detail supplied. <figure
              xml:id="vectored_Coast_demo">
              <title>Sample of vectored coastline data</title>

              <screenshot>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="figures/VPF_Layer9.gif"></imagedata>
                  </imageobject>
                </mediaobject>
              </screenshot>
            </figure></para>
        </sect2>

        <sect2 xml:id="etopo_gridded_bathy">
          <title>ETOPO gridded bathy</title>

          <para>Whilst the VPF dataset <indexterm>
              <primary>ETOPO Data</primary>
            </indexterm>provides a contoured bathymetry within broad depth
          steps, the ETOPO dataset provides a gridded bathymetry in 5' or 2'
          steps. When you ask Debrief to plot an ETOPO background, Debrief
          will try to load an ETOPO-2 dataset first, followed by an ETOPO-5
          dataset if that is unavailable. The image below provides a sample of
          the level of detail supplied. <figure xml:id="ETOPO_Demo">
              <title>Sample of ETOPO gridded bathymetry</title>

              <screenshot>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="figures/etopo_data.gif"></imagedata>
                  </imageobject>
                </mediaobject>
              </screenshot>
            </figure></para>
        </sect2>
      </sect1>

      <sect1 xml:id="drawing_features">
        <title>Adding drawing features</title>

        <para>The <guilabel>Drawing</guilabel> toolbar and menu are used to
        place geographic features on the plot; features which are
        geographically fixed. In general, when you create them, their corners
        must be specified by copying a location from the plot and posting it
        into the property of the relevant corner. <figure
            xml:id="drawing_toolbar_demo">
            <title>Drawing toolbar</title>

            <screenshot>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="figures/PaletteButtons1.png"></imagedata>
                </imageobject>
              </mediaobject>
            </screenshot>
          </figure></para>

        <note>
          <para>By default, new drawing features are placed in the
          <computeroutput>Misc</computeroutput> layer, from where they can be
          moved to other layers as required. If you're creating lots of
          drawing features, and want to place them directly into target
          layers, select on <guimenuitem>Manually select target
          layer</guimenuitem> from the top of the Drawing menu. When this
          setting is ticked, Debrief will prompt you to select a target layer
          for each new drawing feature added to the plot. Clear the ticked
          setting to return the target layer to the
          <computeroutput>Misc</computeroutput> layer</para>
        </note>

        <sect2 xml:id="the_labels">
          <title>Label</title>

          <para>The Label <indexterm>
              <primary>Annotations</primary>

              <secondary>Label</secondary>
            </indexterm>drawing item allows you to place a labelled symbol on
          the plot. Typically this may be used to annotate events on the plot,
          or to add an extra feature which did not warrant its own Debrief REP
          entry. Like all annotations Labels have time start and end
          properties. Because of this they can be placed on the <link
          linkend="the_tote_area">Tote</link> and used in analysis, as you
          will learn later.</para>

          <para><tip>
              <para>A custom editor is supplied (see below) for editing
              locations of data items, it is used frequently in
              <application>Debrief</application>. Clicking on the expand
              button will let you edit individual lat/long fields (shown in
              figure <xref linkend="editor_expanded" />). Alternatively, you
              may set the location to a specific point on the plot.
              Right-click on the plot and select <guimenuitem>Copy cursor
              location</guimenuitem>. Then click once on the location editor
              to reveal the <guibutton>Paste</guibutton> button (shown in
              <xref linkend="editor_paste" />), and click it to paste the
              cursor location.</para>

              <figure xml:id="editor_initial">
                <title>Location Editor (initial view)</title>

                <screenshot>
                  <mediaobject>
                    <imageobject>
                      <imagedata fileref="figures/LocationEditor.png"></imagedata>
                    </imageobject>
                  </mediaobject>
                </screenshot>
              </figure>

              <figure xml:id="editor_expanded">
                <title>Location Editor (expanded view)</title>

                <screenshot>
                  <mediaobject>
                    <imageobject>
                      <imagedata fileref="figures/LocationEditor3.png"></imagedata>
                    </imageobject>
                  </mediaobject>
                </screenshot>
              </figure>

              <figure xml:id="editor_paste">
                <title>Location Editor (paste view)</title>

                <screenshot>
                  <mediaobject>
                    <imageobject>
                      <imagedata fileref="figures/LocationEditor2.png"></imagedata>
                    </imageobject>
                  </mediaobject>
                </screenshot>
              </figure>
            </tip></para>

          <note>
            <para>Note that the text for the label itself can be a multi-line
            piece of text. When in the text-editor box for the label, just
            press the return key on your keyboard to move to the next line.
            The multi-line piece of text will be centre formatted on screen
            according to the <guilabel>Label Location</guilabel> property. The
            multi-line label is also available for all labels on the
            <application>Debrief</application> plot. Note that when the label
            is stored to disk in the <application>Debrief</application>
            plot-file format, the '\n' character used internally to represent
            the new line is converted to a '\\n' string to allow its easy
            storage.</para>
          </note>
        </sect2>

        <sect2 xml:id="the_ellipse">
          <title>Ellipse</title>

          <para>The Ellipse shape works in much <indexterm>
              <primary>Annotations</primary>

              <secondary>Ellipse</secondary>
            </indexterm> the same way as a Label, except an ellipse is drawn
          on the plot instead of the labelled symbol. The size of the ellipse
          is dictated by the Maxima and Minima values which specify the
          lengths of its semi-major and semi-minor axes, expressed in
          user-selectable distance units. These values are the distances from
          the centre of the ellipse to the furthest and closest points on its
          perimeter, respectively. The direction of the ellipse is specified
          by the orientation, expressed in degrees.
          <application>Debrief</application> does not check that the maxima is
          larger that the minima, it merely plots an ellipse oriented about
          the semi-major axis.</para>
        </sect2>

        <sect2 xml:id="the_polygon">
          <title>Polygon</title>

          <para>The Polygon drawing feature <indexterm>
              <primary>Annotations</primary>

              <secondary>Polygon</secondary>
            </indexterm>allows more varied shapes to be plotted within
          Debrief. A series of points (called a Path) are added to a Shape
          which are the connected up to create a Polygon. The points in the
          path may be typed in, double-clicked, or dragged to produce the
          correct polygon.</para>

          <para>When a new polygon is created, its editor panel will open as
          shown below: <figure xml:id="polygon_demo">
              <title>Initial view of polygon</title>

              <screenshot>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="figures/EditPolygon.png" width="263"></imagedata>
                  </imageobject>
                </mediaobject>
              </screenshot>
            </figure></para>

          <para>The properties shown are similar to those shown for most other
          shapes, with the exception of the actual location of the polygon.
          Instead of being able to directly edit the points in the polygon, an
          indication of the number of points is provided, together with a
          button which will take you to the Path editor. The Path editor is
          shown below: <figure xml:id="path_editor_demo">
              <title>Path editor</title>

              <screenshot>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="figures/PathEditor.png" width="269"></imagedata>
                  </imageobject>
                </mediaobject>
              </screenshot>
            </figure></para>

          <para>When it opens, the Path editor contains a single point
          (incidentally, this point it is placed a the centre of the current
          dataset). The four buttons at the top-right of the panel allow you
          to move the points up and down, create a new point, and delete a
          point.</para>

          <para>To edit a point, first single-click on it, it will then be
          shown in the lower panel. You may then click on the Edit or Select
          Point buttons to either type-in the location of the point or to
          double-click the new location for the point. Double-click on a point
          to edit its individual attributes in the <link
          linkend="properties_view">Properties View</link>, or right-click on
          a point to paste the location currently on the clipboard.</para>
        </sect2>

        <sect2 xml:id="easy_shapes">
          <title>Rectangle, Circle, Line, Arc</title>

          <para>The Rectangle, Circle and Line shapes <indexterm>
              <primary>Annotations</primary>

              <secondary>Rectangle, Circle, Line, Arc</secondary>
            </indexterm>work in the same way as the others described here, the
          Location Editor described above being used to set the corners,
          centre, or ends as required.<note>
              <para>Some of the more basic drawing items have a single
              <guilabel>DTG</guilabel> parameter instead of
              <guilabel>TimeStart</guilabel> and <guilabel>Time_End</guilabel>
              properties. Where there is a single time, the time-analytical
              features of Debrief (such as Snail mode) treat the feature as
              <emphasis>alive</emphasis> for three minutes either side of the
              time value.</para>
            </note></para>

          <tip>
            <para>To draw a line created from an origin with values of range
            and bearing, first create the line, and put the start point of the
            line at the origin. Now switch the mouse mode to
            <guilabel>Range/Bearing</guilabel> ( <guiicon> <inlinemediaobject>
                <imageobject>
                  <imagedata align="center" fileref="figures/RngBrg.png"></imagedata>
                </imageobject>
              </inlinemediaobject> </guiicon>). Now click on the button
            labelled <guilabel>Select Point</guilabel> for
            <guilabel>LineStart</guilabel>, and drag the mouse out from the
            origin point. The current range and bearing will be displayed at
            the bottom-left of the screen. When the mouse is at the desired
            range and bearing right-click and copy the position onto the
            clipboard. Next, paste that location into the
            <guilabel>LineEnd</guilabel> value.</para>
          </tip>
        </sect2>

        <sect2 xml:id="buoyfields_intro">
          <title>Buoyfield</title>

          <para>Debrief provides a <emphasis>builder</emphasis> dialog to
          assist in the creation of buoyfields. The creation of <glossterm
          linkend="g_buoyfields">buoyfields</glossterm> is covered later in
          <link linkend="handling_buoyfields">Handling
          Buoyfields</link>.</para>
        </sect2>

        <sect2 xml:id="general_editing">
          <title>General</title>

          <para>To edit any existing annotation, double on it on the
          <glossterm linkend="g_plt">plot</glossterm> or the Layer Manager to
          select it - its attributes will then be available from the
          Properties View. Alternatively, right-click on an item on the Plot
          or Layer Manager, and editable attributes are available from the
          object's drop-down list. Only boolean (true/false) and list-related
          (top/bottom/left/right etc) are editable from the right-click
          menu.</para>
        </sect2>
      </sect1>

      <!--         layer manager                     -->

      <sect1 xml:id="layer_mgr">
        <title>Layer management</title>

        <sect2 xml:id="layer_mgr_intro">
          <title>Layer Manager</title>

          <para><indexterm><primary>Layer manager</primary></indexterm>The Layer Manager provides a tree-oriented view of all of the
          editable data within a plot, organised into layers. New items added
          to the plot are placed into a <emphasis>Misc</emphasis> layer. From
          here they can be reorganised into suitably themed layers via <link
          linkend="cut_copy_paste">cut/paste</link>.<figure
              xml:id="layer_manager">
              <title>Layer Manager view</title>

              <screenshot xml:id="layMgr_screenshot">
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="figures/LayerManagerView.png"
                               width="279"></imagedata>
                  </imageobject>
                </mediaobject>
              </screenshot>
            </figure></para>

          <para>Reveal the Layer Manager by selecting it from the
          <guimenu>Window</guimenu>/<guimenuitem>Show View...</guimenuitem>
          drop-down list. Once open you will see the data shown as a series of
          layers - each with a tick indicating if it's visible or not. A
          toolbar provides command buttons to make items visible or not
          visible, and buttons are enabled to make an entity the primary or
          secondary track, or to add the selected item as another secondary
          (when applicable). Note that not just tracks may be denoted primary
          or secondary: and graphic item with a position and date-time can be
          selected: thus Debrief can be configured to show a running
          indication of bearing and range for a series of vessels from a
          single label datum (representing a sonar-buoy or mine).</para>

          <para>The drop-down menu provides further commands, significantly
          including the ability to add a new layer; <guimenuitem>Create
          Layer</guimenuitem>. Further commands are available when
          right-clicking on one or more Layer Manager elements: in particular
          the ability to cut/copy/paste elements between layers and plots,
          together with the command to view a time-variable graph of the
          selected elements (see <xref linkend="show_time_vars" />).</para>
        </sect2>

        <sect2 xml:id="cut_copy_paste">
          <title>Cut/Copy and Paste</title>

          <para>Items may be cut, copied and pasted between Layers using the
          commands contained in the menus obtained by right-clicking on the
          item. The cut command may be used on its own to delete an item.
          Copying items is a quick way of making duplicates of a correctly
          formatted annotation or screen item such as a rectangle or
          ellipse.</para>

          <para>In addition to copying/moving items between layers, items and
          layers themselves can be copied or moved between sessions within
          Debrief.</para>

          <para>To paste a layer (or track) into the top level of the layer
          manager just click on the white space below the displayed layers and
          select <guibutton>Paste Item</guibutton> form the popup menu.</para>

          <note>
            <para>All top-level layers (that it screen items which appear at
            the top level in Layer Manager, such as Tracks, ETOPO data and
            Layers themselves) can have a line width assigned to them. This
            setting is observed when plotting all items in that layer. The
            smallest line width supported is <emphasis>hairwidth</emphasis>,
            which plots the finest line the particular output device (screen
            or printer) can produce. The line-width parameter can be accessed
            by right-clicking on the screen item directly in addition to via
            the Layer Manager.</para>
          </note>
        </sect2>
      </sect1>

      <sect1 xml:id="save_reopen">
        <title>Saving and re-opening plots</title>

        <sect2 xml:id="save_Detail">
          <title>Save</title>

          <para>You may (or my not) know what the <glossterm
          linkend="g_replay">Replay</glossterm> file format used to load data
          into <application>Debrief</application> looked like. Whilst it is
          compact and easy to use, unfortunately the Replay file format does
          not allow us to store all of the formatting we have applied to the
          <application>Debrief</application> <glossterm
          linkend="g_plt">plot</glossterm>, nor the coordinates of what you
          are currently viewing, nor how you have arranged to store your data
          in <glossterm linkend="g_layer">layers</glossterm>. This problem is
          overcome by the use of the <application>Debrief</application>
          <glossterm linkend="g_plot_file">Plot-File</glossterm> format, an
          application defined using <link linkend="intro_xml">XML</link>. Have
          a quick read about <glossterm linkend="g_xml">XML</glossterm> in the
          Reference Guide or Glossary if you're not aware of it and are
          sufficiently interested, otherwise, here's an overview:
          <itemizedlist>
              <listitem>
                <para>Debrief stores plots using XML</para>
              </listitem>

              <listitem>
                <para>XML stands for eXstensible Markup Language, which allows
                structured data to be stored in text format, and is a
                world-wide standard promoted by <link
                xlink:href="http://www.w3c.org"
                xmlns:xlink="http://www.w3.org/1999/xlink">http://www.w3c.org</link>.</para>
              </listitem>

              <listitem>
                <para>XML files can be edited outside
                <application>Debrief</application>, allowing you to cut and
                paste between <glossterm
                linkend="g_plot_file">plot-files</glossterm> to build up a new
                <glossterm linkend="g_plot_file">Plot-File</glossterm>, all in
                a text editor</para>
              </listitem>
            </itemizedlist></para>

          <para>Whilst a plot is typically created from an REP file, it may
          not be saved back into that REP file - it must be saved as an XML
          Plot-File. To save your work as an <glossterm
          linkend="g_xml">XML</glossterm> file, click on the Save button:
          <guiicon> <inlinemediaobject>
              <imageobject>
                <imagedata fileref="figures/SaveBtn.png"></imagedata>
              </imageobject>
            </inlinemediaobject> </guiicon> from the Workbench toolbar or the
          <guimenu>File</guimenu> menu. A file dialog will open (see below),
          allowing you to save the current session as a
          <application>Debrief</application> <glossterm
          linkend="g_plot_file">Plot-File</glossterm> (
          <filename>xml</filename>).<note>
              <para>Debrief will only let you save the new plot into one of
              your project folders, so you must both select a folder and a
              provide a filename for the new file. Usefully, Debrief guesses
              that you probably want to name the plot the same as the REP file
              first loaded. Hey, it's only a guess.</para>
            </note></para>

          <para></para>

          <para><figure xml:id="save_file_demo">
              <title>Save-file dialog</title>

              <screenshot>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="figures/SaveDialog.png" width="263"></imagedata>
                  </imageobject>
                </mediaobject>
              </screenshot>
            </figure></para>

          <para>Save-as functionality is provided through the <guibutton>Save
          As</guibutton> button, next to the <guibutton>Save</guibutton>
          button in the <guimenu>File</guimenu> menu.</para>

          <sidebar>
            <para><application>Debrief</application> plot files can grow very
            large, and on occasion the memory required for the save operation
            can reach the upper limit provided to the application by default.
            When Debrief fails during the Save operation due to reaching the
            upper memory limit it stops trying to save to file and shows a
            message dialog advising you to increase the limit:<quote>Ran out
            of memory whilst saving plot, try adding -Xmx256m to the command
            line</quote>. This extra parameter passed when Debrief is starting
            instructs your PC to provide Debrief with 256 Megabytes of memory.
            If you continue to receive the error message try increasing the
            memory allocation to 512 Megabytes.</para>

            <para>The save operation itself is conducted in a two-stage
            process. If the operation entails saving over an existing file
            (when you just do a plain Save, or Save As over-writing an older
            version) Debrief first writes the plot to a subtly different
            filename in the same directory (<filename>plot.xml</filename>
            would get saved to <filename>~plot.tmp</filename>). If the save
            operation completes successfully then the older file is deleted
            and the temporary file renamed to the originally requested
            filename. Thus, your existing file only gets overwritten on
            successful completion of the save.</para>
          </sidebar>
        </sect2>

        <sect2 xml:id="adding_more_data">
          <title>Adding more data to a plot</title>

          <para>With a plot already open, you are able to drag a
          <application>Debrief</application> <filename>XML</filename> or
          <filename>REP</filename> file into its chart, adding the content to
          the existing session. Dragging multiple files onto the plot area
          adds them all to the existing session. To create a composite plot
          like this, you can start by using Debrief's <emphasis>New Plot
          Wizard</emphasis> (see relevant <link linkend="g_cheat">Cheat
          Sheet</link>)</para>
        </sect2>
      </sect1>

      <sect1 xml:id="GroomingTrackData">
        <title>Grooming track data</title>

        <sect2 xml:id="IntroGrooming">
          <title>Introduction</title>

          <para>Track data can arrive at Debrief in vary degrees of quality.
          Traditionally <link linkend="MWC">MWC</link> pre-process track data
          to remove jumps and generally smooth the data. The <link
          linkend="SingleSidedChanges">2009 Single-Sided Reconstruction</link>
          extensions added functionality to Debrief to perform elementary
          track operations, including smoothing and removal of jumps. One
          approach to avoiding the jumps commonly associated with data from
          inertial navigation systems is to <link linkend="import_modes">load
          the data in DR mode</link>. The alternative is to move the track
          before/after the jump to line up the two sections.<screenshot>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="figures/TrackWithJump.png" scalefit="1"
                             width="100%"></imagedata>
                </imageobject>
              </mediaobject>
            </screenshot></para>
        </sect2>

        <sect2 xml:id="ResamplingData">
          <title>Resampling track and sensor data</title>

          <para><indexterm><primary>Resampling data</primary></indexterm><indexterm><primary>Track sections</primary><secondary>Resample</secondary></indexterm>On occasion the data loaded into Debrief is of the wrong
          frequency:<variablelist>
              <varlistentry>
                <term>Too dense</term>

                <listitem>
                  <para>a track may have data items at a frequency higher than
                  that necessary for the current analysis, resulting in slower
                  than necessary Debrief performance. Alternately, a period of
                  sensor data may be too dense, obscuring the underlying
                  patterns in the data (such as a bearing fan)</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term>Too sparse</term>

                <listitem>
                  <para>During track reconstruction, it may emerge that the
                  sensor data is of much higher frequency than the position
                  data. After reconstruction, when stepping through a track in
                  time the positions may <emphasis>jump</emphasis> to the
                  specified time - indicating the positions are too sparse.
                  Resolve this by either resampling the positions or by
                  directing the track to use interpolated points.</para>
                </listitem>
              </varlistentry>
            </variablelist>Problems associated with data density are handled
          differently between tracks and blocks of sensor data. Tracks are
          resampled using the <guilabel>ResamplePositionsAt</guilabel>
          property - which adds or removes position observations as necessary.
          Sensor data is resampled using the
          <guilabel>VisibleFrequency</guilabel> property - though note that
          this does not add or remove points, it merely changes their
          visibility.</para>

          <para>Note: sensor and TUA data have a characteristic where there
          may be empty periods when the contact is not held. It would be wrong
          to continue interpolating data points during these periods, so data
          points are not generated if there is a gap of more than 3 minutes
          between data points.</para>
        </sect2>

        <sect2 xml:id="SplitTrackSections">
          <title>Splitting track sections</title>

          <para><indexterm><primary>Track sections</primary><secondary>Split</secondary></indexterm>Before a jump can be removed from a track, the track must be
          split. To split a track, first decide where the split should be
          made, and right-click on the point where the split should happen
          (either on the plot or in the layer manager). The popup menu will
          provide options to split the track immediately before or after the
          indicated point.<screenshot>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="figures/SplitTrackMenu.png"></imagedata>
                </imageobject>
              </mediaobject>
            </screenshot></para>

          <para>On completion you'll see a visible split in the track, and the
          track represented as two segments in the layer manager.<screenshot>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="figures/TrackAfterSplit.png"
                             scalefit="1" width="100%"></imagedata>
                </imageobject>
              </mediaobject>
            </screenshot>The track segments are named according to the DTG of
          their start point. The two track segments can now be manipulated
          separately (dragged) using the 'drag track segment' tool as <link
          linkend="DraggingTracks">described later</link>.</para>
        </sect2>

        <sect2 xml:id="JoinTrackSections">
          <title>Joining track sections</title>

          <para><indexterm><primary>Track sections</primary><secondary>Join</secondary></indexterm>Once track segments have been <link
          linkend="DraggingTracks">manipulated</link>, they can be rejoined.
          To rejoin tracks, select them both/all in the layer manager (using
          the <guilabel>Control</guilabel> key as appropriate). Then
          right-click and select Merge Tracks as shown below. Note, you can
          select which track becomes the 'host'. <screenshot>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="figures/MergeTracks.png"></imagedata>
                </imageobject>
              </mediaobject>
            </screenshot></para>

          <para>The Debrief merge algorithm is not able to handle overlapping
          tracks, since it cannot resolve which overlapping segment to favour.
          This is a task best undertaken by the analyst. So, Debrief will
          produce a warning when the analyst tries to merge overlapping
          tracks. When it does, just delete one or more overlapping points and
          trigger the operation again.</para>
        </sect2>

        <sect2 xml:id="CombineTrackSections">
          <title>Combining track sections</title>

          <para><indexterm><primary>Track sections</primary><secondary>Combine</secondary></indexterm>On occasion, once a series of track segments have been built
          up (or created using the Generate TMA wizard) you may with to
          combine them in order to make their management easier. If you wish
          to keep them as individual entities instead of merging them into a
          single new track segment, you may Combine the track segments.
          Performing this operation puts the segments into a single parent
          track whilst retaining them within this as single entities. This is
          particularly relevant for TMA Track Segments, for which you may wish
          to refine your estimates of course/speed.</para>

          <para>In addition to combining periods of track, Debrief is able to
          generate sections of track to join existing sections. It performs
          this using a series of Cubic Spline calculations. The Splines cover
          Lat, Long, Depth, Course and Speed. In this way, the infill segment
          introduces track points that provide a smooth transition in the
          above attributes from one track to the other. The time interval used
          for the data points in the infill section is taken from the time
          interval between the first two points of the second segment. On the
          plot, the infill segment is shown as a dotted line, to indicate that
          its series of purely calculated positions, and not based on any
          observed measurements.</para>
        </sect2>
      </sect1>

      <sect1 xml:id="GridEditor">
        <title>Using the Grid Editor</title>

        <sect2 xml:id="GridIntro">
          <title>Introduction</title>

          <para><indexterm><primary>Grid editor</primary></indexterm>Another feature introduced alongside the <link
          linkend="SingleSidedChanges">2009 Single-Sided Reconstruction</link>
          extensions is the Grid Editor. This is a tabular editor with an
          associated xy plot that allows bulk editing of data points, together
          with data smoothing operations.<screenshot>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="figures/GridOverview.png" scalefit="1"
                             width="100%"></imagedata>
                </imageobject>
              </mediaobject>
            </screenshot></para>
        </sect2>

        <sect2 xml:id="UseOfGrid">
          <title>Use of Grid Editor</title>

          <para>The Grid Editor tracks the current selection in the Layer
          Manager. Thus, when you select something capable of being edited in
          a grid in the Layer Manager (such as a set of positions or sensor
          cuts) then it is shown in the Layer Manager. <note>
              <para>If this becomes inconvenient you can stop the Grid Editor
              from tracking the Layer Manager selection by clearing the
              <guilabel>Track Selection</guilabel> lock icon.</para>
            </note></para>

          <para>When a set of data is first loaded into the Grid Editor it is
          shown as a plain table. Click into any cell to edit its data.
          Buttons in the Grid Editor toolbar allow you to insert or delete a
          row. But, the Grid Editor becomes significantly more capable when
          you focus on a single attribute. Do this by clicking on the title
          label for a field (such as depth, bearing, etc).</para>

          <para>When you focus the grid editor on a single field it shows an
          xy plot of that field. This plot can be used to highlight/remove/fix
          outliers and for general data smoothing operations. Drag points in
          the graph in order to smooth them, or for Debrief to take on the
          smoothing for you, select a series of rows either side of the dodgy
          items then select the <emphasis>interpolate</emphasis> calculator
          icon to smooth the unselected rows.</para>

          <para>See the <emphasis>Groom Sensor Data</emphasis> cheat sheet for
          more guidance on these operations.</para>
        </sect2>
      </sect1>
    </chapter>

    <chapter xml:id="analysing_data">
      <title>Analysing Data</title>

      <para>Analysis is the core function of <indexterm>
          <primary>Track Data</primary>

          <secondary>Primary &amp; Secondary Tracks</secondary>
        </indexterm> Debrief. In this section (at last) you are going to gain
      some familiarity with how Debrief can be used to analyse maritime
      exercises.</para>

      <sect1 xml:id="assigning_tracks">
        <title>Assigning tracks as primary and secondary</title>

        <sect2 xml:id="the_tote_area">
          <title>Tote area</title>

          <para><indexterm><primary>Track tote</primary></indexterm>We'll have a brief explanation of the Tote at this point,
          using the image below. <figure xml:id="tote_demo">
              <title>The <application>Debrief</application> Tote</title>

              <screenshot>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="figures/ToteLabelled.png" width="274"></imagedata>
                  </imageobject>
                </mediaobject>
              </screenshot>
            </figure></para>

          <para>The <glossterm linkend="g_tote">Tote</glossterm> area is used
          to show the current and relative status between two or more platform
          tracks. The information on the <glossterm
          linkend="g_tote">Tote</glossterm> is dynamic, showing vessel
          information at the time indicated in the Stepper Control.</para>

          <note>
            <para>The primary and secondary tracks may not contain values
            exactly at the time in the time stepper control. For both the tote
            display and the plot-highlights, Debrief uses the data values
            recorded on or immediately after the indicated stepper time (see
            the <xref linkend="time_calc" /> for more detail).</para>
          </note>

          <para xml:id="primary_track">One <glossterm
          linkend="g_track">track</glossterm><indexterm><primary>Primary track</primary></indexterm> currently loaded is assigned as
          the Primary track (the red track in this instance), and then one or
          more tracks are assigned as <indexterm><primary>Secondary track</primary></indexterm>Secondary tracks. The primary track
          always shows absolute data such as current course, speed and depth.
          With just a single secondary track specified, it also shows relative
          (calculated) data - as illustrated above. The secondary tracks
          always display both absolute data (course, speed, depth), plus the
          relative data respective to the primary. Thus, remember that if you
          want to see the primary track's relative bearing to the secondary,
          make sure there's just the one secondary track selected.</para>

          <para>Not only tracks can be placed on the Tote. Buoyfields and most
          annotations (labels, circles, etc) can also be set as primary or
          secondary track. If no time is available for an annotation it is
          deemed to always be valid, and calculations are shown although the
          time field is displayed as "n/a". However, if the annotation has
          start and end times the tote displays "n/a" when outside that period
          and calculated data when inside it.</para>

          <note>
            <para>It may be useful to remember that the Primary Track is
            usually assigned to the Target, thereby allowing a constant
            display of target bearing and range.</para>
          </note>

          <para>There can be any number of secondary tracks.
          <application>Debrief</application> displays calculated results of
          the relationship between each one and the Primary Track. To see the
          relationship between a pair of secondary tracks, one of them must be
          set to the Primary track.</para>

          <para>The following calculated data is presented, where the current
          point on each track is used for the calculation: <variablelist>
              <varlistentry>
                <term>Range</term>

                <listitem>
                  <para>The range between the current point on the secondary
                  track and the current point on the primary track using the
                  <glossterm linkend="g_earth_model">earth model</glossterm>
                  as described in the Glossary, displayed in the units stored
                  in the Debrief preferences window. Debrief NG introduced the
                  option of showing <glossterm linkend="g_slant_range">slant
                  range</glossterm>, accessible from Debrief's Preferences
                  window. If you have indicated that you want to view slant
                  range, then the range shown is a function of horizontal
                  range and vertical separation.</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term>Bearing</term>

                <listitem>
                  <para>The bearing between the points.</para>
                </listitem>
              </varlistentry>

              <varlistentry xml:id="RelBearingDescription">
                <term>Rel Bearing / ATB</term>

                <listitem>
                  <para>The relative bearing and Angle on The Bow from the
                  perspective of that column's track.. There are two formats
                  used for relative bearing, depending on the setting of
                  <emphasis>Relative bearing format</emphasis> in the
                  <guimenu>Window</guimenu>/<guimenu>Preferences</guimenu>
                  dialog. If the format is specified as UK, the R and G
                  characters at the start of the result are short for Red and
                  Green, which indicate that the contact is to the Port or
                  Starboard of the secondary track. If the format is specified
                  as US, the value uses 0 as directly ahead and continues
                  clockwise through 180 (astern) and back round to
                  359.9.</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term>Speed</term>

                <listitem>
                  <para>The current speed of the indicated track (no actual
                  calculation is performed here; the value from the data-file
                  is displayed directly).</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term>Course</term>

                <listitem>
                  <para>The current course of the indicated track (no actual
                  calculation is performed here; the value from the data-file
                  is displayed directly).</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term>Depth</term>

                <listitem>
                  <para>The current depth of the indicated track (no actual
                  calculation is performed here; the value from the data-file
                  is displayed directly).</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term>Brg Rate</term>

                <listitem>
                  <para>The instantaneous bearing rate of the secondary track
                  as observed from the secondary track. This value is
                  explained in the Glossary.</para>
                </listitem>
              </varlistentry>

              <varlistentry xml:id="time_calc">
                <term>Time</term>

                <listitem>
                  <para>Where track data is not recorded at regular steps, and
                  tracks do not have data at the same time steps, there is a
                  likelihood that the value displayed on the tote will not
                  have been recorded at the current tote time. The time field
                  shows the actual time at which the data value was recorded
                  for that track.</para>
                </listitem>
              </varlistentry>
            </variablelist><note>
              <para>When more than two tracks are loaded, the value
              <guilabel>n/a</guilabel> is shown in Tote calculations for the
              primary track which rely on other track data (range, bearing,
              rel bearing, brg rate). This is because it is unclear which
              inter-track relationship is being calculated. Where only two
              tracks are loaded (one primary and one secondary), the tote is
              able to show relative calculated data for both.</para>
            </note></para>
        </sect2>

        <sect2 xml:id="more_assigning_tracks">
          <title>Assigning tracks</title>

          <para>Assigning primary and secondary tracks is covered in the
          respective <glossterm linkend="g_cheat">Cheat Sheet</glossterm>.
          Icons are provided in the layer manager toolbar to specify if the
          selected track should be:<orderedlist>
              <listitem>
                <para>Made primary</para>
              </listitem>

              <listitem>
                <para>Made secondary</para>
              </listitem>

              <listitem>
                <para>Added to the list of secondaries</para>
              </listitem>
            </orderedlist><screenshot>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="figures/LayerManagerView.png"
                             width="279"></imagedata>
                </imageobject>
              </mediaobject>
            </screenshot></para>

          <tip>
            <para>If you have more than two tracks, it can be quicker to
            assign the primary track manually and then press <guibutton>Auto
            Populate</guibutton> to assign the remaining tracks as
            secondary.</para>
          </tip>
        </sect2>

        <sect2 xml:id="some_notes">
          <title>Notes</title>

          <para><warning>
              <para>A Circle currently only has a single "Centre" DTG value -
              so it will only be highlighted for 3 minutes either side of this
              point. Better results are obtained by using a Label (which has a
              picture of a text label on it), since Labels have start and
              finish DTGs.</para>
            </warning> <note>
              <para>It is not just tracks that can be added to the Tote,
              experiment with right-clicking on features on the plot and see
              if they have the "Set Primary Track" or "Set Secondary Track"
              commands available (although read the note below about these).
              In this way you can make a timed data point (represented by a
              Circle with a very small radius) the primary track, then add a
              number of vessel tracks as secondary tracks, and then as you
              move through the data you can constantly see the vessel range
              and bearings from this data point. This is particularly useful
              for seeing vessel ranges and bearings from a <glossterm
              linkend="g_sensor">sensor</glossterm> such as a sonar buoy.
              Remember to set the DTG data for the data point to time(s) near
              those of the track - or else in your example
              <application>Debrief</application> will assume the "sonar buoy"
              is not yet active.</para>
            </note> <note>
              <para>The limits on the time period are the outer time limits of
              the visible data in the primary and secondary tracks currently
              displayed on the Tote, so following a filter operation
              (introduced later) the start/end times will be changed to
              reflect the time limits specified.</para>
            </note> <note xml:id="time_controls">
              <para>The keyboard can also be used for moving backwards and
              forwards, although <application>Debrief</application> has to
              know that it's the Stepper that you want the keys to control.
              So, after clicking on the time-slider control you can then
              switch to keyboard control of the Tote as follows: <itemizedlist
                  spacing="compact">
                  <listitem>
                    <para>Page Up/Down keys: these control small step
                    backward/forward resp.</para>
                  </listitem>

                  <listitem>
                    <para>Page Up/Down arrows: these control large step
                    backward/forward resp.</para>
                  </listitem>

                  <listitem>
                    <para>Home/End keys: these control goto First/Last
                    resp.</para>
                  </listitem>
                </itemizedlist></para>
            </note> <tip xml:id="interp_data">
              <para>In Autumn 2005 the Interpolate Points property was added
              to tracks. When ticked, Debrief interpolates positions between
              actual data points. The highlight cursor changes appearance when
              on an interpolated data point.<figure xml:id="interpolate_demo">
                  <title>Display of an interpolated point</title>

                  <screenshot>
                    <mediaobject>
                      <imageobject>
                        <imagedata fileref="figures/interpolated_position.png"></imagedata>
                      </imageobject>
                    </mediaobject>
                  </screenshot>
                </figure></para>
            </tip></para>
        </sect2>
      </sect1>

      <sect1 xml:id="controlling_time">
        <title>Controlling time</title>

        <sect2 xml:id="time_controller">
          <title>The Time Controller</title>

          <para><indexterm><primary>Time controller</primary></indexterm>Time is managed within Debrief through the Time Controller.
          This view displays the current serial time, allows control of that
          time, and provides access to a series of time-related functions in
          <application>Debrief</application>.<figure
              xml:id="time_controller_demo">
              <title>Time Controller view</title>

              <screenshot>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="figures/TimeController.png"
                               width="234"></imagedata>
                  </imageobject>
                </mediaobject>
              </screenshot>
            </figure>Your temporal (time-related) view of track data is
          dependent on three settings:<variablelist>
              <varlistentry>
                <term>Display Mode</term>

                <listitem>
                  <para>How the track is displayed</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term>Plotting mode</term>

                <listitem>
                  <para>Whether the data dynamically adjusts to follow the
                  location/orientation of the primary track</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term>Highlight Mode</term>

                <listitem>
                  <para>How the current position is displayed</para>
                </listitem>
              </varlistentry>
            </variablelist></para>

          <para>You access these modes using the buttons on the Time
          Controller toolbar and the Time Controller drop-down menu.<figure
              xml:id="TimeControllerMenu">
              <title>Time Controller menu</title>

              <screenshot>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="figures/TimeController3.png"
                               width="100%"></imagedata>
                  </imageobject>
                </mediaobject>
              </screenshot>
            </figure>As you can see, the first three items on the menu allow
          you to select the current Display/Plotting/Highlight modes. In each
          sub-menu is a command to edit the currently mode. Later menu options
          allow you to format how information is displayed on the menu, and
          perform other time-related activities.</para>

          <sect3 xml:id="display_modes">
            <title>Display modes</title>

            <para>The first three icons on the Time Controller toolbar allow
            you to choose two combinations of plotting modes. The first two
            control how data is displayed: in Normal Mode, all exercise data
            is displayed, whereas in Snail mode, only the current position and
            a series of recent points are displayed (similar to a Snail with
            trail following behind it).</para>

            <para>As you'd imagine, Normal Mode is the mode that is used for
            most analysis tasks. It's North oriented and shows all relevant
            data. It's also quite simple, only having two properties, both of
            which control the presentation of the highlight:<variablelist>
                <varlistentry>
                  <term>Color</term>

                  <listitem>
                    <para>Yes, the Color of the highlight</para>
                  </listitem>
                </varlistentry>

                <varlistentry>
                  <term>Size</term>

                  <listitem>
                    <para>I know, I know, it's the size of the rectangle used
                    to plot the highlight (measured in pixels)</para>
                  </listitem>
                </varlistentry>
              </variablelist><figure xml:id="normal_trail_demo">
                <title>Example of a normal trail</title>

                <screenshot>
                  <mediaobject>
                    <imageobject>
                      <imagedata fileref="figures/NormalTrailImage.png"></imagedata>
                    </imageobject>
                  </mediaobject>
                </screenshot>
              </figure></para>

            <para>The Snail Trail is used for specific analysis tasks when you
            need to concentrate on the specific activities around a certain
            time, without the clutter of the remaining track data.</para>

            <para><figure xml:id="snail_trail_demo">
                <title>Example of a snail trail</title>

                <screenshot>
                  <mediaobject>
                    <imageobject>
                      <imagedata fileref="figures/SnailTrailImage.png"></imagedata>
                    </imageobject>
                  </mediaobject>
                </screenshot>
              </figure>The circle represents the current position, the stalk
            direction represents the current course, and its length gives a
            relative idea of the vessel speed (when compared to the length of
            the other vessel's stalk, <emphasis>boys will be boys</emphasis>).
            The dots trailing back from the current position are a <glossterm
            linkend="g_snail_trail">snail trail</glossterm> of points going
            back in time. If you move forward and backward with the stepper
            control you will see these trails moving. The following properties
            are editable for a snail trail:<variablelist>
                <title>Snail trail properties</title>

                <varlistentry>
                  <term>Fade Points</term>

                  <listitem>
                    <para>this will cause the points in the trail to fade away
                    to the background colour</para>
                  </listitem>
                </varlistentry>

                <varlistentry>
                  <term>Link positions</term>

                  <listitem>
                    <para>this will plot a line between the points in the
                    trail</para>
                  </listitem>
                </varlistentry>

                <varlistentry>
                  <term>Plot Track Name</term>

                  <listitem>
                    <para>this will plot the track name alongside the current
                    position</para>
                  </listitem>
                </varlistentry>

                <varlistentry>
                  <term>Point Size</term>

                  <listitem>
                    <para>this will change the size of the points together
                    with the thickness of the lines drawn on the plot,</para>
                  </listitem>
                </varlistentry>

                <varlistentry>
                  <term>Trail Length</term>

                  <listitem>
                    <para>this will change the time period covered by the
                    trail</para>
                  </listitem>
                </varlistentry>

                <varlistentry>
                  <term>Vector Stretch</term>

                  <listitem>
                    <para>this will change the
                    <emphasis>amplification</emphasis> applied to the speed
                    when drawing the speed vector; very fast vessels (or
                    weapons) will need the this stretch reduced to allow
                    stalks of sensible length.</para>
                  </listitem>
                </varlistentry>
              </variablelist></para>
          </sect3>

          <sect3 xml:id="relative_mode">
            <title>Plotting modes</title>

            <para>The plotting mode affects the origin and orientation of the
            plot. In <emphasis>Normal</emphasis> mode the plot viewport stays
            static as the time changes, but if <emphasis>Primary
            Centred</emphasis> is selected, the viewport moves to track the
            primary participant. Beyond that, the <emphasis>Primary
            Oriented</emphasis> mode orients the plot to match the heading of
            the primary track. This mode is particularly useful for presenting
            a scenario from the perspective of the primary participant, but
            the quickly changing orientation can be off-putting.</para>

            <tip>
              <para>Relative Display Mode is particularly useful for analysing
              one vessel trailing another. Make the trailing vessel the
              primary track, and the vessel being trailed the secondary track.
              As you step forward through the serial you will clearly be able
              to see the relative bearing of the contact as held by the
              trailing vessel.</para>

              <para>The sample shown below gives a demonstration of the use of
              this relative mode. You can quickly see that the blue vessel is
              directly ahead of the red trailing vessel, and your use of the
              Range Ring Highlighter gives us a quick indication of range.
              <figure xml:id="relative_display_demo">
                  <title>Sample of relative display mode</title>

                  <screenshot>
                    <mediaobject>
                      <imageobject>
                        <imagedata fileref="figures/relative_demo.gif"></imagedata>
                      </imageobject>
                    </mediaobject>
                  </screenshot>
                </figure></para>
            </tip>
          </sect3>

          <sect3 xml:id="highlight_modes">
            <title>Highlight modes</title>

            <para>Three highlight modes are provided:<variablelist>
                <varlistentry>
                  <term>Default Highlight</term>

                  <listitem>
                    <para>Shows a rectangle at the current position. From the
                    default highlight properties you are able to select the
                    colour and size of the rectangle to plot. If a track has
                    sensor data present, and the sensor has a non-zero array
                    offset, then it is possible (via the PlotArrayCentre track
                    property) to direct Debrief to plot a diagonal cross icon
                    at the array centre.</para>
                  </listitem>
                </varlistentry>

                <varlistentry>
                  <term>Symbol Highlight</term>

                  <listitem>
                    <para>Shows the symbol (<xref
                    linkend="intro_to_sym_sets" />) currently assigned in the
                    properties for each track. From the symbol highlight
                    properties you are able to select the size at which the
                    symbols should be plotted.</para>
                  </listitem>
                </varlistentry>

                <varlistentry>
                  <term>Highlight off</term>

                  <listitem>
                    <para>For when you don't want a highlight to be shown
                    (such as when taking a screenshot using
                    <application>PrintScreen</application>)</para>
                  </listitem>
                </varlistentry>

                <varlistentry>
                  <term>Range Ring Highlight</term>

                  <listitem>
                    <para>This mode shows a series of rings around the current
                    location. The editable properties are listed below.</para>
                  </listitem>
                </varlistentry>
              </variablelist></para>

            <para>For range rings you are able to edit the following
            properties:<variablelist>
                <varlistentry>
                  <term>Arcs</term>

                  <listitem>
                    <para>The angle of arc that the spokes extend out to. The
                    angle is measured either side of current heading.</para>
                  </listitem>
                </varlistentry>

                <varlistentry>
                  <term>Color</term>

                  <listitem>
                    <para>The colour to plot the range rings</para>
                  </listitem>
                </varlistentry>

                <varlistentry>
                  <term>Num Rings</term>

                  <listitem>
                    <para>How many range rings to plot, uniformly distributed
                    from the center to the outer radius</para>
                  </listitem>
                </varlistentry>

                <varlistentry>
                  <term>Radius</term>

                  <listitem>
                    <para>The radius of the outermost range ring</para>
                  </listitem>
                </varlistentry>

                <varlistentry>
                  <term>Spoke separation</term>

                  <listitem>
                    <para>The angular separation of the spokes plotted within
                    the range rings, centered on current heading.</para>
                  </listitem>
                </varlistentry>
              </variablelist></para>
          </sect3>

          <sect3 xml:id="time_display">
            <title>Time display</title>

            <para>The green digits of the time display are tied closely to the
            slider-bar immediately beneath them. Dragging the slider controls
            the current display time together with how the current data is
            displayed. Other Debrief views (such as the <link
            linkend="viewing_narratives">Narrative Viewer</link> and the <link
            linkend="show_time_vars">Time-Variable</link> graphs) update in
            response to time changes from the time slider.</para>

            <para>A range of display formats are provided to make the
            displayed time more consistent with that in a supporting document,
            or of sufficient fidelity to support the current analysis.</para>
          </sect3>

          <sect3 xml:id="time_slider">
            <title>Time slider</title>

            <para>Beneath the time-display is the time-slider, used to quickly
            move through a time-period. By default the slider is of infinite
            resolution, stopping exactly on the second/millisecond
            proportionate to the position of the slider. Debrief can be
            configured such that the slider stops on higher resolutions by
            selecting the relevant increment from the <guibutton>Time slider
            increment</guibutton> list in the Time Controller's drop-down
            menu.</para>
          </sect3>

          <sect3 xml:id="time_bookmarks">
            <title>Bookmarking</title>

            <para>Debrief NG introduces the concept of <glossterm
            linkend="g_bookmarks">Bookmarks</glossterm>. These represent the
            combination of a DTG, a remark, and the name of a plot-file, and
            are displayed in the <guibutton>Bookmarks</guibutton> view. With
            the view open you can quickly move between significant events
            across a number of files. Bookmarks are added by clicking on the
            <guiicon> <inlinemediaobject>
                <imageobject>
                  <imagedata fileref="figures/AddBookmark.png"></imagedata>
                </imageobject>
              </inlinemediaobject> </guiicon><guimenuitem>Add DTG as
            bookmark</guimenuitem> command from the <guiicon>Time
            Controller</guiicon>'s drop-down menu. The bookmarks view will not
            automatically open, but the bookmarks themselves will be present
            when it is. The current DTG is used as a default remark - but
            you'll get most mileage our of the bookmarks by describing the
            event that you're bookmarking.</para>
          </sect3>

          <sect3 xml:id="filter_to_time_period">
            <title>Manipulating according to time period</title>

            <para>The pair of sliders at the foot of the <guiicon>Time
            Controller</guiicon> view allow you to set start and finish times.
            These times are not set in support of a single Debrief operation,
            but are used across a range of operations. When dragging the
            sliders, hold down the shift-key to move in whole segments (hours,
            days, as appropriate). Drag the shaded section to retain the
            period length but change its origin (again using the shift-key if
            appropriate).</para>

            <sect4 xml:id="filter_time_period">
              <title>Filter to time period</title>

              <para>When the <guibutton><inlinemediaobject>
                  <imageobject>
                    <imagedata fileref="figures/FilterToTimePeriod.png"></imagedata>
                  </imageobject>
                </inlinemediaobject>Filter to time period</guibutton> radio
              button is depressed, changing the time of the start or end
              time-sliders will automatically filter the displayed data to the
              indicated period. In this mode, you can select a 6-hour period
              (for example), and drag it through the full serial time with
              shift-key depressed to view a moving "window" of data. In
              addition to filtering the visible data to the indicated period,
              the period covered by the time-slider is also reduced. Drag out
              the start/end time-sliders to return to the original time
              period.</para>
            </sect4>

            <sect4 xml:id="ExportToFlatFile">
              <title>Export to Flat File (SAM) format</title>

              <para>This control exports a data file of tab-separated
              variables formatted according to the Flat File format specified
              <link linkend="Section_Flat">later</link> in this document. Data
              is exported for the specified time period for the current
              primary and secondary tracks, using any sensor data that is
              visible over that period. Debrief will remember the folder and
              sensor type specified in previous export operations.</para>

              <sect5 xml:id="ExportToSamAlg">
                <title>SAM Export algorithm</title>

                <para>This algorithm works as follows:<orderedlist>
                    <listitem>
                      <para>Check data is compliant (primary &amp; secondary
                      tracks, and some sensor data present for specified
                      period</para>
                    </listitem>

                    <listitem>
                      <para>Write header information to file</para>
                    </listitem>

                    <listitem>
                      <para>Looping thorough specified period in 1 second
                      steps:<orderedlist>
                          <listitem>
                            <para>Calculate primary track location at specified
                            time (via interpolation)</para>
                          </listitem>

                          <listitem>
                            <para>Calculate sensor location at specified time
                            (via interpolation)</para>
                          </listitem>

                          <listitem>
                            <para>Calculate secondary track location at
                            specified time (via interpolation)</para>
                          </listitem>

                          <listitem>
                            <para>Output this data record calculating values
                            from above as applicable</para>
                          </listitem>
                        </orderedlist></para>
                    </listitem>
                  </orderedlist></para>
              </sect5>
            </sect4>

            <sect4 xml:id="CopyToClip">
              <title>Copy to clipboard</title>

              <para>Another operation that relies on the selected time period
              is exporting calculated data to the clipboard. This operation is
              available form the <guiicon> <inlinemediaobject>
                  <imageobject>
                    <imagedata fileref="figures/Calculator.png"></imagedata>
                  </imageobject>
                </inlinemediaobject> </guiicon><guibutton>Time
              Controller</guibutton>'s drop-down menu, and it performs a
              series of calculations for each data-point in the indicated time
              period. These calculations are then placed on the system
              clipboard in Comma-Separated-Variable format for reuse in other
              applications, <application>Microsoft Excel</application>, for
              instance.<footnote>
                  <para>A header line is written first, indicating the
                  contents of each column: <itemizedlist spacing="compact">
                      <listitem>
                        <para>Track Time(hhmmss)</para>
                      </listitem>

                      <listitem>
                        <para>Depth(metres)</para>
                      </listitem>

                      <listitem>
                        <para>Speed(Knots)</para>
                      </listitem>

                      <listitem>
                        <para>Course(degs)</para>
                      </listitem>

                      <listitem>
                        <para>Range(yards)</para>
                      </listitem>

                      <listitem>
                        <para>Bearing(degs)</para>
                      </listitem>

                      <listitem>
                        <para>Rel Bearing(degs - using <varname>Relative
                        bearing format</varname> specified in the
                        <guimenu>Window</guimenu>/<guimenu>Preferences</guimenu>dialog)</para>
                      </listitem>

                      <listitem>
                        <para>Brg Rate(deg/min)</para>
                      </listitem>

                      <listitem>
                        <para>Color (for this track point)</para>
                      </listitem>

                      <listitem>
                        <para>Name</para>
                      </listitem>

                      <listitem>
                        <para>PrimaryName</para>
                      </listitem>
                    </itemizedlist></para>

                  <para>The results from the primary track are listed first,
                  which (as in the <glossterm
                  linkend="g_tote">Tote</glossterm>) do not show results of
                  calculated operations: <screen>CARPET 12/Dec/95 05:00:00 000 02.00 269.7 n/a n/a n/a n/a 0500 0500</screen></para>

                  <para>Then the secondary tracks are listed: <screen>
 BUNKUM 12/Dec/95 05:50:00 000 00.00 000.0 12381 311.0 R49.0 R0.264 F5 0550</screen></para>
                </footnote><tip>
                  <para>The Colour parameter shows the colour of the track
                  point used in that calculation. On occasion analysts colour
                  a track according to whether that participant is in contact
                  or not. Exporting the colour flag to Excel allows the
                  post-analysis data to be filtered according to periods in
                  contact - or any other time-dependent aspect specified by
                  the analyst. The application of a particular colour to
                  sections of track is performed within the Layer
                  Manager.</para>
                </tip><note>
                  <para>The last two columns output give identifier
                  information: the first of these is the name of the current
                  item in this <glossterm linkend="g_track">track</glossterm>,
                  and the second is the point in the primary <glossterm
                  linkend="g_track">track</glossterm> nearest to the current
                  time stamp: that-is the point in the primary track which has
                  been used for the calculated results.</para>
                </note></para>
            </sect4>
          </sect3>

          <sect3 xml:id="vcr_controls">
            <title xml:id="time_vcr_controls">VCR controls</title>

            <para>The VCR controls allow you to move forwards and backwards in
            time through the plot. Looking at the order of buttons in the Time
            Controller screenshot above, the commands allow you to move to the
            beginning, move a large step backwards, move a small step
            backwards and repeat the last time step continuously (small or
            large step, backwards or forwards). The remaining buttons repeat
            these operations in the "forward" direction. The size of small and
            large steps is controlled by the Time Controller properties
            window, accessed by selecting
            <guimenu>Properties</guimenu>/<guimenuitem>Time
            Controller</guimenuitem>. Also available from this set of
            properties is the <guibutton>Step Interval</guibutton>; the time
            interval that Debrief waits before automatically moving
            forwards.</para>
          </sect3>

          <sect3 xml:id="other_ops">
            <title>Other time operations</title>

            <para>Beyond the operations available from the Time Controller,
            the time-period is used to support other Debrief operations. The
            most significant of these operations is when producing time
            variable plots (see <xref linkend="show_time_vars" />). The
            current time period settings dictate the extent of what
            information is calculated for these plots.</para>
          </sect3>
        </sect2>
      </sect1>

      <sect1 xml:id="measure_range">
        <title>Measuring range and bearing</title>

        <sect2 xml:id="more_range">
          <title>Range and Bearing</title>

          <para>It's worth reminding you at this point about the Range Bearing
          measuring tool <guiicon> <inlinemediaobject>
              <imageobject>
                <imagedata fileref="figures/RngBrg.png"></imagedata>
              </imageobject>
            </inlinemediaobject></guiicon> which is frequently useful in
          analysis. The calculated range and bearing is displayed at the
          mid-point of the line and at the foot of the DebriefNG screen (where
          it remains until you make another measurement).</para>

          <para>The default units for the range displayed are configured using
          the <guimenu>CMAP</guimenu> section of the
          <guimenuitem>Preferences</guimenuitem> dialog in the
          <guimenu>Window</guimenu> menu. The preferences page can also be
          accessed by double-clicking on the range/bearing slave display at
          the foot of the screen.</para>
        </sect2>

        <sect2 xml:id="earth_model">
          <title>Earth Model</title>

          <para>The Range Bearing calculation is performed using the
          <indexterm>
              <primary>Algorithms</primary>

              <secondary>Earth Model</secondary>
            </indexterm><indexterm>
              <primary>Earth Model</primary>
            </indexterm>algorithms in the current Earth Model, as described
          later in <xref linkend="rng_brg_calcs" />.</para>

          <para>The Earth Model used by the application is modular and
          interchangeable. In the initial release of the application the
          calculations use the Rhumb-Line Formulae for Short-distance sailing,
          as described in <quote>Admiralty Manual of Navigation, Volume 2,
          1973</quote>. Short-distance sailing is defined as <quote>the
          following of a rhumb-line track for a distance not greater than 600'
          </quote>.</para>
        </sect2>
      </sect1>

      <sect1 xml:id="view_3d">
        <title>Viewing tracks in 3-dimensions</title>

        <sect2 xml:id="more_3d">
          <title>3D View</title>

          <para>Lastly for the "viewing of plots",
          <application>Debrief</application> provides <indexterm>
              <primary>3D View</primary>

              <secondary>Introduction</secondary>
            </indexterm>support for viewing track files in 3D. To obtain a 3-d
          view, the tracks currently loaded must contain Depth information,
          and the correct libraries (Java3D) must be installed on the
          machine.</para>

          <note>
            <para><application>Debrief</application> contains a set of 3-d
            models for vessels most frequently analysed at the <glossterm
            linkend="g_MWC">MWC</glossterm>. If you require a model not
            currently available, contact the <link
            linkend="project_manager">Debrief Project Manager</link>, and it
            will be added to the queue. If you already hold a copy of the
            model (as a <filename>.wrl</filename> file in
            <acronym>VRML</acronym> format), e-mail it in, which will speed up
            its inclusion. If you select a symbol-type for which there isn't
            currently a model, <application>Debrief</application> uses a
            correctly-oriented cone shape to represent the current location
            and course.</para>
          </note>

          <para>Unfortunately there is not any 3-d data in the sample plots
          we've been using so far, but another sample file does. Close the
          current session, open a new, blank, one, and load the data-file
          named <filename>sen_tracks.xml</filename>. This is a datafile
          produced using <glossterm linkend="g_asset">ASSET</glossterm>, a
          simulator under development at PlanetMayo.</para>

          <para>Once the tracks are loaded, you will see the view as below:
          <figure xml:id="tracks_loaded_demo">
              <title>View with tracks loaded</title>

              <screenshot>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="figures/3d_tracks.png" width="100%"></imagedata>
                  </imageobject>
                </mediaobject>
              </screenshot>
            </figure></para>

          <para>If you don't have primary and secondary tracks on the tote,
          initialise them now (or do it automatically, if you know how).
          <application>Debrief</application> now knows the time period covered
          by the tracks. The updated 3D viewer in Debrief now shows
          3-dimensional models of the exercise participants. The model used is
          taken from the <guilabel>SymbolType</guilabel> property of each
          track (although the default type is <guilabel>Submarine</guilabel>).
          So before opening the 3-d view, change the
          <guilabel>SymbolType</guilabel> of the <emphasis>Frigate</emphasis>
          track to <guilabel>Frigate. </guilabel>To do this, right-click on
          the track and select <guilabel>Frigate</guilabel> from the
          <guilabel>SymbolType</guilabel> drop-down list. Next press the "View
          in 3D" button <guiicon> <inlinemediaobject>
              <imageobject>
                <imagedata fileref="figures/view3d.gif"></imagedata>
              </imageobject>
            </inlinemediaobject></guiicon> to open the 3-d view window.</para>
        </sect2>

        <sect2 xml:id="more_initial_view">
          <title>Initial view</title>

          <para>A new window will open, containing a 3D view of the current
          track data, as shown below (after a little screen-tidying): <figure
              xml:id="voew_3d_demo">
              <title>Initial 3D view</title>

              <screenshot>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="figures/3d_tracks_with_3d.png"
                               width="100%"></imagedata>
                  </imageobject>
                </mediaobject>
              </screenshot>
            </figure></para>

          <tip>
            <para>Not all objects viewable on the normal 2-d Debrief plot are
            applicable in 3-dimensions, but most are. If one is absent which
            you think would usefully be shown in 3-d then please approach the
            <link linkend="project_manager">Debrief Project Manager</link>.
            Additionally it is not always clear whether a 2-d item (such as a
            labelled annotation) should be visible in 3-d. Such an instance is
            a labelled annotation added to the 2-d plot to help the
            readability of a plot in a report (for example a label placed on a
            sea-mount). This labelled annotation may just clutter the 3-d
            plot, so Debrief only shows labelled annotations when their symbol
            is visible; change the symbol of a labelled annotation to not
            visible, and it will disappear from the 3-d plot.</para>
          </tip>
        </sect2>

        <sect2 xml:id="more_on_view">
          <title>Controlling the view</title>

          <para>The view is controlled with the <indexterm>
              <primary>3D View</primary>

              <secondary>Default Views</secondary>
            </indexterm> mouse using the following buttons: <table
              xml:id="mouse_controls">
              <title>Mouse controls used in 3-D view</title>

              <tgroup cols="2">
                <thead>
                  <row>
                    <entry>Button</entry>

                    <entry>Operation</entry>
                  </row>
                </thead>

                <tbody>
                  <row>
                    <entry><mousebutton>Left</mousebutton></entry>

                    <entry>Rotate plot, effectively changing the current
                    heading</entry>
                  </row>

                  <row>
                    <entry><mousebutton>Middle</mousebutton> (or <keycombo>
                        <keysym>Alt-</keysym>

                        <keysym>Left</keysym>
                      </keycombo>)</entry>

                    <entry>Zoom in and out of the view</entry>
                  </row>

                  <row>
                    <entry><mousebutton>Right</mousebutton></entry>

                    <entry>Pan the plot around the view</entry>
                  </row>
                </tbody>
              </tgroup>
            </table></para>

          <para>In addition to mouse-movement, controls have been added to the
          view to adjust the current view depth, heading, pan and zoom.
          Experiment with moving around the plot using these controls as well
          as the mouse.</para>

          <para>The drop-down list provided in the centre of the window
          provides a list of preset viewpoints. The <guilabel>Surface
          Look</guilabel> and <guilabel>Underwater Look</guilabel> viewpoints
          zoom out to the south of the centre of the plot, positioning the
          viewer either slightly above, or slightly below the water surface.
          The <guilabel>Top-Down</guilabel> viewpoint provides a god's-eye
          view of the data. Lastly are a series of viewpoints which each
          provide a "chase-plane" view of a particular participant. Thus it is
          possible to position yourself immediately above and behind a
          participant as it moves forward through an exercise serial.</para>

          <para>Now, to return to the original view, select <guilabel>Surface
          Look</guilabel> from the drop-down list. Next rotate the heading to
          270 degrees, take the depth down to -010, and zoom in to view the
          exercise from the stern of the submarine. <figure
              xml:id="adjusted_3d_demo">
              <title>Adjusted 3-d view</title>

              <screenshot>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="figures/3d_view2.png" width="100%"></imagedata>
                  </imageobject>
                </mediaobject>
              </screenshot>
            </figure></para>

          <para>A set of properties are also provided from the 3d view toolbar
          to <indexterm>
              <primary>3D View</primary>

              <secondary>Editable properties</secondary>
            </indexterm>support the 3-d editing. The following properties are
          provided:</para>

          <para><informaltable>
              <tgroup cols="2">
                <colspec colname="col1" colnum="1" colwidth="*" />

                <colspec colname="col2" colnum="2" colwidth="*" />

                <thead>
                  <row>
                    <entry colname="col1">Parameter</entry>

                    <entry colname="col2">Description</entry>
                  </row>
                </thead>

                <tbody>
                  <row>
                    <entry colname="col1">Model Stretch</entry>

                    <entry colname="col2">A scaling factor applied to the
                    models, typically used for presenting broad overviews of a
                    serial</entry>
                  </row>

                  <row>
                    <entry colname="col1">Grid Delta</entry>

                    <entry colname="col2">The spacing to use for the grid
                    plotted on the surface</entry>
                  </row>

                  <row>
                    <entry colname="col1">Show Coastline</entry>

                    <entry colname="col2">Whether to plot a coastline on the
                    sea surface (not yet implemented)</entry>
                  </row>

                  <row>
                    <entry colname="col1">Show Bathy Lines</entry>

                    <entry colname="col2">Whether to show a wireframe grid
                    representing the surface of the ocean/land</entry>
                  </row>

                  <row>
                    <entry colname="col1">Show Bathy Surface</entry>

                    <entry colname="col2">Whether to show a shaded surface
                    representation of the ocean bottom/land surface. Points
                    above water are shaded green.</entry>
                  </row>

                  <row>
                    <entry colname="col1">Show Drop Bars</entry>

                    <entry colname="col2">Whether to show drop bars which
                    stretch from a current vessel position vertically up or
                    down to the sea surface, to assist in the spatial
                    separation of vessels.</entry>
                  </row>

                  <row>
                    <entry colname="col1">Show Foggy Ocean</entry>

                    <entry colname="col2">Whether to shade the ocean
                    surface</entry>
                  </row>

                  <row>
                    <entry colname="col1">Show Sea Surface</entry>

                    <entry colname="col2">Whether to plot a grid on the sea
                    surface</entry>
                  </row>

                  <row>
                    <entry colname="col1">Show Snail Trail</entry>

                    <entry colname="col2">Whether to plot a snail-trail behind
                    each vessel</entry>
                  </row>

                  <row>
                    <entry colname="col1">Show Vessel Status</entry>

                    <entry colname="col2">Whether to show a textual status
                    string for each vessel</entry>
                  </row>

                  <row>
                    <entry colname="col1">Snail Trail Length</entry>

                    <entry colname="col2">The length (in time) of snail trail
                    to plot for each vessel.</entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable></para>
        </sect2>

        <sect2 xml:id="stepping_through_serial">
          <title>Step through the serial</title>

          <para>Now re-arrange the 3-d plot and the
          <application>Debrief</application> plot so you have a clear view of
          both, and move the time-stepper forward a single step. You will see
          each 3-d vessel representation move. As you move through the track
          using the button on the Time Stepper, note the highlights on the 3-D
          track moving. Now push the "Step Automatically" button, to make the
          plot step forward on its own, leaving us to play.</para>

          <para>Whilst the plot is stepping forward, switch your attention
          back to the 3-d view. Experiment with using the 3 mouse buttons (or
          two plus the alt-key) and zoom in on the current point on the
          red-track. Learning to coordinate these three operations may seem
          difficult, but you'll soon pick it up.</para>

          <para>The data-file we're using isn't all that interesting in this
          view, since neither participant reacts in response to a depth-change
          from the other. But, 3-d views of real exercise results can be
          particularly insightful, clearly illustrating a weapon losing
          contact of its target due to changing depth layer, or one target
          gaining detections of another as it moves into the same
          layer.</para>
        </sect2>

        <sect2 xml:id="multi_monitor">
          <title>Multi-monitor setups</title>

          <para>The current Direct3D libraries from Microsoft only allow
          Debrief to show 3d plots on the primary monitor. If you only have
          one monitor, there isn't a problem. But, if you have a multiple
          monitor setup, the 3d plot will only appear if you have Debrief
          running on the primary monitor (that's the monitor that contains the
          windows task bar).</para>
        </sect2>

        <sect2 xml:id="mem_leaks">
          <title>Memory leaks</title>

          <para>The current version of the 3D libraries used in this viewer
          contains memory leaks. In general memory leaks are tidied up in each
          revision of Java-3d, so it is in your interest to try to keep up to
          date with the newest releases. <footnote>
              <para>Memory leaks occur when an application allocates memory to
              store data but fails to return the memory after the operation is
              complete. This results in the application's memory allocation
              growing. This may be overcome by exiting and re-starting
              Debrief, during which all allocated memory is cleared, sometimes
              resulting in large memory usage by
              <application>Debrief</application> after viewing several plots.
              This may be overcome by closing and restarting
              <application>Debrief</application> if a noticeable slow-down is
              observed. New libraries will be adopted as soon as a fix is
              available</para>
            </footnote></para>
        </sect2>

        <sect2 xml:id="plot_mgt">
          <title>Plot management</title>

          <para>The objects in the 3-d plot reflect the structure in the Layer
          Manager. So, to hide/reveal a set of objects in 3-d just switch
          their layer off in the Layer Manager. <tip>
              <para>The objects in the 3-d view are a "cloned" set of the
              objects contained in the Layer Manager at the point at which
              <guilabel>Show 3d View</guilabel> was selected. Thus is it
              likely that moving objects between layers once the 3-d plot is
              open may not be reflected in the 3-d view. If extensive
              restructuring has been conducted in the Layer Manager and you
              wish the 3-d view to reflect this, close and re-open the
              view.</para>
            </tip><note>
              <para>The 3-d view now includes bathymetric data <indexterm>
                  <primary>3D View</primary>

                  <secondary>Bathymetric Data</secondary>
                </indexterm>, though this is only shown if the bathy data is
              already shown in the 2-d plot. Obviously the 3-d view runs more
              smoothly with less data, so hide the 2-d bathymetry to remove it
              from the 3-d view.</para>
            </note><tip>
              <para>The 3-d view contains text labels that automatically
              orientate themselves towards the viewer. This orientation is
              computationally expensive (it is not a collection of 3-d objects
              being mathematically re-oriented, but a 2-d image being rescaled
              in 3-dimensions). The plot will be significantly slowed down if
              many text labels are set to visible. A good way of overcoming
              this problem is to set the parent layer to not-visible, then
              work through the items on that layer switching the label to not
              visible. Finally switch the layer back to visible. This method
              works quickly because time is not spent</para>
            </tip></para>
        </sect2>
      </sect1>

      <sect1 xml:id="show_time_vars">
        <title>Show time-related variables</title>

        <para><indexterm><primary>Time variable plots</primary></indexterm>Time-variable plots can be opened via the Layer Manager. When
        one or more items that are candidate subjects <footnote>
            <para>Items are suitable for inclusion in a time-variable plot
            when they have both temporal and spatial attributes, so this
            includes tracks, individual locations and annotations, but does
            not include grids, scales, or background datasets.</para>
          </footnote> for a time-variable plot are selected in the Layer
        Manager, it adds the <guibutton>Show XY Plot</guibutton> operation
        <indexterm>
            <primary>Toolbox</primary>

            <secondary>Show time variables</secondary>
          </indexterm>to its right-click menu. After requesting the plot, the
        user is invited to indicate which calculation is to be plotted, and
        which track is to be used as the primary <glossterm
        linkend="g_track">track</glossterm> (where relevant).The example below
        shows the results of a <guilabel>Range</guilabel> calculation between
        two tracks. Note that dragging the mouse downwards in a rectangle
        inside the plot zooms in on the data, dragging the mouse upwards into
        a rectangle zooms out on the data, and that the <guibutton>Fit to
        Window</guibutton> button zooms out to show all of the current data.
        Where data is not present, a gap is inserted into the data-line.
        <figure xml:id="time_var_plot_demo">
            <title>View of time-variable plot</title>

            <screenshot>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="figures/time_variable_plot.png"
                             scalefit="1" width="100%"></imagedata>
                </imageobject>
              </mediaobject>
            </screenshot>
          </figure></para>

        <para><figure xml:id="time_var_plot_vert">
            <title>View of time-variable plot in waterfall mode</title>

            <screenshot>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="figures/time_variable_plot_switch.png"
                             width="180"></imagedata>
                </imageobject>
              </mediaobject>
            </screenshot>
          </figure></para>

        <note>
          <para><application>Debrief</application> performs special processing
          depending on whether the selected items contain valid time data or
          not. In general, when an annotation (such as a label) does not
          contain DTG data Debrief assumes that it is valid throughout the
          selected time period. <application>Debrief</application> produces
          the time-variable plot according to the following tables: <table
              frame="sides" xml:id="relative_calculations">
              <title>Relative calculations (range, bearing, etc)</title>

              <tgroup cols="3">
                <thead>
                  <row>
                    <entry></entry>

                    <entry>Primary contains DTG</entry>

                    <entry>Primary does not contain DTG</entry>
                  </row>
                </thead>

                <tbody>
                  <row>
                    <entry>Secondary contains DTG</entry>

                    <entry>For each point on secondary, find nearest primary
                    point (in time), use these for calculation</entry>

                    <entry>For each point on secondary, use single primary
                    point for calculation</entry>
                  </row>

                  <row>
                    <entry>Secondary does not contain DTG</entry>

                    <entry>For each point in primary, use single secondary
                    point for calculation.</entry>

                    <entry>Produce single calculations at start &amp; end of
                    time period</entry>
                  </row>
                </tbody>
              </tgroup>
            </table><table xml:id="absolute_calcs">
              <title>Absolute calculations (range, bearing, etc)</title>

              <tgroup cols="2">
                <thead>
                  <row>
                    <entry></entry>

                    <entry>Calculation</entry>
                  </row>
                </thead>

                <tbody>
                  <row>
                    <entry>Data series contains DTG</entry>

                    <entry>For each point on series, calculate result</entry>
                  </row>

                  <row>
                    <entry>Data series does not contain DTG</entry>

                    <entry>Produce single calculations at start &amp; end of
                    time period</entry>
                  </row>
                </tbody>
              </tgroup>
            </table></para>
        </note>

        <para>The <guibutton>Export to WMF</guibutton> <guiicon>
        <inlinemediaobject>
            <imageobject>
              <imagedata fileref="figures/ExportToWMF.png"></imagedata>
            </imageobject>
          </inlinemediaobject> </guiicon> button writes the current graph to a
        Windows Metafile in the current WMF_Directory, and the
        <guibutton>Export to Clipboard </guibutton> (<guiicon>
        <inlinemediaobject>
            <imageobject>
              <imagedata fileref="figures/ExportToClipboard.png"></imagedata>
            </imageobject>
          </inlinemediaobject> </guiicon> places a copy of the plot on the
        Windows clipboard for onward insertion into MS Word</para>

        <para>The <guibutton>Switch Axes</guibutton> <guiicon>
        <inlinemediaobject>
            <imageobject>
              <imagedata fileref="figures/switchAxes.png" width="16px"></imagedata>
            </imageobject>
          </inlinemediaobject> </guiicon> button changes the orientation of
        the plot from its default format to a waterfall-style display with
        time plotted down the left-hand side.</para>

        <para>The <guibutton>Grow Times</guibutton> <guiicon>
        <inlinemediaobject>
            <imageobject>
              <imagedata fileref="figures/expandTime.png"></imagedata>
            </imageobject>
          </inlinemediaobject> </guiicon> button changes the time axis to make
        the top of the waterfall display the current Time Controller time,
        with the data displayed changing dynamically with time slider..</para>

        <para>The <guibutton>Configure Plot</guibutton>(<guiicon>
        <inlinemediaobject>
            <imageobject>
              <imagedata fileref="figures/ConfigurePlot.png"></imagedata>
            </imageobject>
          </inlinemediaobject> </guiicon>) button opens a <link
        linkend="g_property_window">property window</link> allowing you to
        control the presentation of the time-variable graph using the
        following properties:</para>

        <para><informaltable>
            <tgroup cols="2">
              <colspec colname="col1" colnum="1" colwidth="*" />

              <colspec colname="col2" colnum="2" colwidth="*" />

              <thead>
                <row>
                  <entry colname="col1">Parameter</entry>

                  <entry colname="col2">Description</entry>
                </row>
              </thead>

              <tbody>
                <row>
                  <entry colname="col1">DataLineWidth</entry>

                  <entry colname="col2">The width to plot the data-lines on
                  the graph</entry>
                </row>

                <row>
                  <entry colname="col1">DateTickUnits</entry>

                  <entry colname="col2">The interval (and format) to use on
                  the date axis</entry>
                </row>

                <row>
                  <entry colname="col1">RelativeTimes</entry>

                  <entry colname="col2">Whether to plot absolute or relative
                  times (used when analysing time-zero data). See <xref
                  linkend="show_time_vars_title" /> .</entry>
                </row>

                <row>
                  <entry colname="col1">ShowSymbols</entry>

                  <entry colname="col2">Whether to show datum symbols (useful
                  to indicate different data recording rates)</entry>
                </row>

                <row>
                  <entry colname="col1">Title</entry>

                  <entry colname="col2">The Title of the graph</entry>
                </row>

                <row>
                  <entry colname="col1">X_AxisTitle</entry>

                  <entry colname="col2">The x-axis label on the graph</entry>
                </row>

                <row>
                  <entry colname="col1">Y_AxisTitle</entry>

                  <entry colname="col2">The y-axis label on the graph</entry>
                </row>

                <row>
                  <entry colname="col1"><emphasis>xxx</emphasis> Font</entry>

                  <entry colname="col2">The font to use for the respective
                  label</entry>
                </row>

                <row>
                  <entry colname="col1">DisplayFixedDuration</entry>

                  <entry colname="col2">When data is being displayed in
                  <emphasis>Grow Times</emphasis>mode, this checkbox specifies
                  whether time-axis should grow to continuously show all data,
                  or whether it should just show data for a fixed time
                  period.</entry>
                </row>

                <row>
                  <entry colname="col1">FixedDuration</entry>

                  <entry colname="col2">The period of time (duration) that the
                  time-axis should display when in <emphasis>Grow
                  Times</emphasis> mode with
                  <emphasis>DisplayFixedDuration</emphasis> set to
                  True.</entry>
                </row>
              </tbody>
            </tgroup>
          </informaltable></para>

        <sect2 xml:id="time_var_plot_bar">
          <title>Time-Variable Plot Tracker-Bar</title>

          <para>If there are tracks on the Debrief <glossterm
          linkend="g_tote">Tote</glossterm>, a vertical bar is drawn through
          the plot at the correct time. If the current time on the Tote occurs
          before the earliest time on the Time-Variable plot then the bar is
          drawn at the minimum value, and drawn over the maximum value if the
          current time on the Tote occurs after the latest time value. The bar
          redraws itself automatically as the time in the Tote changes.</para>
        </sect2>

        <sect2 xml:id="show_time_vars_tZero">
          <title xml:id="show_time_vars_title">Analysing time-zero data in
          time-variable plot</title>

          <para>By default the <indexterm>
              <primary>Time Zero</primary>

              <secondary>in time-variable plots</secondary>
            </indexterm>time-variable plot shows absolute times (e.g.
          <computeroutput>12:34.00</computeroutput>). Some forms of analysis
          conducted with Debrief rely on the use of relative times, such as a
          weapon firing where T-Zero is the time of fire, as described in
          <xref linkend="z_zero_times" />. To show these relative times on the
          lower axis of the time-variable plot, select
          <guilabel>RelativeTimes</guilabel> from the time-variable plot
          property window. Once this mode is selected, times will be shown
          relative to the last time-zero value set. By default, the times are
          shown in a normal <computeroutput>HH:mm:ss</computeroutput> format,
          but the <guilabel>DateTickUnits</guilabel> drop-down list contains a
          number of display formats which specifically support presentation of
          elapsed times.</para>
        </sect2>
      </sect1>

      <!--  Track/time toolbox                                           -->

      <sect1 xml:id="track_toolbox">
        <title xml:id="track_toolbox_title">Track and Time toolbox</title>

        <sect2 xml:id="z_zero_times">
          <title>T-Zero times</title>

          <para><emphasis>T-Zero times are still to be implemented, but the
          mode of operation will be very similar to that shown below, June
          2006.</emphasis></para>

          <para>The <guibutton>Set time zero</guibutton> command <indexterm>
              <primary>Toolbox</primary>

              <secondary>Set Time Zero</secondary>
            </indexterm><indexterm>
              <primary>Time Zero</primary>

              <secondary>Set time zero on Toolbox</secondary>
            </indexterm>reformats the labels on the plot to follow the
          standard presentation for weapon-analysis plots; where absolute
          times are replaced by times relative to a specific event (
          <glossterm linkend="g_tzero">T-Zero</glossterm>)- such as Weapon
          Splash.</para>

          <para>When the <guibutton>Set time zero</guibutton> command is
          started, the following sequence of events occur: <orderedlist
              continuation="restarts" inheritnum="ignore">
              <listitem>
                <para>You are invited to enter the frequency in seconds at
                which symbols are drawn on the indicated tracks.</para>
              </listitem>

              <listitem>
                <para>You are invited to enter the frequency in seconds at
                which location labels are displayed for the indicated tracks.
                In the labels at this indicated frequency the text is set to
                the elapsed time in seconds since the time-zero time.</para>
              </listitem>
            </orderedlist></para>

          <para>These steps are applied to all of the track points between the
          Start time (which is used as T-Zero) and the Finish time.</para>

          <note>
            <para>Note also that when the date format in the <guilabel>Time
            Stepper</guilabel> is set to <emphasis>T+ SSS</emphasis> the
            current time of the time stepper is no longer displayed as
            absolute time, but as elapsed seconds since the time currently
            displayed in the Start Time on this panel, or elapsed minutes and
            seconds ( <emphasis>T+ MM:SS</emphasis>).</para>
          </note>

          <note>
            <para>Following analysis using t-zero data labels, it is possible
            to return a set of track labels to their default (as automatically
            assigned when imported from REP). Reset the track labels by
            selecting <guilabel>Reset DTG Labels</guilabel> from the edit
            track popup menu or property window.</para>
          </note>
        </sect2>
      </sect1>
    </chapter>

    <chapter xml:id="exporting_data">
      <title>Exporting Data</title>

      <sect1 xml:id="more_Exporting_data">
        <title>Exporting images</title>

        <sect2 xml:id="more_export_images">
          <title>Export images</title>

          <para>In addition to <indexterm>
              <primary>WMF</primary>

              <secondary>Writing to File</secondary>
            </indexterm>conducting tactical analysis,
          <application>Debrief</application> allows the analyst user to create
          plots for insertion into <application>Microsoft
          Windows</application> applications; particularly
          <application>Word</application>.</para>

          <para>To do this load the data into
          <application>Debrief</application> and format the plot, adding
          scales, grids, coastlines, and annotations as desired.</para>

          <para>To export this image as a Windows Metafile (WMF), select the
          <guibutton>Export WMF</guibutton> (<guiicon> <inlinemediaobject>
              <imageobject>
                <imagedata fileref="figures/ExportToWMF.png"></imagedata>
              </imageobject>
            </inlinemediaobject> </guiicon>) operation from the
          <guimenu>File</guimenu> menu. Alternatively to copy the image to the
          clipboard (still as a WMF) select <guibutton>Copy</guibutton> from
          the Edit menu whilst the Debrief plot is active.</para>

          <para>This will place the image in a time-stamped file named
          <filename>d3_minute_second.WMF</filename>, located in the directory
          indicated in the <application>Debrief</application> properties file.
          If the location is not specified in the properties file, the
          <filename>WMF</filename> image will be created in the
          <application>Debrief</application> installation directory.</para>

          <para>Also, don't forget that time-variable graphs produced by the
          <link linkend="track_toolbox">Track-Time toolbox</link> can be
          exported to WMF as well, as described in Section <xref
          linkend="show_time_vars" />, titled <xref
          endterm="show_time_vars_title" linkend="show_time_vars" /> .</para>
        </sect2>
      </sect1>

      <sect1 xml:id="vrml">
        <title>Virtual reality files</title>

        <sect2 xml:id="more_vrml">
          <title>History</title>

          <important>
            <para>Now that <application>Debrief</application> includes its own
            3-D viewer, the export to 3-D functionality has been removed.
            Should you have any significant desire for this functionality to
            be replaced, please contact the administrator.</para>
          </important>
        </sect2>
      </sect1>
    </chapter>

    <chapter xml:id="handling_buoyfields">
      <title>Handling Buoyfields</title>

      <sect1 xml:id="more_handling_fields">
        <title>Introduction to buoyfields</title>

        <note>
          <para>In the first release of Debrief NG, Buoyfields have not been
          implemented. It remains an intention to provide this
          facility.</para>
        </note>

        <sect2 xml:id="more_show_buoyfields">
          <title>Buoyfields</title>

          <para><application>Debrief</application> provides functionality
          <indexterm significance="preferred">
              <primary>Buoy Fields</primary>

              <secondary>Introduction</secondary>
            </indexterm>to ease the creation of Sonar Buoyfields, that is a
          pattern of sonar buoys which are laid out in a particular pattern.
          In addition to the geospatial characteristics of the pattern to be
          created (such as radius, or row spacing)
          <application>Debrief</application> also accepts temporal (such as
          time of the first buoy and buoyfield lifetime) and default
          formatting characteristics (such as colour and symbol to use). After
          field creation, the properties used for building the field are
          largely unavailable, but the buoys can be repositioned or
          time-stamped directly.</para>

          <para>Although it may not be clearly visible in the following
          diagrams, all of the buoyfields are located with reference to a
          kingpin. This kingpin is located relative to a Jig Point (allowing
          for small, quick adjustments in the location of the field prior to
          dropping), as specified by a range and bearing.</para>

          <sect3 xml:id="barrier_field_demo">
            <title>Barrier</title>

            <para>A Barrier is a straight line of buoys <figure
                xml:id="boy_pattern_Demo">
                <title>Example of a barrier buoy-pattern</title>

                <mediaobject>
                  <imageobject>
                    <imagedata fileref="figures/field_barrier.gif"></imagedata>
                  </imageobject>
                </mediaobject>
              </figure></para>
          </sect3>

          <sect3 xml:id="wedge_field">
            <title>Wedge</title>

            <para>A Wedge is a bent-line barrier of buoys, specified by buoy
            spacing and two true bearings. The first bearing is from the
            kingpin to the centre of the wedge and the second bearing is from
            the centre point to the last buoy. In
            <application>Debrief</application>, theta-one is termed the Right
            Hand Orientation (Orientation1) and theta-two is termed the Left
            Hand Orientation (Orientation2).
            <application>Debrief</application> allows even or odd numbers of
            buoys, and will ensure that the sides of the wedge remain
            symmetric. <figure xml:id="wedge_demo">
                <title>Example of a Wedge buoy-pattern</title>

                <mediaobject>
                  <imageobject>
                    <imagedata fileref="figures/field_wedge.gif"></imagedata>
                  </imageobject>
                </mediaobject>
              </figure></para>
          </sect3>

          <sect3 xml:id="general_field">
            <title>Field</title>

            <para>A Field is a fixed pattern which contains more than two rows
            of buoys. The pattern is specified by buoy and row spacing, a true
            bearing, and an indication of whether the successive rows fall to
            the left, right, or centre of the kingpin. Note that whilst the
            diagram shows and the Naval specification order includes the Field
            Direction parameter, this is not required for buoyfield
            construction and is not taken from the user. Although the Field
            Direction is contained in the buoyfield creation order, it is
            included as an indication of expected target direction of travel,
            and has no graphic meaning. <figure xml:id="field_demo">
                <title>Example of a Field buoy-pattern</title>

                <mediaobject>
                  <imageobject>
                    <imagedata fileref="figures/field_field.gif"></imagedata>
                  </imageobject>
                </mediaobject>
              </figure></para>

            <para>The Left, Right, or Centre offset value is interpreted in
            the following way: <simplelist type="vert">
                <member><emphasis>Left</emphasis>: is interpreted as the
                "alternate" rows starting offset a ½ buoy width further in the
                field orientation</member>

                <member><emphasis>Right</emphasis>: is interpreted as the
                "alternate" rows being offset a ½ buoy width backwards along
                the field orientation</member>

                <member><emphasis>Centre</emphasis>: in interpreted as there
                being no offset in successive rows.</member>
              </simplelist></para>
          </sect3>

          <sect3 xml:id="circle_field">
            <title>Circle</title>

            <para>The Circle pattern describes a pattern of buoys arranged in
            a circle, specified by kingpin, radius, and number of buoys. An
            orientation parameter is also used, which indicates the bearing of
            the first buoy from the kingpin (centre), since it may not
            necessarily be to the North. A flag indicates if the circle is
            being laid clockwise or not. <figure xml:id="circle_demo">
                <title>Example of a Circle buoy-pattern</title>

                <mediaobject>
                  <imageobject>
                    <imagedata fileref="figures/field_circle.gif"></imagedata>
                  </imageobject>
                </mediaobject>
              </figure></para>
          </sect3>

          <sect3 xml:id="arc_field">
            <title>Arc</title>

            <para>The Arc pattern describes a pattern of buoys arranged in a
            segment of a circle. In addition to the kingpin and radius, an
            orientation parameter indicates the direction of the mid-point of
            the arc from the kingpin, and an arc value indicates the arc of
            coverage each side of the orientation. A flag indicates if the
            circle is being laid clockwise or not. <figure xml:id="arc_demo">
                <title>Example of an Arc buoy-pattern</title>

                <mediaobject>
                  <imageobject>
                    <imagedata fileref="figures/field_arc.gif"></imagedata>
                  </imageobject>
                </mediaobject>
              </figure></para>
          </sect3>
        </sect2>
      </sect1>

      <sect1 xml:id="create_buoys">
        <title>Creating buoyfields</title>

        <para><emphasis>Note, at the time of writing (June 2006) Debrief NG
        does not contain the Buoyfields wizard. Debrief 2003 may be used to
        create a plot-file containing buoyfields, which can then be re-opened
        in Debrief NG.</emphasis></para>

        <sect2 xml:id="buoy_toolbar">
          <title>Toolbar</title>

          <para>A single toolbar <indexterm>
              <primary>Buoy Fields</primary>

              <secondary>Creating Buoy Fields</secondary>
            </indexterm>button is used to create all <indexterm>
              <primary>Annotations</primary>

              <secondary>Buoyfields</secondary>
            </indexterm>types of buoyfield: <guiicon> <inlinemediaobject>
              <imageobject>
                <imagedata fileref="figures/buoy.gif"></imagedata>
              </imageobject>
            </inlinemediaobject> </guiicon></para>

          <para>After clicking on this button, a dialog pops up which invites
          you to select one of the buoyfield patterns listed on the previous
          page: using a drop-down list.</para>

          <para>After selecting one of the patterns a set of editable
          properties are displayed in the <glossterm
          linkend="g_property_window">property editor</glossterm>
          window.</para>
        </sect2>

        <sect2 xml:id="buoy_field_props">
          <title>Properties</title>

          <para>A number of the properties edited <indexterm>
              <primary>Buoy Fields</primary>

              <secondary>Properties</secondary>
            </indexterm> from this window are common to all buoyfield
          types:</para>

          <para><variablelist>
              <varlistentry>
                <term>BuoyLifeTime</term>

                <listitem>
                  <para>the time for which the buoys remain active
                  (represented as the time between the start and finish
                  DTG)</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term>Color</term>

                <listitem>
                  <para>the colour to plot the buoys and the buoyfield
                  label</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term>JigPoint</term>

                <listitem>
                  <para>the location from which this buoyfield is referenced.
                  As in any location, the jig point can be edited by
                  double-clicking on the plot or using an edit panel. Note
                  that the depth assigned for the jig point is used as the
                  depth for all of the buoys. If the jig point is assigned by
                  double-clicking, the depth value can then be set by clicking
                  on the "Edit" button.</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term>KingpinBearing/Range</term>

                <listitem>
                  <para>the range and bearing of the kingpin for this pattern
                  from the jig point</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term>LabelVisible</term>

                <listitem>
                  <para>whether to display the labels for buoys in this
                  buoyfield</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term>Name</term>

                <listitem>
                  <para>the name of this buoyfield</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term>Number</term>

                <listitem>
                  <para>the total number of buoys in this field</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term>StartDateTimeGroup</term>

                <listitem>
                  <para>the DTG of the first buoy laid</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term>SymbolScale</term>

                <listitem>
                  <para>the scale of the symbols drawn to represent
                  buoys.</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term>SymbolType</term>

                <listitem>
                  <para>the type of symbol to be used to represent
                  buoys</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term>TimeDelta</term>

                <listitem>
                  <para>the time between each buoy dropped (each buoy will
                  have the DTG of the previous buoy plus this TimeDelta,
                  except the first buoy which takes the value of
                  StartDateTimeGroup)</para>
                </listitem>
              </varlistentry>
            </variablelist></para>

          <para>Once you have completed editing these parameters, press the
          <guibutton>Build</guibutton> button, which will create a buoyfield
          using the defaults indicated. The properties for the buoyfield as a
          whole will open up in the properties window. From these properties
          you make any necessary corrections to the name of the buoyfield, or
          the location of the name relative to the buoys themselves.</para>

          <para>The buoyfield which is produced will look something similar to
          that shown below.</para>
        </sect2>

        <sect2 xml:id="demo_buoyfield_illustration">
          <title>Example buoyfield</title>

          <para><figure xml:id="buoy_pattern_demo">
              <title>Example of a buoy-pattern</title>

              <screenshot>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="figures/dropped_buoyfield.gif"></imagedata>
                  </imageobject>
                </mediaobject>
              </screenshot>
            </figure> The buoys themselves are represented using the Label
          type described elsewhere in this documentation. As Label objects,
          the user is able to right-click on any buoy and interactively edit
          the label colour/location, or double-click on the symbol to open the
          label up in the editor to access the full set of parameters.</para>
        </sect2>
      </sect1>

      <sect1 xml:id="using_buoyfields">
        <title>Using buoyfields</title>

        <sect2 xml:id="more_using_buoyfields">
          <title>Tote</title>

          <para>Buoyfields have some similar properties to vessel tracks when
          placed on the <glossterm linkend="g_tote">Tote</glossterm>.</para>

          <para>Once a buoyfield is made a <guilabel>Primary</guilabel> or
          <guilabel>Secondary</guilabel> track, a highlight is drawn around
          the buoy at or immediately after the current time. Additionally, if
          the buoyfield is designated as a secondary track the Tote
          continuously displays its range and bearing from the current
          location on the primary track.</para>
        </sect2>

        <sect2 xml:id="buoy_analysis">
          <title>Analysis</title>

          <para>Since buoyfields are essentially handled in the same way as
          Tracks, the full functionality of the <link
          linkend="track_toolbox">Track &amp; Time Toolbox</link> (accessed
          from the <guilabel>Tote</guilabel>) is available, so graphic plots
          can be produced and calculated data copied to the clipboard using
          Buoy data.</para>
        </sect2>
      </sect1>
    </chapter>

    <chapter xml:id="symbol_sets">
      <title>Symbol sets</title>

      <sect1 xml:id="more_sym_sets">
        <title>Debrief symbol sets</title>

        <sect2 xml:id="intro_to_sym_sets">
          <title>Introduction</title>

          <para>A set of symbols is provided within
          <application>Debrief</application>. The symbols <indexterm>
              <primary>Symbol Sets</primary>
            </indexterm> can either be attached to a text label, or used to
          highlight a current vessel location when stepping through
          tracks.</para>

          <para>Twenty-two Symbols are provided in 3 sizes. When the 2 smaller
          sizes are shown, any internal characters (as used in the sonar
          buoys) are not plotted. <figure xml:id="debrief_symbols">
              <title>Symbols provided by
              <application>Debrief</application></title>

              <mediaobject>
                <imageobject>
                  <imagedata fileref="figures/d3_symbols.gif" scalefit="1"
                             width="100%"></imagedata>
                </imageobject>
              </mediaobject>
            </figure></para>

          <note>
            <para><indexterm><primary>Scaled symbols</primary></indexterm>In summer 2010 a set of scaled symbols were introduced.
            These are not shown at fixed screen sizes, but as representative
            sizes of the subject vessel - so they resize as you zoom in on a
            plot. In summer 2011 the range of vessels represented by scaled
            symbols was extended, plus it became possible to specify the
            length and width of the subject platform for a realistically sized
            vehicle representation.<figure xml:id="scaled_symbols">
                <title>Scaled vessel symbols in
                <application>Debrief</application></title>

                <mediaobject>
                  <imageobject>
                    <imagedata fileref="figures/ScaledVessels.png"
                               scalefit="1" width="100%"></imagedata>
                  </imageobject>
                </mediaobject>
              </figure></para>
          </note>
        </sect2>

        <sect2 xml:id="more_buoy_patterns">
          <title>Use in buoy patterns</title>

          <para>Symbols are assigned to <indexterm>
              <primary>Symbol Sets</primary>

              <secondary>in Buoy Fields</secondary>
            </indexterm> buoys in a buoy pattern at the <guilabel>Pattern
          Builder</guilabel> stage. After selecting the type of pattern to be
          created the user is able to select which type of symbol is used for
          the buoys (at this stage only the buoy-related symbols are
          provided). For patterns which include a kingpin (Field, Barrier,
          Wedge), a kingpin symbol is plotted for the first buoy.</para>
        </sect2>

        <sect2 xml:id="buoy_labels">
          <title>Use in labels</title>

          <para>Any label placed on the plot has a symbol type property
          (although the symbol itself may not be visible). The symbol can be
          changed through the properties window, or by right-clicking on the
          label on the plot.</para>
        </sect2>

        <sect2 xml:id="more_using_symbols">
          <title>Use in tracks</title>

          <para>The final area where symbols are used is when stepping through
          tracks. Each vessel track has a symbol type property which is shown
          when the plot has SymbolHighlighter selected as the current
          highlighter.</para>

          <para>To access this property, select the Properties button on the
          <glossterm linkend="g_tote">Tote</glossterm> (first button on bottom
          row), and change the current <glossterm
          linkend="g_highlighter">highlighter</glossterm> to
          "SymbolHighlighter". Now the current data point on each track will
          be shown using the symbol for that track. <guiicon>
          <inlinemediaobject>
              <imageobject>
                <imagedata fileref="figures/PropertiesBtn.gif"></imagedata>
              </imageobject>
            </inlinemediaobject> </guiicon></para>

          <tip>
            <para>By switching to Snail mode and reducing the reducing the
            Trail Length to zero, a GOP-type plot can be shown.</para>
          </tip>
        </sect2>
      </sect1>
    </chapter>

    <chapter xml:id="external_datasets">
      <title>External datasets</title>

      <sect1 xml:id="vpf_data">
        <title>Installing VPF data</title>

        <sect2 xml:id="vpf_intro">
          <title>Introduction</title>

          <para>The <glossterm linkend="g_vpf">VPF</glossterm> standard
          provides <application>Debrief</application> users with the ability
          to display the contents of a number of different vectored databases.
          VPF(TM) is a Registered Trademark of US <indexterm>
              <primary>VPF Data</primary>

              <secondary>Introduction</secondary>
            </indexterm>National Imagery and Mapping Agency.</para>

          <para>One of the databases, the Vector Map (VMap) Level O is an
          unclassified global database of many features, including coastlines,
          depth and elevation contours. This is the favoured VPF database for
          use in <application>Debrief</application>. But note that
          <application>Debrief</application> makes no assumptions of or
          optimisations for the VMap data - any VPF data source can be used.
          <application>Debrief</application> can also import Digital Nautical
          Chart (DNC) databases. The Digital Nautical Chart is produced by the
          National Imagery and Mapping Agency (NIMA) and is an unclassified,
          vector-based digital database containing maritime significant
          features essential for safe marine navigation.</para>

          <para>Here is an introduction to VPF from the US National Imagery
          and Mapping Agency's web site ( <link
          xlink:href="http://www.nima.mil"
          xmlns:xlink="http://www.w3.org/1999/xlink">http://www.nima.mil</link>):
          <blockquote>
              <para><informaltable frame="none">
                  <tgroup cols="2">
                    <colspec colname="c1" />

                    <colspec colname="c2" />

                    <colspec colname="c3" />

                    <tbody>
                      <row>
                        <entry nameend="c2" namest="c1">The Vector Product
                        Format ( <glossterm linkend="g_vpf">VPF</glossterm>)
                        is a standard format, structure, and organization for
                        large geographic databases that are based on a
                        georelational data model and are intended for direct
                        use. VPF is designed to be compatible with a wide
                        variety of applications and products. VPF allows
                        application software to read data directly from
                        computer-readable media without prior conversion to an
                        intermediate form. VPF uses tables and indexes that
                        permit direct access by spatial location and thematic
                        content and is designed to be used with any digital
                        geographic data in vector format that can be
                        represented using nodes, edges, and faces.</entry>
                      </row>

                      <row>
                        <entry><inlinemediaobject>
                            <imageobject>
                              <imagedata fileref="figures/vpf.jpg"></imagedata>
                            </imageobject>
                          </inlinemediaobject></entry>

                        <entry>VPF defines the format of data objects, and the
                        georelational data model provides a data organization
                        within which software can manipulate the VPF data
                        objects. A Product Specification corresponding to a
                        specific database product determines the precise
                        contents of feature tables and their relationships in
                        the database. In this context, each separate product
                        or application is defined by a Product Specification
                        implemented by using VPF structures.</entry>
                      </row>

                      <row>
                        <entry nameend="c2" namest="c1">VPF data is stored in
                        a structure described in the Military Standard, Vector
                        Product Format, MIL-STD-2407 . The Standard specifies
                        the structure for directories, tables, table columns,
                        table join relationships, and media exchange
                        conventions for all VPF data. The data structure
                        itself can be thought of as a template or skeleton
                        within which the geospatial features and metadata are
                        stored. While the Standard describes the structure, it
                        does not describe the contents of a set of VPF data;
                        this is the role of "VPF Product
                        Specifications."</entry>
                      </row>
                    </tbody>
                  </tgroup>
                </informaltable></para>
            </blockquote></para>
        </sect2>

        <sect2 xml:id="VMAP_intro">
          <title>Introduction to VMAP Level 0</title>

          <para>Vector Map (VMap) Level 0 is an updated and improved version
          of the National Imagery and Mapping Agency's (NIMA) Digital Chart of
          the World (DCW).</para>

          <para>The primary source for the database is the 1:1,000,000 scale
          Operational Navigation Chart (ONC) series co-produced by the
          military mapping authorities of Australia, Canada, United Kingdom,
          and the United States. The complete database is available on a set
          of four CD-ROMs and contains more than 1,800 megabytes of vector
          data organized into 10 thematic layers. VMap Level 0 includes major
          road and rail networks, hydrologic drainage systems, utility
          networks (cross-country pipelines and communication lines), major
          airports, elevation contours, coastlines, international boundaries
          and populated places. VMap Level 0 includes an index of geographic
          names to aid in locating areas of interest. VMap Level 0 is
          accessible directly from the CD-ROM or can be transferred to a hard
          drive and used in many geographic information system (GIS)
          applications.</para>
        </sect2>

        <sect2 xml:id="getting_vpf">
          <title>Obtaining VPF data</title>

          <para><glossterm linkend="g_vpf">VPF</glossterm> data can be
          obtained from a <indexterm>
              <primary>VPF Data</primary>

              <secondary>Obtaining VPF data</secondary>
            </indexterm> number of different sources, although the main
          resource is the <link xlink:href="http://www.nima.mil"
          xmlns:xlink="http://www.w3.org/1999/xlink">NIMA</link> web-site
          itself.</para>

          <para>In the UK, the Director General of Military Survey (DG Mil
          Survey) were able to provide the VMap database (charged to a Royal
          Navy UIN).</para>

          <para>If/when you find other sources please provide feedback and
          this page will be updated.</para>

          <para>Searching the Internet will undoubtedly provide other sources
          for the information - it's probably worth shopping around. Since the
          data is in the public domain agencies only have to charge a
          "handling fee".</para>
        </sect2>

        <sect2 xml:id="storing_vpf">
          <title>Storing VPF data</title>

          <para><application>Debrief</application> can read VPF <indexterm>
              <primary>VPF Data</primary>

              <secondary>Where to store the data</secondary>
            </indexterm>data directly from CD-Rom but copying it to your hard
          disk provides the following advantages: <itemizedlist>
              <listitem>
                <para>It runs many times (&gt;10) quicker</para>
              </listitem>

              <listitem>
                <para>It allows you to view the contents of multiple CD-Roms
                simultaneously (the VMap level 0 data comes on 4 CDs so unless
                you have 4 CD-readers in your machine this is the only way to
                get global coverage)</para>
              </listitem>
            </itemizedlist></para>

          <para>So, on the assumption that you do want to copy the data to
          your hard disk, here is a strategy for keeping the data tidy:
          <orderedlist>
              <listitem>
                <para>Create a folder in the top level of your hard disk
                called <filename>VPF</filename></para>
              </listitem>

              <listitem>
                <para>Now insert the first VPF CD-Rom and view it through your
                file manager (e.g. <application>Windows
                Explorer</application>). You need to find which directory
                contains the actual data, so have a look in each of the top
                level directories for a directory which contains the files
                <filename>DHT</filename> and <filename>LAT</filename>. Note,
                for VMap data this is a directory named
                <filename>VMAPLV0</filename>. When you've found this directory
                copy it across to the <filename>VPF</filename> directory you
                created on your hard disk.</para>
              </listitem>

              <listitem>
                <para>So for VMap data, your hard disk you should have a
                directory named <filename>VPF</filename>, containing your
                first set of VMap data in a directory named
                <filename>VMAPLV0</filename>.</para>
              </listitem>

              <listitem>
                <para>You will be copying in a number of data sets with this
                directory name, so rename <filename>VMAPLV0</filename> to the
                name of the current dataset (such as <filename>NOAMER, SASAUS,
                EURNASIA or SOAMAFR</filename>).</para>
              </listitem>

              <listitem>
                <para>Next, swap your CD for the next CD in the series, copy
                the directory of interest across to the
                <filename>VPF</filename> directory on you hard disk, and
                rename it.</para>
              </listitem>

              <listitem>
                <para>Once you've repeated this process for all of the CDs for
                the current database it's time to configure
                <application>Debrief</application> to load the data.</para>
              </listitem>
            </orderedlist></para>
        </sect2>

        <sect2 xml:id="configure_for_vpf">
          <title>Configuring Debrief to read VPF data</title>

          <para>Debrief determines where to find the <glossterm
          linkend="g_vpf">VPF</glossterm> data using <indexterm>
              <primary>VPF Data</primary>

              <secondary>Configuring Debrief</secondary>
            </indexterm>the <guibutton>VPF Data storage</guibutton> tab of the
          <guibutton>Preferences</guibutton> dialog from the
          <guimenu>Window</guimenu> menu. Indicate the four data-file
          locations using the file-browser buttons.<figure
              xml:id="VPF_Prefs_Demo">
              <title>VPF preferences</title>

              <screenshot>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="figures/VPF_prefs.png" width="100%"></imagedata>
                  </imageobject>
                </mediaobject>
              </screenshot>
            </figure></para>
        </sect2>

        <sect2 xml:id="thanks_open_source">
          <title>Thank heavens for Open Source</title>

          <para>As many of you are probably aware,
          <application>Debrief</application> is an Open Source application,
          which means that anybody is free to copy, change, and re-use the
          Source Code for <application>Debrief</application>, provided they
          meet the terms of the <application>Debrief</application>
          license.</para>

          <para>The VPF plotting libraries we're using in
          <application>Debrief</application> are taken from another Open
          Source application, <application>OpenMap</application> from BBN
          Technologies.</para>

          <para><inlinemediaobject>
              <imageobject>
                <imagedata fileref="figures/VPF_OpenMap.gif" width="75"></imagedata>
              </imageobject>
            </inlinemediaobject> <inlinemediaobject>
              <imageobject>
                <imagedata fileref="figures/VPF_BBN_2c_primary.jpg" width="86"></imagedata>
              </imageobject>
            </inlinemediaobject></para>

          <para>The <application>OpenMap</application> application can be
          found at http://www.openmap.net. <application>Debrief</application>
          makes no modifications to the <application>OpenMap</application>
          application code.</para>
        </sect2>
      </sect1>

      <sect1 xml:id="view_vpf">
        <title>Viewing VPF data</title>

        <sect2 xml:id="more_view_vpf">
          <title>Introduction</title>

          <para><application>Debrief</application> does not pay <indexterm>
              <primary>VPF Data</primary>

              <secondary>Introduction</secondary>
            </indexterm> any attention to <glossterm
          linkend="g_vpf">VPF</glossterm> data until it loads a plot which
          requires the data, or until the user requests that VPF layers be
          added.</para>

          <para>VPF layers are loaded into a plot using the "Create VPF
          Layers" button: <guiicon> <inlinemediaobject>
              <imageobject>
                <imagedata fileref="figures/create_vpf.png"></imagedata>
              </imageobject>
            </inlinemediaobject> </guiicon></para>

          <para>Yes, it's a shrunken version of NIMA's VPF logo. If VPF layers
          have been loaded into <application>Debrief</application>, their
          details are stored in the plot file (i.e., whether they are switched
          on or off, and their colour). Note that the data itself is not
          stored in the plot file, just the names of the layers you're using
          (so there's no significant increase in file size).</para>
        </sect2>

        <sect2 xml:id="create_vpf">
          <title>Creating VPF layers</title>

          <para>Once loaded into a plot configure the VPF data by switching to
          the <guibutton>Layer Manager</guibutton>. In there, open the
          <guilabel>Chart Features</guilabel> layer, to see the new VPF layer.
          <figure xml:id="LayerMangerDemo_VPF">
              <title>VPF Data in Layer Manager</title>

              <screenshot>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="figures/VPF_Layer1.png" width="237"></imagedata>
                  </imageobject>
                </mediaobject>
              </screenshot>
            </figure></para>

          <para>Click on the VPF layer to open it up, showing which VPF
          databases are currently loaded. In this example you can see that I
          have the VMap Level 0 (vmaplv0) data together with some Digital
          Nautical Chart (DNC) data. Each layer shows how many items are on
          that layer, and the empty check box shows that each layer is not
          currently visible. <figure xml:id="chart_layers_Demo">
              <title>Layers within Chart Features</title>

              <screenshot>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="figures/VPF_Layer2.png" width="237"></imagedata>
                  </imageobject>
                </mediaobject>
              </screenshot>
            </figure></para>

          <para>You are going to switch on coastline data first, so click open
          up the <guilabel>vmaplv0</guilabel> database by clicking on the
          expand folder symbol. You will see the list of VMap themes listed.
          Later on, feel free to open them up and view the data they contain,
          but for now you will concentrate on the coastlines. The order of the
          themes may be different on your machine, this is of no concern.
          <figure xml:id="list_of_vpf_layers">
              <title>List of VPF layers</title>

              <screenshot>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="figures/VPF_Layer3.png" width="237"></imagedata>
                  </imageobject>
                </mediaobject>
              </screenshot>
            </figure></para>

          <para>Next, open up the Boundaries theme to see which Boundaries can
          be plotted by VMap. <figure xml:id="boundaries_theme_demo">
              <title>Boundaries theme</title>

              <screenshot>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="figures/VPF_Layer4.png" width="270"></imagedata>
                  </imageobject>
                </mediaobject>
              </screenshot>
            </figure></para>

          <para>Now you are going to configure the plotting of coastlines.
          Right-click on the <guilabel>Coastlines</guilabel> entry, and from
          the <guilabel>Coastlines</guilabel> drop-down list, select
          <guilabel>Color</guilabel>, and then <guilabel>Light
          Grey</guilabel>. Note that <guilabel>White</guilabel> is the default
          colour for all VPF features.</para>

          <para>Next, right-click on the coastlines entry again, and make the
          <guilabel>coastline</guilabel> Visible.</para>

          <para>Whilst we've made the <guilabel>Coastlines</guilabel> visible,
          the layers above it aren't, so now you make its parents visible.
          Right-click on the <guilabel>Boundaries</guilabel> layer and make it
          visible. Next right-click on the <guilabel>vmaplv0</guilabel> layer
          to make that too visible.</para>

          <para>Nothing has yet appeared on the plot, but that is because you
          are not current over any coastline. Now zoom out 6 times until the
          plot looks like that below: <figure xml:id="first_coastline_demo">
              <title>First coastline</title>

              <screenshot>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="figures/VPL_Layer6.gif"></imagedata>
                  </imageobject>
                </mediaobject>
              </screenshot>
            </figure></para>

          <para>Now you can see your new coastline of Africa.</para>

          <para>Select the Pan control from the Plot toolbar: <guiicon>
          <inlinemediaobject>
              <imageobject>
                <imagedata fileref="figures/Pan.gif"></imagedata>
              </imageobject>
            </inlinemediaobject> </guiicon></para>

          <para>Now drag the plot southwards to move the view up towards
          Europe. Keep dragging until you have a clear view of a more familiar
          coastline, that of the British Isles. From this view you will add
          depth contours. <figure xml:id="british_coast_demo">
              <title>Coastline of British Isles</title>

              <screenshot>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="figures/VPF_Layer7.gif"></imagedata>
                  </imageobject>
                </mediaobject>
              </screenshot>
            </figure></para>

          <para>Right-click on the <guilabel>Depth Contours</guilabel> entry
          in the <guilabel>Boundaries</guilabel> layer and switch its colour
          to <guilabel>Grey</guilabel>. Also switch the
          <guilabel>Contours</guilabel> entry to
          <guilabel>Visible</guilabel>.</para>

          <para>Depth contours will now appear: <figure
              xml:id="improved_british_coast_demo">
              <title>Coastline of British Isles with depth contours</title>

              <screenshot>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="figures/VPF_Layer8.gif"></imagedata>
                  </imageobject>
                </mediaobject>
              </screenshot>
            </figure></para>

          <note>
            <para>Note, the VMap CD-ROM gives the following description with
            relation to depth contours: <blockquote>
                <para>Depth contours (BE015) were derived from digital
                bathymetric data provided by Defense Mapping Agency. Depths
                are expressed in the following intervals: 200, 600, 1000.
                2000, 4000, 6000, and 8000 meters.</para>
              </blockquote></para>
          </note>

          <para>Feel free to zoom in on the data to see just how detailed the
          data gets (around Cowes on the Isle of Wight sections of coastline
          of only 200 yards length are clearly visible).</para>

          <para>Also zoom out to view the whole of the British Isles and
          experiment with switching on features in other layers.</para>

          <para>The plot below shows UK railways (from the Transportation
          Layer), and UK is shaded in by making the Administrative Areas (from
          the Boundaries Layer) visible. <figure xml:id="railways_image">
              <title>Railways of British Isles</title>

              <screenshot>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="figures/VPF_Layer9.gif"></imagedata>
                  </imageobject>
                </mediaobject>
              </screenshot>
            </figure></para>

          <para>Alternatively zoom and pan across to your home, see the
          accuracy of your part of the coastline.</para>
        </sect2>

        <sect2 xml:id="more_store_vpf">
          <title>Storing VPF settings</title>

          <para>As explained earlier, when you save the <glossterm
          linkend="g_vpf">VPF</glossterm> plot your VPF settings get saved
          with it. So have a go at saving your current view,
          exiting/re-starting <application>Debrief</application> then
          re-loading it. You should find yourself seeing the same view which
          you saved.</para>
        </sect2>

        <sect2 xml:id="vpf_best_practice">
          <title>VPF best practice</title>

          <para>There's no doubting the volume of data available through VPF,
          and the VMap Level 0 database in particular. The next level down
          from VMap Level 0 is VMap Level 1; which contains approximately 10
          times more detailed information.</para>

          <para>How much of it is of use is more subjective though, so it's
          best to lead your strategy for its use by your analysis
          requirements.</para>
        </sect2>
      </sect1>

      <sect1 xml:id="configure_vpf">
        <title>Configuring VPF defaults</title>

        <sect2 xml:id="more_config_vpf">
          <title>The problem</title>

          <para>Yes, VPF and VMap in <indexterm>
              <primary>VPF Data</primary>

              <secondary>Configuring default layers</secondary>
            </indexterm>particular provide a great volume of information which
          may help with analysis and will certainly improve the quality of
          "overview" images in reports.</para>

          <para>With this great volume comes a management overhead however.
          You could have constrained <application>Debrief</application> to
          only use VMap data, and then only load a sub-set of it (coastlines
          &amp; depth contours). Instead, however, it loads the full
          set.</para>

          <para>How can you make it easier to use?</para>

          <para>Read on.</para>

          <warning>
            <para>You'll need to know how to use a text editor and have a
            rough familiarity with <glossterm linkend="g_xml">XML</glossterm>
            or HTML text.</para>
          </warning>
        </sect2>

        <sect2 xml:id="vpf_how">
          <title>The solution</title>

          <para>How does it <application>Debrief</application> handle VPF
          data? <itemizedlist>
              <listitem>
                <para>When you save a plot with VPF data loaded,
                <application>Debrief</application> stores the names of all of
                the layers loaded, together with the colours and visibility of
                any features on them.</para>
              </listitem>

              <listitem>
                <para>When you re-load an existing session with VPF data,
                <application>Debrief</application> reads what layers the users
                wants and only loads those layers.</para>
              </listitem>
            </itemizedlist></para>

          <para>Accordingly, you could create a datafile containing only the
          layers you want, and drop this file into
          <application>Debrief</application> sessions. This should give us a
          simplified set of VPF layers.</para>

          <para>When you drag/drop an <glossterm
          linkend="g_xml">XML</glossterm> file into an existing session, the
          Layers in the <glossterm linkend="g_xml">XML</glossterm> file are
          copied into the existing session, although the projection, Tote, and
          GUI parameters are ignored.</para>
        </sect2>

        <sect2 xml:id="vpf_how_to">
          <title>How to do it - 1</title>

          <para>So what you do is open a new
          <application>Debrief</application> session and load the smallest REP
          file you have into it - (just to give your data an "origin").</para>

          <para>Then add your VPF layers using the <guibutton>Create VPF
          Layers</guibutton> button on the <guilabel>Chart Features</guilabel>
          toolbar. Customise these layers so that the layers/features of
          interest are made visible and set to your desired colours.</para>

          <para>Finally save the view to a plot file in an easily accessible
          location - call it <filename>default_layers.xml</filename></para>
        </sect2>

        <sect2 xml:id="how_to_create_default_layers">
          <title>How to do it - 2</title>

          <para>You are now going to edit this file to remove all unnecessary
          details except for your <glossterm
          linkend="g_layer">layer</glossterm>s.</para>

          <para>Open a text editor (such as <application>Notepad</application>
          in <application>MS Windows</application>), and load your new xml
          file into it.</para>

          <para>The contents of the file should be something like that shown
          below:</para>

          <screen width="70">
      &lt;?xml version="1.0" encoding="UTF-8"?&gt;

      &lt;plot Created="Thu Jul 19 15:04:41 GMT+01:00 2001" Name="Debrief Plot"&gt;
      &lt;session&gt;
      &lt;layers&gt;
      &lt;layer Name="Chart Features" Visible="TRUE"&gt;
      &lt;vpf_database Visible="TRUE"&gt;
      &lt;vpf_library Visible="TRUE" Name="vmaplv0"&gt;
      &lt;vpf_coverage Visible="FALSE" Type="ind" Description="Industry"&gt;
      &lt;vpf_feature Visible="FALSE" Type="extracta" Description="Extraction
        Areas"&gt;
      &lt;colour Value="WHITE" /&gt;
      &lt;/vpf_feature&gt;
      &lt;vpf_feature Visible="FALSE" Type="storagep" Description="Storage Point 
        Features"&gt;
      &lt;colour Value="WHITE" /&gt;
      &lt;/vpf_feature&gt;
      &lt;vpf_feature Visible="FALSE" Type="indtxt" Description="Industry Coverage
        Text"&gt;
      &lt;colour Value="WHITE" /&gt;
      &lt;/vpf_feature&gt;
              </screen>

          <para>..... and so on, until</para>

          <screen width="70">
      &lt;layer Name="Annotations" Visible="TRUE"&gt;
      &lt;rectangle Label=" trial" LabelLocation="Left"&gt;
      &lt;colour Value="YELLOW" /&gt;
      &lt;fontcolour Value="YELLOW" /&gt;
      &lt;font Family="Sans Serif" Size="12" Bold="FALSE" Italic="FALSE" /&gt;
      &lt;tl&gt;
      &lt;shortLocation Lat="-9.2166417" Long="156.2783694" Depth="0.000" /&gt;
      &lt;/tl&gt;
      &lt;/rectangle&gt;
      &lt;/layer&gt;
      &lt;/layers&gt;
      &lt;projection Type="Flat" Border="1.050" Relative="FALSE"&gt;
      &lt;tl&gt;
      &lt;shortLocation Lat="60.6482349" Long="-15.0669609" Depth="0.000" /&gt;
      &lt;/tl&gt;
      &lt;br&gt;
      &lt;shortLocation Lat="47.9097909" Long="3.0063981" Depth="0.000" /&gt;
      &lt;/br&gt;
      &lt;/projection&gt;
      &lt;gui&gt;
      &lt;tote /&gt;
      &lt;component Type="Stepper"&gt;
      &lt;property Name="AutoStep" Value="1000" /&gt;
      &lt;property Name="Highlighter" Value="Default Highlight" /&gt;
      &lt;property Name="StepLarge" Value="600000.000" /&gt;
      &lt;property Name="CurrentTime" Value="691231 235959.999" /&gt;
      &lt;/component&gt;
      &lt;/gui&gt;
      &lt;/session&gt;
      &lt;details Text="Saved with Debrief version dated 19 Jul 01 12:44" /&gt;
      &lt;/plot&gt;
                        </screen>
        </sect2>

        <sect2 xml:id="step_3_xml">
          <title>How to do it - 3</title>

          <para>As you can see above, the file starts with an entry beginning
          with the characters <guilabel>&lt;?xml</guilabel>. This line
          indicates that you are handling <glossterm
          linkend="g_xml">XML</glossterm> data.</para>

          <para>Next you have a series of lines of data, which start with
          <guilabel>&lt;plot&gt;</guilabel> and end with
          <guilabel>&lt;/plot&gt;</guilabel>. This format is similar to that
          found in HTML, and indicates that this file contains details of
          plot. Inside the <guilabel>&lt;plot&gt;</guilabel> you can see a
          <guilabel>&lt;session&gt;</guilabel>, which in turn contains a
          <guilabel>&lt;layers&gt;</guilabel> object, containing a series of
          <guilabel>&lt;layer&gt;</guilabel> items, followed by a
          <guilabel>&lt;projection&gt;</guilabel>, and a
          <guilabel>&lt;gui&gt;</guilabel>.</para>

          <para>What you are going to do is strip out everything except the
          Layers object, and then thin this out.</para>

          <para>So, move the cursor to the <guilabel>&lt;layers&gt;</guilabel>
          line. Delete everything before this (except for the
          <guilabel>&lt;?xml version="1.0" encoding="UTF-8"?&gt;</guilabel>
          line.</para>

          <para>Now move down to the <guilabel>&lt;/layers&gt;</guilabel>
          line, and delete everything from it to the end of the file.</para>

          <para>As you look at the layers, you can see that each layer has a
          name ( <guilabel>Chart Features</guilabel> is the first one in the
          example above). It is the <guilabel>Chart Features</guilabel> layer
          which you want to keep, so navigate down to the next Layer (which
          may have a track name), and delete that and all others (down to, but
          not including the <guilabel>&lt;/layers&gt;</guilabel> line which
          marks the end of the data).</para>

          <para>Within the <guilabel>Chart Features</guilabel> layer you can
          see an entry named <guilabel>&lt;vpf_database&gt;</guilabel> - this
          is the vpf data. Inside the vpf_database are
          <guilabel>&lt;vpf_library&gt;</guilabel> entries, one for each
          library loaded (probably just VMaplv0 in your instance).</para>

          <para>Inside the <guilabel>&lt;vpf_library&gt;</guilabel> are a
          series of <guilabel>&lt;vpf_coverage&gt;</guilabel> entries. It is
          these which you will thin out. Work down through them deleting any
          you don't want. In your instance you only want to keep the
          boundaries data, so you will delete all other coverages. So, select
          blocks of text beginning with
          <guilabel>&lt;vpf_coverage&gt;</guilabel> and ending with
          <guilabel>&lt;/vpf_coverage&gt;</guilabel> and delete those you
          don't want.</para>

          <para>Finally, delete any &lt;vpf_features&gt; you don't
          want.</para>

          <para>I've deleted all those I don't want, leaving the text
          below:</para>

          <screen width="70">
      &lt;?xml version="1.0" encoding="UTF-8"?&gt;
      &lt;layers&gt;
      &lt;layer Name="Chart Features" Visible="TRUE"&gt;
      &lt;vpf_database Visible="TRUE"&gt;
      &lt;vpf_library Visible="TRUE" Name="vmaplv0"&gt;
      &lt;vpf_coverage Visible="TRUE" Type="bnd" Description="Boundaries"&gt;
      &lt;vpf_feature Visible="TRUE" Type="oceansea" Description="Oceans/Seas"&gt;
      &lt;colour Value="BLUE" /&gt;
      &lt;/vpf_feature&gt;
      &lt;vpf_feature Visible="FALSE" Type="polbndl" Description="Political
        Boundaries"&gt;
      &lt;colour Value="WHITE" /&gt;
      &lt;/vpf_feature&gt;
      &lt;vpf_feature Visible="TRUE" Type="polbnda" Description="Administrative
        Areas"&gt;
      &lt;colour Value="WHITE" /&gt;
      &lt;/vpf_feature&gt;
      &lt;vpf_feature Visible="FALSE" Type="depthl" Description="Depth Contours"&gt;
      &lt;colour Value="WHITE" /&gt;
      &lt;/vpf_feature&gt;
      &lt;vpf_feature Visible="TRUE" Type="coastl" Description="Coastlines"&gt;
      &lt;colour Value="CYAN" /&gt;
      &lt;/vpf_feature&gt;
      &lt;/vpf_coverage&gt;
      &lt;/vpf_library&gt;
      &lt;/vpf_database&gt;
      &lt;/layer&gt;
      &lt;/layers&gt;
            </screen>
        </sect2>

        <sect2 xml:id="steps_complete">
          <title>At last!</title>

          <para>Now, you can drag and drop this file into any
          <application>Debrief</application> session to instantly give you
          your "favourite" set of layers.</para>

          <para>To test it, follow the steps described above (or copy the text
          I've just given you into a blank text file and save it as
          <filename>default_layers.xml</filename>). Then create a new
          <application>Debrief</application> session, load one of your demo
          tracks ( <filename>boat1.rep</filename>), then drag in
          <filename>default_layers.xml</filename>. Zoom out, and have a look
          at the lovely, pre-formatted data.</para>
        </sect2>
      </sect1>

      <sect1 xml:id="etopo_data">
        <title>ETOPO Data</title>

        <sect2 xml:id="etopo_install">
          <title>Configuring Debrief to read ETOPO data</title>

          <para>Debrief determines where to find the <glossterm
          linkend="g_etopo">ETOPO</glossterm> data using <indexterm>
              <primary>ETOPO Data</primary>

              <secondary>Configuring Debrief</secondary>
            </indexterm>the <guibutton>ETOPO Data storage</guibutton> tab of
          the <guibutton>Preferences</guibutton> dialog from the
          <guimenu>Window</guimenu> menu. Indicate the location of your
          ETOPO.RAW datafile using the file-browser button.<figure
              xml:id="vpf_prefs">
              <title>ETOPO preferences</title>

              <screenshot>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="figures/ETOPO_prefs.png" width="100%"></imagedata>
                  </imageobject>
                </mediaobject>
              </screenshot>
            </figure></para>
        </sect2>

        <sect2 xml:id="etopo_background">
          <title>Background to ETOPO data</title>

          <para><application>Debrief 2002</application> added the capability
          to view gridded bathymetric data, provided through the ETOPO
          dataset. The ETOPO dataset and its use is explained in more detail
          in <link linkend="etopo_gridded_bathy">ETOPO gridded
          bathy</link></para>

          <note xml:id="etopo_description">
            <para>The 'ETOPO-5' data set is originally from the U.S. National
            Geophysical Data Center (NGDC) in Boulder, Colorado (USA), and
            represents the "best" available digital terrain values as
            integrated from existing five and ten-minute digital sources. The
            data set has elevation values spaced at every five-minute
            latitude/longitude crossing on the global grid (approx. nine
            km.-sq. spatial resolution, or 12 x 12 pixels/degree), and a
            one-meter contour interval. Bathymetric values are included in
            this data set, starting at approximately 10,000 meters below sea
            level, while the elevation values extend up to heights of
            approximately 8,000 meters above sea level. Some original sources
            of the data used include the U. S. Defense Mapping Agency for the
            conterminous USA, Japan and Western Europe; the Australian Bureau
            of Mineral Resources, and the New Zealand Department of Scientific
            and Industrial Research.</para>

            <para>GRID has reformatted the original NGDC data file to place
            the origin at 180 degrees West longitude, instead of at 0 degrees
            Greenwich Meridian. The 'ETOPO-5' data file has 2160 records of
            data with a length of 8640 bytes each: the size of the data array
            is 2160 lines by 4320 elements, but this is a l6-bit or two bytes
            per element data file. The origin of the data file is at 90
            degrees North latitude and 180 West longitude, and it extends to
            90 degrees South latitude and 180 degrees East longitude. The data
            file comprises 18.66 Megabytes. The version of this data file at
            GRID has been discovered to contain two records (lines) of flawed
            data values; that is, portions of lines 2055 and 2056, beginning
            at the Weddell Sea north of Antarctica and continuing eastward.
            GRID is currently waiting for a response from the data supplier
            (NGDC) before attempting any replacement of what appear to be
            anomalous data values.</para>

            <para>There are two useful references for the 'ETOPO-5' data set.
            These are: "Edwards, Margaret Helen, 1986. Digital Image
            Processing of Local and Global Bathymetric Data. Master's Thesis.
            Department of Earth and Planetary Sciences, Washington Univ., St.
            Louis, Missouri, USA, 106 p." and "Haxby, W. F. et al., 1983.
            Digital Images of Combined Oceanic and Continental Data Sets and
            their Use in Tectonic Studies. EOS Trans- actions of the American
            Physical Union, vol. 64, no. 52, pp. 995-1004."</para>
          </note>

          <note xml:id="etopo2_description">
            <para>In November 2002 the capability to read the US NOAA
            'ETOPO-2' data set was been added to
            <application>Debrief</application>. The ETOPO-2 dataset may be
            purchased from the <link
            xlink:href="http://www.ngdc.noaa.gov/mgg/gdas/gx_announce.Html"
            xmlns:xlink="http://www.w3.org/1999/xlink">NOAA</link>, and is
            delivered on CD-ROM. The ETOPO-2 CD-ROM itself contains several
            datasets. The Dataset supported by Debrief is the
            <filename>ETOPO2.RAW </filename> file containing data in the
            <emphasis>big-endian</emphasis> format. This file must be copied
            into an
            <filename>plugins\org.mwc.cmap.static_resources_1.0.0\data</filename>
            sub-directory of the Debrief installation. This 2-minute dataset
            offers more than 6 times the detail of the ETOPO-5 dataset. This
            2-minute data is derived from the following sources: <itemizedlist>
                <listitem>
                  <para>The seafloor data between latitudes 64 North and 72
                  South is from the work of <emphasis>Smith and Sandwell,
                  1997</emphasis>. These data were obtained from satellite
                  altimetry observations combined with shipboard echo-sounding
                  measurements.</para>
                </listitem>

                <listitem>
                  <para>Seafloor data southward of 72 South are from the US
                  Naval Oceanographic (NAVOCEANO) DBDBV version 4.1 at 5
                  minute spacing.</para>
                </listitem>

                <listitem>
                  <para>Seafloor data northward from 64 North are from the new
                  International Bathymetric Chart of the Arctic Ocean (IBCAO)
                  Version 1.</para>
                </listitem>

                <listitem>
                  <para>Land data is from the GLOBE Project, an
                  internationally designed, and independently peer-reviewed
                  global digital elevation model (DEM).</para>
                </listitem>
              </itemizedlist></para>

            <para>These sources are summarised below: <figure
                xml:id="etopo_sources_demo">
                <title>ETOPO2 data sources</title>

                <screenshot>
                  <mediaobject>
                    <imageobject>
                      <imagedata fileref="figures/etopo2src.jpg" width="100%"></imagedata>
                    </imageobject>
                  </mediaobject>
                </screenshot>
              </figure></para>

            <para>This information has been taken from the <link
            xlink:href="http://www.ngdc.noaa.gov/mgg/fliers/01mgg04.html"
            xmlns:xlink="http://www.w3.org/1999/xlink">NOAA
            Web-site</link></para>
          </note>

          <para>The following options are provided for plotting ETOPO data:
          <variablelist>
              <varlistentry>
                <term>Color</term>

                <listitem>
                  <para>The color to plot the key itself.</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term>Key location</term>

                <listitem>
                  <para>This option determines where (and whether) to show the
                  key for the depth data. Note that the ETOPO data will always
                  appear behind other data, so it may be necessary to
                  experiment with the key location.</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term>Show land</term>

                <listitem>
                  <para>Whether to plot land as land, or as very shallow
                  water. Plotting the land as very shallow water is the
                  favoured way of combining ETOPO data with VPF data. The VPF
                  coastline data is of much higher resolution, differences
                  being highlighted when ETOPO land is shown.</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term>Visible</term>

                <listitem>
                  <para>Whether to plot the ETOPO data.</para>
                </listitem>
              </varlistentry>
            </variablelist> The ETOPO-2 dataset provides a few more
          customizable attributes, which allow you to choose between enhanced
          performance over appearance in the plot: <variablelist>
              <varlistentry>
                <term>Bathy Res</term>

                <listitem>
                  <para>This is the size of each bathy square to be plotted in
                  screen pixels. A resolution (Res) of 1 pixel provides the
                  most detailed bathymetric plot, though it takes the longest
                  time. Frequently it is possible to increase the bathy-res
                  without any visible degradation in the data displayed -
                  whilst providing performance benefits</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term>Bathy Visible</term>

                <listitem>
                  <para>This flag indicates whether the bathymetric plot
                  should be shown or not (sometimes the set of contours are
                  sufficient).</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term>Contour Depths</term>

                <listitem>
                  <para>Into this box provide a comma-separated list of depth
                  contours (in metres) to plot. The values should expressed in
                  ascending order as whole numbers. If Debrief encounters a
                  problem whilst reading the values it will return to the last
                  valid set of depths</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term>Contour Grid Interval</term>

                <listitem>
                  <para>The contour plotting algorithm is very
                  processor-intensive, calculating the contours when zoomed
                  out over a large area can take many minutes. The contour
                  plotting algorithm inspects every depth datum in the data
                  area whilst finding contours. The speed of calculation can
                  be improved by directing the algorithm to skip a number of
                  depth values before performing the next calculation. This
                  may make the contours themselves very slightly more blocky,
                  though still usable.</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term>Contour Optimise Grid</term>

                <listitem>
                  <para>Setting this switch instructs Debrief to automatically
                  increase the Contour Grid Interval as you zoom from the
                  plot. This prevents the exponential increase in time take to
                  conduct the contouring, ensuring that no more than 10000
                  calculations are performed, and when zooming in it ensures
                  that where applicable at least 2000 calculations are
                  performed.</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term>Contours Visible</term>

                <listitem>
                  <para>This flag indicates whether the contours should be
                  plotted or not - not showing contours substantially speeds
                  up the redraw time.</para>
                </listitem>
              </varlistentry>
            </variablelist><tip>
              <para>The ETOPO-5 dataset uses a significant amount of memory on
              your PC, typically 30Mb, though this only gets loaded once per
              Debrief session, however many plots are loaded. Writing a WMF
              file with ETOPO data visible requires even more memory, and can
              cause <application>Debrief</application> to hang or crash. This
              problem can be overcome by following the advice described in
              <xref linkend="starting_debrief" /></para>

              <para>The ETOPO-2 dataset is many times larger than ETOPO-5,
              thus is not read into memory but accessed on the fly. For this
              reason it does not consume as much memory, but does require a
              fast PC to produce acceptable screen updates.</para>
            </tip></para>
        </sect2>
      </sect1>
    </chapter>

    <chapter xml:id="viewing_narratives">
      <title>Viewing narratives</title>

      <sect1 xml:id="narrative_intro">
        <title>Introduction to narrative data</title>

        <sect2 xml:id="more_narr_intro">
          <title>Introduction</title>

          <para>The term <guilabel>Narrative Data</guilabel> is used
           within <application>Debrief</application> to refer to
          time-stamped textual data recorded during an exercise.</para>

          <para>Typically this data would be narrative data recorded to
          provide an overview of events within an exercise <glossterm
          linkend="g_serial">serial</glossterm>, but an equally valid use of
          the facility would be for a textual record of information exported
          from a recording device. An example of this could be control
          messages returned from a weapon, or readings taken from an onboard
          sensor.</para>
        </sect2>

        <sect2 xml:id="preparing_narrative_data">
          <title>Preparing the data</title>

          <para><indexterm>
            <primary>Narrative Data</primary>
            
            <secondary>Preparing</secondary>
          </indexterm>Narrative data is loaded into Debrief using the ;NARRATIVE and
          ;NARRATIVE2 replay file format entries as described at <xref
          linkend="replay_annotation_format" />.</para>

          <para>The narrative data can be located in a
          <filename>.REP</filename> file of its own, or together with other
          Debrief track and annotation data.</para>
        </sect2>

        <sect2 xml:id="more_loading_narr">
          <title>Loading the data</title>

          <para>Narrative data is loaded into
          <application>Debrief</application> in the same way as other data, by
          dragging and dropping, or using the <guibutton>Import
          Data</guibutton> button.</para>
        </sect2>

        <sect2 xml:id="viewing_narrative_data">
          <title>Viewing the data</title>

          <para><indexterm>
            <primary>Narrative Data</primary>
            
            <secondary>Viewing</secondary>
          </indexterm>Once the data is loaded into Debrief, it is displayed in a
          list window - with one entry per line. When stepping through the
          data the "current" entry is highlighted, but the user is also able
          to double-click on an entry to move the Debrief step time to the
          time this entry was recorded. <figure
              xml:id="viewing_narrative_demo">
              <title>Viewing a narrative</title>

              <screenshot>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="figures/Narr_1.png" width="100%"></imagedata>
                  </imageobject>
                </mediaobject>
              </screenshot>
            </figure>Three settings affect how the Narrative Viewer integrates
          with the current plot time (as indicated on the <link
          linkend="time_controller">Time Controller</link> (see <xref
          linkend="time_controller" />). <variablelist>
              <varlistentry>
                <term><guiicon> <inlinemediaobject>
                    <imageobject>
                      <imagedata fileref="figures/wrap.gif"></imagedata>
                    </imageobject>
                  </inlinemediaobject> </guiicon></term>

                <listitem>
                  <para>Trim the narrative entries to the visible screen
                  space</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term><guiicon> <inlinemediaobject>
                    <imageobject>
                      <imagedata fileref="figures/synced.gif"></imagedata>
                    </imageobject>
                  </inlinemediaobject> </guiicon></term>

                <listitem>
                  <para>Highlight the narrative entry nearest to the current
                  plot time.</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term><guiicon> <inlinemediaobject>
                    <imageobject>
                      <imagedata fileref="figures/clock.png"></imagedata>
                    </imageobject>
                  </inlinemediaobject> </guiicon></term>

                <listitem>
                  <para>Change the plot-time to that of a narrative entry when
                  the user double-clicks on it.</para>
                </listitem>
              </varlistentry>
            </variablelist></para>

          <para>Also, the narrative viewer is able to filter your data for
          you. Double-click on the <guibutton>Source</guibutton> or
          <guibutton>Type</guibutton> headings and a filter dialog will
          open.<figure xml:id="filtering_narrative">
              <title>Filtering a narrative</title>

              <screenshot>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="figures/narr_filter.png" width="338"></imagedata>
                  </imageobject>
                </mediaobject>
              </screenshot>
            </figure>In the example shown, select which types of data you wish
          to see in the filtered narrative by either double-clicking on them
          or selecting one then clicking the right arrow. When you've selected
          which data you want to see, click <guibutton>OK</guibutton></para>

          <para>The drop-down menu for the narrative viewer also allows you to
          select how you want the date column formatted - helpful for very
          frequent or infrequent narrative entries.</para>
        </sect2>
      </sect1>
    </chapter>

    <chapter xml:id="video_recording">
      <title><application>Debrief</application> video recording</title>

      <sect1 xml:id="more_recording">
        <title>Recording plots to video</title>

        <sect2 xml:id="more_recording_video">
          <title>Introduction</title>

          <para>As its name suggests, one of the initially <indexterm>
              <primary>Video</primary>

              <secondary>Recording to video</secondary>
            </indexterm> intended uses for <application>Debrief</application>
          was to conduct post-exercise debriefs.</para>

          <para>Nowadays <application>Debrief</application> gets a lot more
          use for exercise analysis, and has evolved into an exercise analysis
          tool, but there are still aspirations to use it in debriefs.
          Unfortunately, its use in a debrief normally requires an expert
          operator; who is not always available. Recording a
          <application>Debrief</application> session to file, however, enables
          it to be inserted into a <application>PowerPoint</application>
          presentation for automated replay.</para>

          <para>Debrief 2003 included experimental "Record to video"
          functionality. This feature was no match for the commercial
          equivalents. Applications such as HyperCam (<link
          xlink:href="http://www.hyperionics.com"
          xmlns:xlink="http://www.w3.org/1999/xlink">http://www.hyperionics.com</link>)
          allow more intuitive video recording, with much smaller file sizes -
          all for a very reasonable price. Until better performing video
          recording functionality becomes available in Java/Eclipse, purchase
          of off-the-shelf screen-recording video is the recommended
          route.</para>
        </sect2>
      </sect1>
    </chapter>

    <chapter xml:id="sensor_data">
      <title>Analysing sensor data</title>

      <sect1 xml:id="more_sensor_data">
        <title xml:id="SensorDataSection">Getting your data in</title>

        <sect2 xml:id="sensor_Data_intro">
          <title>Introduction</title>

          <para>As useful as it would appear it is only in the update to
          <application>Debrief</application> 2001 that
          <application>Debrief</application> has been able to properly show
          <glossterm linkend="g_sensor">sensor</glossterm> data.</para>

          <para>A rudimentary way of showing bearing lines has been present
          for a number of years, but Debrief has not performed any useful
          processing on this data.</para>

          <para>The following terms are used: <variablelist>
              <varlistentry>
                <term>Sensor</term>

                <listitem>
                  <para>The <glossterm linkend="g_sensor">sensor</glossterm>
                  which recorded the data. Sensor data is grouped according to
                  its sensor. This characteristic may be exploited by giving a
                  unique sensor name to each track being recorded on a sensor
                  - allowing tracks to be independently switched on and
                  off.</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term>Sensor Contact</term>

                <listitem>
                  <para>This is an individual contact recorded on a sensor, a
                  single bearing line reaching from the sensor location
                  (origin) along the contact bearing to the contact
                  range.</para>
                </listitem>
              </varlistentry>
            </variablelist></para>

          <para>The sticky issue of whether to represent sensor data in
          absolute coordinates (where each line has its own origin) or whether
          to represent the data in relative coordinates (where the sensor
          origin is assumed to be the current ownship position) is managed
          through the ability to enter NULL fields for the sensor
          location.</para>

          <para>Support for relative coordinates is provided for two reasons:
          <itemizedlist>
              <listitem>
                <para>Some <glossterm linkend="g_sensor">sensor</glossterm>
                data sources may genuinely not contain positional data -
                allowing relative coordinates will ease the workload in these
                instances.</para>
              </listitem>

              <listitem>
                <para>In the submarine plot-lock process it is quite common to
                experiment with a number of track-shifts until the
                hull-mounted sensor bearing fans tie up with the other vessel.
                By keeping the sensor data separate to the vessel data, the
                existing sensor data-file can be dropped into Debrief with the
                updated vessel track-file, allowing the user to perform a
                visual qualitative check on the shift applied.</para>
              </listitem>
            </itemizedlist></para>

          <para>Note, it is not possible to define the <link
          linkend="SensorOffsetsEditor">sensor offset</link> value in the REP
          file, it may only be defined from the Properties Window of Debrief
          NG. The value is stored safely when the Debrief plot is saved,
          however.</para>

          <para>When Sensor Contact data is being plotted for a Sensor using
          relative coordinates, Debrief reflects a Sensor Offset distance for
          that sensor. The sensor offset distance denotes the horizontal
          distance between the centre of the centre and the attack datum of
          the host platform (+ve forwards, -ve backwards - so towed array data
          would be -ve). See the next section for more detail on the support
          for a shared library of array lengths. The location of the start of
          the sensor contact bearing line is calculated using the current
          value of course for the host platform and the sensor offset
          value.<note>
              <para>Sensor data is typically added to a plot by
              dragging/dropping it from the <guimenu>Navigator</guimenu> view.
              If the dragged in datafile only contains cuts from a single
              sensor a dialog pops up give you chance to override the sensor
              name and color. If the file contains data from more than one
              sensor then they just quietly slip in.</para>
            </note></para>
        </sect2>

        <sect2 xml:id="SectWormInHole">
          <title>Worm in the hole</title>

          <para><indexterm><primary>Worm in the hole</primary><secondary>Usage</secondary></indexterm>When examining a Sensor in the properties view, you will see
          that in addition to Sensor Offset, there is a 'Worm in the hole' See
          <xref linkend="WormInHole" /> parameter. This is typically used for
          towed arrays, whereby the start of the sensor bearing line is
          located at the Sensor Offset distance back along the host platform
          track, instead of in a straight line behind the host.</para>
        </sect2>

        <sect2 xml:id="SensorOffsetsEditor">
          <title xml:id="titleForSensorLengths">Sensor offset lengths
          editor</title>

          <para><indexterm><primary>Sensor offsets editor</primary></indexterm>Since Autumn 09 Debrief has supported a library of sensor
          offsets. These offsets are used to populate a drop-down list of
          lengths, used in support of specifying sensor offsets.</para>

          <para>Somewhere on your network create a csv-formatted text file
          that stores two columns of data (as shown below). The first column
          is the platform/sensor name, the second column is that combination's
          array offset in metres (with -ve figures at the stern of the host
          platform). The file should end in a csv suffix, and is formatted as
          follows:<screen>Sensor Name,Length (m)
Platform A,-45
Platform B,-124.6
Platform C,-551</screen></para>

          <para>Then open the Debrief preferences page, and specify the offset
          file location using the <guilabel>Standard Array Offsets</guilabel>
          page<screenshot>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="figures/ArrayLengthsPrefs.png"
                             scalefit="1" width="100%"></imagedata>
                </imageobject>
              </mediaobject>
            </screenshot></para>

          <para>Once the standard offsets file has been specified, you are
          provided with a drop-down list of sensor offset distances when you
          view sensor data in the properties window:<screenshot>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="figures/LengthsEditor.png" width="308"></imagedata>
                </imageobject>
              </mediaobject>
            </screenshot></para>

          <note>
            <para>Note, if you haven't got a sensor array offsets file
            assigned, you can still enter a value by hand. But, you do not
            need to specify the metres units. For an array offset of -400m,
            just enter -400.</para>
          </note>
        </sect2>

        <sect2 xml:id="prepare_sensor_data">
          <title>Preparing Sensor Data</title>

          <para>Sensor data is loaded into Debrief in REP files, just like any
          other Debrief data. The line format is one of: <screen width="70">
<markup>;SENSOR: YYMMDD HHMMSS.SSS AAAAAA @@ DD MM SS.SS H DDD MM SS.SS  H BBB.B
 RRRR yy..yy xx..xx
;; date, ownship name, symbology, sensor lat/long (or the single word NULL),
 bearing (degs), range(yds), sensor name, label (to end of line)</markup>
            </screen> or <screen width="70">
<markup>;SENSOR2: YYMMDD HHMMSS.SSS AAAAAA @@ DD MM SS.SS H DDD MM SS.SS H BBB.B
 CCC.C FFF.F RRRR yy..yy xx..xx
;; date, ownship name, symbology, sensor lat/long (or the single word NULL), 
 bearing (degs)  [or the single word NULL], ambigous bearing (degs) [or the 
 single word NULL], frequency(Hz) [or the single word NULL],  range(yds) [or
 the single word NULL], sensor name, label (to end of line)</markup>
            </screen></para>

          <para>As you can see, unlike other Debrief line formats, this format
          allows for NULL fields. Where the sensor latitude and longitude
          values are replaced by the single word NULL, Debrief plots this
          sensor contact using a relative origin. NULL values may also be
          provided for the ambiguous sensor bearing and/or detection
          frequency.</para>
        </sect2>

        <sect2 xml:id="rel_sensor_data">
          <title>Relative Data</title>

          <para>When (as described above) Debrief plots data using a relative
          origin, it follows the following procedure: <itemizedlist>
              <listitem>
                <para>The first time the sensor contact line is plotted, it
                examines its parent track to find the vessel position nearest
                to (or greater than) the sensor contact DTG.</para>
              </listitem>

              <listitem>
                <para>This position is then offset by a vector produced from
                the sensor offset value and vessel's current course.</para>
              </listitem>

              <listitem>
                <para>The sensor contact then calculates the position of its
                far end relative to this origin</para>
              </listitem>
            </itemizedlist></para>
        </sect2>
      </sect1>

      <sect1 xml:id="analyse_sensor_data">
        <title>Analysing your data</title>

        <sect2 xml:id="analyse_sensor_data_intro">
          <title>Introduction</title>

          <para>When first loaded, <glossterm
          linkend="g_sensor">sensor</glossterm> data is not <indexterm>
              <primary>Sensor Data</primary>

              <secondary>Analysing</secondary>
            </indexterm> made visible, since with any reasonable volume of
          sensor data the plot quickly becomes illegible. Sensor data is
          switched on and off individually by accessing the sensor, via its
          Track, from the Layer Manager.</para>

          <para>It is once in <glossterm linkend="g_snail_trail">snail
          trail</glossterm> mode that sensor data is most easily analysed.
          When in snail mode the Snail display mode performs the following
          processing: <itemizedlist>
              <listitem>
                <para>For each Track being plotted, the display mode looks to
                see if it contains any Sensor data.</para>
              </listitem>

              <listitem>
                <para>It then examines each list of Sensor data to see if it's
                visible. If it is visible, it plots the current sensor contact
                (nearest to the <glossterm linkend="g_tote">Tote</glossterm>
                time), followed by the sensor contacts as disappearing
                contacts running back through the length indicated in the
                TrailLength parameter in the properties window.</para>
              </listitem>
            </itemizedlist></para>
        </sect2>

        <sect2 xml:id="BulkSensorData">
          <title>Managing high volumes of sensor data</title>

          <sect3 xml:id="HighVolumeIntro">
            <title>Introduction</title>

            <para>Modern command systems produce high volumes of sensor data,
            and a command system that just uses a 3-digit track counter can
            easily go 'around' the clock when allocating track numbers to
            contacts.</para>

            <para>Debrief provides capabilities to both ease the challenge of
            deciding which sensor data is related to a specific target, and to
            automatically split a single sensor track in multiple tracks when
            they clearly relate to different targets.</para>
          </sect3>

          <sect3 xml:id="FilterHighVolume">
            <title>Filter sensor data of interest</title>

            <para>With lots of sensor data it can be increasingly difficult to
            determine which tracks should be made visible - the plot below
            shows just 12 visible tracks - it's possible to have many hundreds
            of tracks..</para>

            <para><screenshot>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="figures/LotsOfTracks.png" width="100%"></imagedata>
                  </imageobject>

                  <caption>Cumbersome sensor data</caption>
                </mediaobject>
              </screenshot></para>

            <para><indexterm><primary>Sensor data</primary><secondary>Bulk data management</secondary></indexterm>The new <guilabel>Bulk Sensor Manager</guilabel> offers an
            opportunity to determine which sensor data has a direction near to
            one of the other tracks currently loaded in Debrief. Before
            opening the Bulk Sensor Manager it's worth telling Debrief which
            is your 'ownship' track, and which are the tracks of interest. Do
            this by marking tracks as primary and secondary in the Track Tote
            (see <xref linkend="assigning_tracks" />). Once you have a primary
            track set, select <guilabel>Bulk Sensor Manager</guilabel> from
            the <guilabel>Window/Show View</guilabel> menu. You'll see a plot
            like the one below:<screenshot>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="figures/BulkSensorManager.png"
                               width="100%"></imagedata>
                  </imageobject>
                </mediaobject>
              </screenshot></para>

            <para>As you'll see, the view shows multiple series of track data.
            Currently visible tracks are displayed in bold lines (the thick
            green line in the screenshot) - so, you'll typically be trying to
            determine which blocks of sensor data are close to/similar to
            target tracks. Sensor data is shown with symbols if it's visible
            in the plot (see the pink line near the centre-left of the image).
            Clicking on a block of sensor data in the view also selects that
            sensor data in the Layer Manager (though on occasion you need to
            expand the <guilabel>Sensors</guilabel> folder in the Layer
            Manager). As blocks of sensor data are selected, they are shown in
            black in the view. Items can be multiple-selected with the
            <keysym>&lt;ctrl&gt;</keysym> key. Once multiple blocks of sensor
            data are selected in the layer manager you can right-click on them
            and select 'Merge sensors into <emphasis>xxxx</emphasis>'</para>

            <para>Also note that whilst by default comes up with a unique
            color/symbol combination for each block of sensor data, you can
            click on the 'Show original colours' palette icon at the top of
            the view. This will switch the Bulk Sensor Manager to using the
            sensor data color as configured via the sensor manager.</para>
          </sect3>

          <sect3 xml:id="AutoSplitSensorData">
            <title>Automatically split sensor tracks</title>

            <para>For data from a command system that frequently 'wraps
            around' the track counter, when the data is read in Debrief will
            mistakenly assume that the data is all for the same contact: so
            the data will show as a continuous series to the left of the
            chart, then there'll be a jump over to were that track number is
            used again against another contact on the right hand side.</para>

            <para>Debrief offers a tool automatically split sensor data - the
            scissors icon at the top of the Bulk Sensor Manager offers
            'Auto-split sensor segments'. It will pass through all of the
            sensor tracks in the primary track, and if there is a jump of more
            than 15 seconds Debrief splits the successive data into a new
            tracks. The original and new tracks are then renamed with a "_1",
            "_2" suffix.</para>
          </sect3>

          <sect3>
            <title>Trim length of sensor lines</title>

            <para>As you'll see in the earlier <emphasis>Cumbersome sensor
            plot</emphasis>, a lot of sensor data can make a plot difficult to
            interpret. If sensor data isn't provided with a range attribute,
            then sensor lines are drawn out to infinity (or the edge to the
            viewport - whichever is nearer...). On a large area plot this may
            given sensor lines of 10s of nautical miles long. If in truth the
            detections are only in the thousands of yards, you may wish to
            give the sensor data a range. To do this, start by multi-selecting
            a block of sensor data in the layer manager. Next, open the
            properties window - you'll see the elements have zero range. Just
            insert an 'indicative' value for range. The sensor lines on the
            plot will now be clipped to that range - greatly reducing plot
            clutter.<screenshot>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="figures/TrimmedTracks.png"
                               width="100%"></imagedata>
                  </imageobject>

                  <caption>Trimmed sensor data</caption>
                </mediaobject>
              </screenshot></para>
          </sect3>
        </sect2>

        <sect2 xml:id="SensorRangePlot">
          <title>View plot of sensor range to target</title>

          <para>Whilst Debrief makes it easy to view a plot of the range
          between two vehicles, on occasion you may wish to view a time graph
          of the range from the array centre to the target. This graph can
          contain the distance from one or more sensors to a particular
          target. Open the graph by multi-selecting (&lt;ctrl-click&gt;) a
          series of sensor wrappers and a single target track (alternately you
          could select one track plus the 'Sensors' item of another track if
          you wish to view a range plot that includes all the sensors). If
          such a combination of objects have been selected in the Layer
          Manager, when you right-click on them you are offered the 'View
          sensor range plot' menu item:<screenshot>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="figures/ViewSensorPlot.png" width="313"></imagedata>
                </imageobject>

                <caption>Popup menu with a track plus multiple sensor
                selected</caption>
              </mediaobject>
            </screenshot></para>

          <para>Note, the Sensor Range Plot reflects the sensor offset length,
          plus whether the 'Worm in the hole' (see <xref
          linkend="SectWormInHole" /> ) property is set for each sensor. <tip>
              <para>On occasion you may wish to view a sensor range plot of a
              sensor for which you haven't loaded sensor data. That is, you've
              loaded &amp; displayed hull-mounted sonar data, but you wish to
              know the range from the centre of the array to the target. Do
              this as follows:<orderedlist>
                  <listitem>
                    <para>Right-click on the ownship track, select 'Add new
                    sensor'</para>
                  </listitem>

                  <listitem>
                    <para>Name the new sensor using the wizard, and specify
                    its default color</para>
                  </listitem>

                  <listitem>
                    <para>Now select the new sensor in the layer manager - in
                    order that you can edit its properties. In the property
                    window set the correct sensor offset distance (remember
                    it's in metres, and specify negative values to represent a
                    trailing array), and mark that it should use a 'worm in
                    the hole' algorithm</para>
                  </listitem>

                  <listitem>
                    <para>Now, back to the layer manager - multi-select the
                    new sensor, and the target track. Right-click on them and
                    select <guilabel>View sensor range plot</guilabel>.</para>
                  </listitem>
                </orderedlist>In this mode of use, the algorithm generates a
              range for each calculated position on the target track. In the
              normal mode (where we have sensor data), a range is calculated
              for each point at which there's a sensor cut (using
              interpolation to determine the position of the target
              track).</para>
            </tip></para>
        </sect2>

        <sect2 xml:id="manage_ambiguous">
          <title>Managing ambiguous data</title>

          <para>Whilst hull-mounted sensor typically produce a single bearing
          to their contact, towed-arrays typically produce ambiguous bearings.
          They are aware of the relative bearing to the contact, but are now
          aware of whether it is to the Port or Starboard of the host
          platform.</para>

          <para>The Debrief sensor format (DSF) handles ambiguous data by
          allowing two bearings to be read in, and once that block of sensor
          data is made visible Debrief plots both sensor bearings.</para>

          <para>In order to analyse the sensor data, or use the sensor data in
          other analysis, the analyst must decide which is the actual bearing
          (to be kept), and which is the ambiguous bearing (to be
          removed).</para>

          <para>Once a decision has been made on which of the two bearings to
          keep, open that block of sensor data in the Layer Manager. Then,
          select the relevant sensor cuts (using &lt;shift&gt; and
          &lt;control&gt; as necessary to multi-select). Once selected,
          right-click on one of the items and select <guimenuitem>Keep port
          bearing</guimenuitem> or <guimenuitem>Keep starboard
          bearing</guimenuitem>.</para>
        </sect2>

        <sect2 xml:id="doppler_export">
          <title>Exploiting doppler calculations</title>

          <para>To support the display frequency residuals (as used in <xref
          linkend="DraggingTracks" />), Debrief contains a set of doppler
          <link linkend="freq_alg">frequency calculations</link>. Should you
          require this data in a third-party application it is possible to
          export this calculated data. Do this export as follows:<orderedlist>
              <listitem>
                <para>You must have a Debrief plot open that contains ownship
                plus target tracks</para>
              </listitem>

              <listitem>
                <para>Ownship <link linkend="assigning_tracks">must be
                marked</link> as <link linkend="primary_track">primary
                track</link>, and the target track must be the only secondary
                track</para>
              </listitem>

              <listitem>
                <para>The ownship track must contain sensor data</para>
              </listitem>

              <listitem>
                <para>The target track must have its base frequency
                assigned.</para>
              </listitem>

              <listitem>
                <para>Using the <link linkend="time_controller">Time
                Controller</link> view, select the time period for which data
                is to be exported</para>
              </listitem>

              <listitem>
                <para>Select <guimenu>Export Doppler Shift
                data</guimenu></para>
              </listitem>
            </orderedlist></para>

          <para>The data is collated using the following
          algorithm:<orderedlist>
              <listitem>
                <para>Loop through the visible blocks of sensor data for the
                ownship track</para>
              </listitem>

              <listitem>
                <para>Find all target track segments that overlap with this
                block of sensor data</para>
              </listitem>

              <listitem>
                <para>Loop through this block of sensor data</para>
              </listitem>

              <listitem>
                <para>For each sensor cut, find the position on the target
                track nearest to this time</para>
              </listitem>

              <listitem>
                <para>Perform a doppler calculation for this sensor cut/target
                position</para>
              </listitem>
            </orderedlist></para>

          <para>The data will now be written to file in csv format: first the
          base frequency then a series of time-stamped measured and predicted
          frequencies.</para>
        </sect2>

        <sect2 xml:id="MultiTonalAnalysis">
          <title>Multi tonal frequency analysis</title>

          <para>There exists the situation in frequency analysis where
          multiple tonals are held, but the analyst would rather use the
          highest freq tonals. Here's a strategy for how to manage it,</para>

          <para>First, load the bearing sensor data. Edit the sensor cuts
          (probably in the <link linkend="GridEditor">grid editor</link>) to
          include the highest freq data held, potentially colouring the blocks
          of cuts according to the base tonal that they relate to. Go through
          these blocks of cuts creating a solution for each block - then
          setting the base frequency for that solution to the respective
          value.</para>

          <para>You can now switch individual solution blocks on and off,
          ensuring the <link linkend="track_shifting">stacked dots</link> will
          be working with the correct data values.</para>
        </sect2>

        <sect2 xml:id="multipath_analysis">
          <title xml:id="multipath_title">Multipath analysis</title>

          <para><indexterm><primary>Multipath</primary><secondary>analysis</secondary></indexterm>Should you have access to multipath sensor data of a target
          vessel from a host platform, Debrief is able to assist in
          determining the target depth. In overview, Debrief allows you to
          compare the measured time interval with one calculated from the
          relevant dispositions of the two tracks (plus measured sound speeds
          for that location).</para>

          <sect3 xml:id="multipath_datasets">
            <title>Datasets</title>

            <para>To perform this analysis you require the following
            datasets:<orderedlist>
                <listitem>
                  <para>Ownship and Target tracks</para>
                </listitem>

                <listitem>
                  <para>A SVP (Sound Velocity Profile) file for the location
                  (using the file format defined <link
                  linkend="multi_data_svp">here</link>)</para>
                </listitem>

                <listitem>
                  <para>A file of measured time intervals (using the file
                  format defined <link
                  linkend="multi_data_delays">here</link>)</para>
                </listitem>
              </orderedlist></para>
          </sect3>

          <sect3 xml:id="multi_delay_algorithms">
            <title>Time delay algorithms</title>

            <para>The indirect path length is calculated as
            follows:<screenshot>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="figures/multi_length_alg.png"
                               width="212"></imagedata>
                  </imageobject>

                  <caption>Algorithm used to determine indirect path
                  length</caption>
                </mediaobject>
              </screenshot>Where: <variablelist>
                <varlistentry>
                  <term>L<subscript>d</subscript></term>

                  <listitem>
                    <para>Direct path length</para>
                  </listitem>
                </varlistentry>

                <varlistentry>
                  <term>L<subscript>s,horiz</subscript></term>

                  <listitem>
                    <para>Horizontal range to the point where the surface path
                    intersects the surface (see diagram below)</para>
                  </listitem>
                </varlistentry>

                <varlistentry>
                  <term>L<subscript>s</subscript></term>

                  <listitem>
                    <para>Path length from source to surface</para>
                  </listitem>
                </varlistentry>

                <varlistentry>
                  <term>L<subscript>r</subscript></term>

                  <listitem>
                    <para>Path length from surface to receiver</para>
                  </listitem>
                </varlistentry>

                <varlistentry>
                  <term>H<subscript>d</subscript></term>

                  <listitem>
                    <para>Horizontal range</para>
                  </listitem>
                </varlistentry>

                <varlistentry>
                  <term>Z<subscript>s</subscript></term>

                  <listitem>
                    <para>Source depth</para>
                  </listitem>
                </varlistentry>

                <varlistentry>
                  <term>Z<subscript>r</subscript></term>

                  <listitem>
                    <para>Receiver depth</para>
                  </listitem>
                </varlistentry>
              </variablelist>These lengths are the calculated as: <screenshot>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="figures/multi_lengths.png" width="284"></imagedata>
                  </imageobject>

                  <caption>Comparison of acoustic paths</caption>
                </mediaobject>
              </screenshot>Finally the path lengths are divided by the
            respective sounds speeds to obtain the path travel times, and this
            the overall time delay:<screenshot>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="figures/multi_delay.png" width="233"></imagedata>
                  </imageobject>

                  <caption>Calculation of time delay</caption>
                </mediaobject>
              </screenshot></para>
          </sect3>

          <sect3 xml:id="multi_svp_algorithms">
            <title>Sound Speed algorithms</title>

            <para>The sounds paths shown in the illustration above may travel
            through depths that have varying sound speeds. We calculate an
            average sound speed for the depth profile by calculating a
            weighted mean for that depth range:</para>

            <para>Source depth = 55 m</para>

            <para>Receiver depth = 30 m</para>

            <para>Sound Speed Profile:</para>

            <informaltable border="1" class="MsoNormalTable"
                           style="border-collapse:collapse;border:none;mso-border-alt:solid windowtext .5pt;  mso-yfti-tbllook:1184;mso-padding-alt:0cm 5.4pt 0cm 5.4pt;mso-border-insideh:  .5pt solid windowtext;mso-border-insidev:.5pt solid windowtext">
              <tgroup cols="2">
                <thead>
                  <row>
                    <entry valign="top">Depth (m)</entry>

                    <entry valign="top">Speed (m/s)</entry>
                  </row>
                </thead>

                <tbody>
                  <row>
                    <entry valign="top">0</entry>

                    <entry valign="top">1500</entry>
                  </row>

                  <row>
                    <entry valign="top">30</entry>

                    <entry valign="top">1505</entry>
                  </row>

                  <row>
                    <entry valign="top">40</entry>

                    <entry valign="top">1510</entry>
                  </row>

                  <row>
                    <entry valign="top">60</entry>

                    <entry valign="top">1515</entry>
                  </row>
                </tbody>
              </tgroup>
            </informaltable>

            <para>Average sound speed between 0 m and 30 m can be ignored as
            the sound never goes into that region. Average sound speed between
            30 m and 40 m is 1507.5 m/s. The sound speed at 55 m is 1513.75
            m/s (through linear interpolation). Average sound speed between 40
            m and 55 m is 1511.875 m/s. Using the depth range in metres as its
            weighting value, the overall average sound speed is
            ((1511.875*15)+(1507.5*10))/25 = 1510.125 m/s</para>
          </sect3>

          <sect3>
            <title>Optimisation Algorithm</title>

            <para>Debrief is able to use Dr Michael Thomas Flanagan's (at
            <link xlink:href="www.ee.ucl.ac.uk/~mflanaga"
            xmlns:xlink="http://www.w3.org/1999/xlink">www.ee.ucl.ac.uk/~mflanaga</link>,
            [note: external link]) Nelder Mead simplex optimisation algorithm
            to determine the optimum target depth to minimise the
            least-squares error between the calculated and measured
            curves.</para>
          </sect3>

          <sect3 xml:id="multi_ui">
            <title>User interface</title>

            <para>Perform multi-path analysis using the Multipath analysis
            view. Open this view by selecting it from the
            <guilabel>Window/Show View</guilabel> menu. <screenshot>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="figures/multi_empty.png" scalefit="1"
                               width="100%"></imagedata>
                  </imageobject>

                  <caption>Initial view of multipath analysis view</caption>
                </mediaobject>
              </screenshot>As you'll see from the above screenshot, the panel
            is laid out with a series of controls above an xy plot. The
            controls at the top of the view indicate the files being used for
            SVP and time-delays, a slider control is provided to let you trial
            target depths, plus there's a <emphasis>magic</emphasis> button
            that runs an optimisation algorithm - generating a
            <emphasis>best-guess</emphasis> of target-depth by minimising the
            time-delay error.</para>

            <para>So, start off by dragging in your SVP and time-delay files -
            dropping them over the respective <emphasis>[pending]</emphasis>
            label. Next, ensure your 'ownship' track is marked as the current
            primary track, and your target track is the secondary track in the
            Debrief Track Tote (as explained in <xref
            linkend="more_assigning_tracks" />).</para>

            <para>Once you've loaded the data and assigned the tracks, the
            slider control will become enabled and you can drag it to trial
            new target depths. The xy plot will update to show a comparison of
            the calculated time delays against the measured delay. You'll
            determine the target depth estimate by using the slider to place
            the blue (calculated) line as close as possible to the red
            (measured) line.<screenshot>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="figures/multi_working.png"
                               scalefit="1" width="100%"></imagedata>
                  </imageobject>

                  <caption>Multipath analysis view with data loaded</caption>
                </mediaobject>
              </screenshot></para>

            <para>An alternative to working out the estimated target depth by
            eye/experimentation is to click on the magic top-hat icon. A <link
            xlink:href="http://www.ee.ucl.ac.uk/~mflanaga/java/Minimisation.html"
            xmlns:xlink="http://www.w3.org/1999/xlink">Nelder and Mead simplex
            optimisation algorithm</link> [note: external link] will now run -
            with the slider set to the result on completion. Should you be
            interested in the performance of this iterative optimisation
            algorithm, a summary of each step is placed as an information
            message in the error log (viewable by selecting
            <guimenu>Window</guimenu>/<guimenu>Show
            View</guimenu>/<guimenuitem>Error Log</guimenuitem>). The log will
            show the 'score' for each target depth trialled - normally only
            around 10-20 depths are necessary to reach an optimum.</para>

            <para>Note, during development, on occasion the optimisation
            algorithm failed to produce a realistic target depth. On each
            occasion this was a symptom of there not being a valid result in
            the available target range (0 to 1000m) - which itself was
            symptomatic of invalid data files: dropping the data-files into
            the wrong 'slot' or mistakenly using units different to those
            specified in the <link
            linkend="multi_data_delays">reference</link>.</para>
          </sect3>
        </sect2>
      </sect1>
    </chapter>

    <chapter xml:id="tma_data">
      <title>Management of TMA and TUA solutions</title>

      <sect1 xml:id="more_tma_data">
        <title>TUA data</title>

        <sect2 xml:id="tma_intro">
          <title>Introduction</title>

          <para><glossterm linkend="g_tma_solution">TMA</glossterm> algorithms
          are used to produce an estimate of range by analysing a sequences of
          sensor contacts which only contain bearing (and optionally range).
          The output of the algorithm is typically a series of estimated
          target locations with optional estimates for course, speed and
          depth. Uncertainty in bearing and range may be indicated by
          representing the target location as an ellipsoidal Target
          Uncertainty Area (TUA).</para>

          <para>TUA contact data is always related to one of the currently
          loaded tracks, and may be represented either as an absolute location
          (at the centre of the ellipse) or as a range and bearing from the
          nearest point on that loaded track. The strategy for use of absolute
          versus relative data is described earlier in <xref
          linkend="prepare_sensor_data" /></para>
        </sect2>

        <sect2 xml:id="pre_tma_data">
          <title>Loading TUA data in bulk</title>

          <para>TUA data is loaded into Debrief in REP files, just like any
          other Debrief data. The line format is: <screen>
              <markup>
;TMA_POS: YYMMDD HHMMSS.SSS AAAAAA @@ DD MM SS.SS H DDD MM SS.SS H 
TT...TT OOO.O  XXXX YYYY  CCC SSS DDD xx.xx 
;; date, time, ownship name, symbology, tma lat, tma long, track name, 
ellipse orientation (deg from north),  maxima (yds), minima (yds), 
course, speed, depth (m), label string

;TMA_RB: YYMMDD HHMMSS.SSS AAAAAA @@ BBB.B RRR.R TT...TT OOO.O
XXXX YYYY  CCC SSS DDD xx.xx 
;; date, time, ownship name, symbology, bearing (deg), range (yds), 
track name, ellipse orientation (deg from north),  maxima (yds),
 minima (yds), course, speed, depth (m), label string
              </markup>
            </screen><note>
              <para>There are two annotation format to represent TUA solutions
              (TMA_POS and TMA_RB). TMA_POS is used to define a TMA solution
              at a particular location, and TMA_RB is used to define a TMA
              solution at a specific range and bearing from the current
              ownship location at that specific DTG. Where a solution ellipse
              is not known the orientation, maxima and minima values can be
              represented by a single NULL value.</para>
            </note></para>
        </sect2>

        <sect2 xml:id="TUA_WIZARD">
          <title>Loading small amounts of TUA data</title>

          <para>An alternate route to loading TUA data is to use the 'Generate
          TUA Ellipse' wizard. Right-click on a Track or the
          <guilabel>Solutions</guilabel> layer inside a track, and select the
          respective menu item. The time for the ellipse is taken from the
          Time Controller, though you may type in any time. Follow the steps,
          and when the wizard closes you will have created your TUA ellipse.
          Clearly, if you have lots of TUAs to load, you're better off by
          loading the data into Debrief via a data-files as described
          above.</para>
        </sect2>

        <sect2 xml:id="rel_tma_data">
          <title>Relative data</title>

          <para>When (as described above) Debrief plots data using a range and
          bearing, it follows the following procedure: <itemizedlist>
              <listitem>
                <para>The first time the TUA solution is plotted, it examines
                its parent track to find the vessel position nearest to (or
                greater than) the TUA solution DTG.</para>
              </listitem>

              <listitem>
                <para>The TUA solution then calculates the position of its
                centre relative to this origin</para>
              </listitem>
            </itemizedlist></para>
        </sect2>

        <sect2 xml:id="analysing_tma_data">
          <title>Analysing TUA data</title>

          <para>When first loaded, TUA data is not <indexterm>
              <primary>TMA Data</primary>

              <secondary>Analysing</secondary>
            </indexterm> made visible, since with any reasonable volume of TUA
          data the plot quickly becomes illegible. TUA data is switched on and
          off individually by accessing the whole TUA track, via its Track,
          from the Layer Manager.</para>

          <para>It is once in <glossterm linkend="g_snail_trail">snail
          trail</glossterm> mode that TUA data is most easily analysed. When
          in snail mode the Snail display mode performs the following
          processing: <itemizedlist>
              <listitem>
                <para>For each Track being plotted, the display mode looks to
                see if it contains any TUA data.</para>
              </listitem>

              <listitem>
                <para>It then examines each list of TUA data to see if it's
                visible. If it is visible, it plots the current TUA solution
                (nearest to the <glossterm linkend="g_tote">Tote</glossterm>
                time), followed by the TUA solution as disappearing solutions
                running back through the length indicated in the TrailLength
                parameter in the properties window.</para>
              </listitem>
            </itemizedlist></para>
        </sect2>
      </sect1>

      <sect1 xml:id="tma_support">
        <title xml:id="TMA_Mgt">TMA Management</title>

        <sect2 xml:id="TMAMgtIntro">
          <title>Introduction</title>

          <para>In addition to being able to display TUAs from third-party TMA
          implementations, Debrief can be used to derive fresh TMA solutions.
          These solutions are not presented in the form of TUAs, but in the
          form of analysis legs: a time-limited track segments comprising a
          series of points at constant course and speed. Traditionally these
          segments are created by analysis of a combination of sonar-derived
          bearings and frequencies.</para>

          <para>These TMA segments are represented as track segments within
          Debrief for which the course and speed of the whole track (solution)
          are editable via the Properties Window.</para>

          <para>The workflow for creating and manipulating TMA segments is
          covered in the <emphasis>Single Sided Reconstruction in
          Debrief</emphasis> cheat sheet in the Debrief online help.</para>
        </sect2>

        <sect2 xml:id="GeneratingTracks">
          <title>Generating track segments</title>

          <para>Debrief allows you to generate a segment of track data from a
          block of sensor data - replicating the process conducted on
          warships. Data to support the operation is collected via a wizard,
          as described in the above cheat sheet.</para>
        </sect2>

        <sect2 xml:id="DraggingTracks">
          <title>Dragging tracks</title>

          <para>Once TMA segments are present on the Debrief plot they are
          manipulated using the <guibutton>Drag Track Segment</guibutton>
          toolbar button <guiicon><inlinemediaobject>
              <imageobject>
                <imagedata fileref="figures/SelectSegment.png"></imagedata>
              </imageobject>
            </inlinemediaobject></guiicon>. Once this button is pressed
          Debrief automatically displays the <guilabel>Bearing
          Residuals</guilabel> view, which displays bearing residual data -
          subject to the constraints <link linkend="DotsConstraints"> listed
          earlier</link> (with the TMA Segment present as the secondary
          track). If your data contains frequency data then you can open the
          <guilabel>Frequency Residuals</guilabel> view, which display actual,
          and calculated frequencies (based on the selected solution). Read
          more about the frequency algorithms in <xref
          linkend="freq_alg" /></para>

          <para>Once the plot is in 'Drag track segment' mode a series of
          track-dragging modes are enabled - with the current mode selected
          via the control buttons on the Stacked Dots plot. The control
          buttons provide the following modes:<variablelist>
              <varlistentry>
                <term>Translate</term>

                <listitem>
                  <para>Drag the whole track around, changing range and
                  bearing from the source, but maintaining target course and
                  speed</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term>Rotate</term>

                <listitem>
                  <para>Drag one end of the track, maintaining the track
                  length (target speed) but changing the target course</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term>Stretch</term>

                <listitem>
                  <para>Drag one end of the track, maintaining the target
                  course but changing the track length (target speed). When
                  the centre-point of the track is dragged, the track moves in
                  and out stretching/contracting as necessary to adhere to the
                  start/end points on the host platform bearing fan.</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term>Shear</term>

                <listitem>
                  <para>Drag one end of the track, changing both the target
                  course and speed</para>
                </listitem>
              </varlistentry>
            </variablelist><note>
              <para>Note, only the Translate and Rotate operations are
              available for all track sections. Only the Stretch and Shear
              operations are suitable for application to straight-line TMA
              Segments Thus, the hand cursor will only turn green over
              straight-line TMA Segment hot spots.</para>
            </note> When in Translate or Rotate mode, the drag-highlight is
          extended beyond the first/last point in the track to assist with
          alignment. A target-circle is also plotted on this extended stalk.
          This target is plotted at a distance equal to the distance back to
          the end-but-one point. Thus, if you have equi-spaced track data this
          target can be used to align the track sections longitudinally and
          transversely. In the following diagram the lower-right track segment
          is being dragged inline with the upper-left track segment. Place the
          circle/cross hair over the end point of the fixed track to align the
          tracks in both dimensions.<screenshot>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="figures/DragHighlight.png" width="100%"></imagedata>
                </imageobject>
              </mediaobject>
            </screenshot></para>

          <para>Note, when the plot is in one of these modes, the operations
          apply to the ends of the track - so the operation is started by
          dragging one end of the track (once the 'selected' hover highlight
          is shown). In addition to the specific operations performed at the
          ends of the target track, all modes support picking up and dragging
          the track when it is picked up at its centre In the Stretch mode the
          track shifts as described above, in all the other modes it is
          translated.</para>
        </sect2>

        <sect2 xml:id="CombiningTracksMarker">
          <title xml:id="CombiningTracksTitle">Combining tracks</title>

          <para>Collectively, TMA segments are combined into target tracks
          using the Group and Merge operations described earlier <link
          linkend="GroomingTrackData">Grooming Track Data</link>.</para>
        </sect2>
      </sect1>
    </chapter>
  </part>

  <!-- ********************************************************************** -->

  <!-- ********************************************************************** -->

  <!--   Maintainers                                                         -->

  <!-- ********************************************************************** -->

  <!-- ********************************************************************** -->

  <part xml:id="maintainers_guide">
    <title>Maintainer's Guide</title>

    <partintro xml:id="more_maintainers">
      <para>This section will give you all you need to look after a collection
      of Debrief installations, from fault-finding through to optimising the
      installations used.</para>
    </partintro>

    <chapter xml:id="participating">
      <title>Participating in Debrief development</title>

      <sect1 xml:id="debrief_online">
        <title>Debrief online</title>

        <para>Whilst the use of <application>Debrief</application> originated
        at the <glossterm linkend="g_MWC">MWC</glossterm>, it now has a very
        distributed community of users. Communication across this distributed
        user-group is enabled via the Internet through three mechanisms: the
        Debrief home page, the SourceForge project management page, and the
        Debrief news list. These mechanisms are described in this
        chapter.</para>

        <para>The <application>Debrief</application> web-site, found at <link
        xlink:href="http://www.debrief.info"
        xmlns:xlink="http://www.w3.org/1999/xlink">http://www.debrief.info</link>
        provides an introduction to <application>Debrief</application>,
        together with access to this tutorial and a
        <emphasis>way-in</emphasis> to getting started with Debrief. <figure
            xml:id="Debrief_Home_Page">
            <title>Debrief home page</title>

            <screenshot>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="figures/debrief_home.png" width="100%"></imagedata>
                </imageobject>
              </mediaobject>
            </screenshot>
          </figure></para>

        <para>The <application>SourceForge.net</application> page, used to
        support the project management of Debrief, is described later in <link
        linkend="debrief_feedback">Providing Feedback</link>, and the
        <application>Debrief</application> news list is described in the <link
        linkend="debrief_news">next section</link>.</para>
      </sect1>

      <sect1 xml:id="debrief_news">
        <title>Keeping up to date</title>

        <para>News lists (more commonly known as mailing lists) are one of the
        <application>SourceForge.net</application> services <indexterm>
            <primary>SourceForge</primary>

            <secondary>Keeping up to date</secondary>
          </indexterm> which are employed by
        <application>Debrief</application>. The lists provide an e-mail based
        way of communicating Debrief news and announcements amongst a list of
        interested users. Once an e-mail is sent to the e-mail address of the
        newsgroup (in your case hosted at
        <emphasis>SourceForge.net</emphasis>), it is automatically forwarded
        to all of registered news-list members. A separate e-mail address (the
        news-list title with a <emphasis>request</emphasis> suffix) provides
        management support to the newsgroup.</para>

        <para>As of summer 2001 there are around a dozen users registered on
        the news list, with the <application>Debrief</application> <link
        linkend="project_manager">Project Manager</link> publishing news each
        time a new version of <application>Debrief</application> is made
        available for download.</para>

        <para>There is currently just one mailing list related to
        <application>Debrief</application>, this is named
        <application>debrief-news</application>. This is quite a low volume
        mailing list, with at the most two messages a month; so there's no
        need to worry about getting snowed-under with news items.</para>

        <sect2 xml:id="debrief_news_list">
          <title>Joining</title>

          <para>To join to the <application>Debrief</application> news list,
          send an e-mail to
          <email>debrief-news-request@lists.sourceforge.net</email> with the
          single word <emphasis>subscribe</emphasis> in the subject. You will
          receive a reply asking you to confirm that you wish to subscribe.
          This e-mail is to validate your e-mail address, and should be
          retained since it contains the password you must use to
          unsubscribe.</para>
        </sect2>

        <sect2 xml:id="submitting_to_news_list">
          <title>Submitting</title>

          <para>Once you have joined the list, you are then entitled to submit
          news, should you wish to. So, if you have identified or fixed a
          significant bug, or have contributed significant content to the
          <application>Debrief</application> web-site, please feel free to
          e-mail the news list directly. Just send an e-mail to
          <email>debrief-news@lists.sourceforge.net</email></para>
        </sect2>

        <sect2 xml:id="leave_news_list">
          <title>Leaving</title>

          <para>If you wish to leave the news list, just send an e-mail to
          <email>debrief-news@lists.sourceforge.net</email> with the single
          word <emphasis>unsubscribe</emphasis> in the subject line followed
          by the password you were provided with at your initial subscription.
          If you have lost your password please make a request to the <link
          linkend="project_manager">Project Manager</link> to be
          unsubscribed.</para>
        </sect2>

        <sect2 xml:id="web_based_news">
          <title>Web-based news-list management</title>

          <para>In addition to these e-mail based methods of interacting with
          the <application>Debrief</application> news list, there is a
          web-page based interface at: <link
          xlink:href="http://lists.sourceforge.net/lists/listinfo/debrief-news"
          xmlns:xlink="http://www.w3.org/1999/xlink">http://lists.sourceforge.net/lists/listinfo/debrief-news</link>.
          From this page you can subscribe, unsubscribe, and configure options
          for how the news messages are sent to you.</para>
        </sect2>
      </sect1>

      <sect1 xml:id="debrief_at_mwc">
        <title>Debrief at the Maritime Warfare Centre</title>

        <para>This section provides guidance on maintenance of Debrief
        installations for users on the Maritime Warfare Centre network.</para>

        <sect2 xml:id="install_debrief">
          <title>Installing Debrief</title>

          <para>The IT Support department should be approached to conduct
          fresh <application>Debrief</application> installations. The most
          up-to-date Debrief installer is located at
          <filename>//Needles/Operational
          Analysis/collaborative/application/debrief/InstallDebrief.exe</filename>.</para>
        </sect2>

        <sect2 xml:id="debrief_up_to_date">
          <title>Keeping your Debrief installation up to date</title>

          <para>The development of the Debrief application is ongoing
          throughout the year. Occasionally particular users have new
          requirements, or bugs are found. Normally, only users working in
          related areas are informed about new features or minor bugs that
          only occur when performing that particular type of analysis. Where
          new features relate to users across MWC, or where a significant bug
          is fixed, e-mails are sent out to the <link
          linkend="debrief_news">Debrief user mailing list</link>.</para>

          <sidebar>
            <formalpara>
              <title>Debrief Users mailing list</title>

              <para>On the MWC network mailing lists have been set up to allow
              e-mails to quickly be addressed to a group of users. One such
              list is the <emphasis>Debrief Users</emphasis> list. When you
              start using <application>Debrief</application> it is worth
              contacting IT Support to have your name added to the list - then
              you know you will be informed of any significant changes to
              Debrief.</para>
            </formalpara>
          </sidebar>

          <para>Don't worry about always having the newest version of
          <application>Debrief</application>. Most software changes only apply
          to a small portion of the software and don't justify the upgrade
          effort. If, however, a Debrief fix applies specifically to your
          work, you should follow these steps to upgrade your Debrief
          installation:<orderedlist xml:id="search_software_updates_internet">
              <title>Searching for software updates</title>

              <listitem>
                <para>Select <guimenu>Help</guimenu>/<guimenu>Software
                Updates</guimenu>/<guimenu>Find and install</guimenu>.</para>
              </listitem>

              <listitem>
                <para>Select <guibutton>Search for updates of the currently
                installed features</guibutton>, then
                <guibutton>Next</guibutton>.</para>
              </listitem>

              <listitem>
                <para>Follow the instructions provided to view what updates
                are available, select any relevant ones (though you can't
                really go wrong in retrieving all of them), and install them.
                Easy.</para>
              </listitem>
            </orderedlist></para>

          <para>Now, Debrief may now have found any updates. Hey, maybe there
          weren't any. But maybe Debrief's not looking in the right place. If
          no updates are found, follow these steps to ensure the MWC download
          server is configured:<orderedlist>
              <listitem>
                <para>Select <guimenu>Help</guimenu>/<guimenu>Software
                Updates</guimenu>/<guimenu>Find and install</guimenu>.</para>
              </listitem>

              <listitem>
                <para>Select <guibutton>Search for new features to
                install</guibutton></para>
              </listitem>

              <listitem>
                <para>You will see a list of download sites. If there isn't
                one with a name you associate with MWC, select <guibutton>New
                Local Site...</guibutton>.</para>
              </listitem>

              <listitem>
                <para>A file dialog will open. From it, enter
                <filename>Network Neighbourhood </filename>, and navigate to
                <filename>//Needles/Operational
                Analysis/collaborative/applications/Debrief/Updates</filename>.
                Then press <guibutton>OK</guibutton> and name the local site
                as <userinput>MWC Updates</userinput>. Accept this. Now, from
                the list of update sites, ensure <userinput>MWC
                Updates</userinput> is ticked, but not the others (since they
                rely on an internet connection).</para>
              </listitem>

              <listitem>
                <para>Now you should be able to perform the <link
                linkend="search_software_updates">search for software
                updates</link> again.</para>
              </listitem>
            </orderedlist></para>
        </sect2>
      </sect1>

      <sect1 xml:id="debrief_on_internet">
        <title>Debrief across the Internet</title>

        <para>This section provides guidance on maintenance of Debrief
        installations for users with world wide web (Internet) access.</para>

        <sect2 xml:id="more_install_debrief">
          <title>Installing Debrief</title>

          <para>Debrief can be downloaded via the downloads page at the
          Debrief site (<link xlink:href="http://sf.net/projects/debrief"
          xmlns:xlink="http://www.w3.org/1999/xlink">http://sf.net/projects/debrief</link>).
          Be warned, because the full install contains the Etopo data set it
          is well over 150 Mb in size. If you aren't able to perform such a
          download, or you need a formal copy for your IS/IT department please
          send an e-mail justification to the <link
          linkend="project_manager">project manager</link>, and a CD-based
          copy will be forwarded to you via snail mail.</para>
        </sect2>

        <sect2 xml:id="debrief_install_up_to_date">
          <title>Keeping your Debrief installation up to date</title>

          <para>The development of the Debrief application is ongoing
          throughout the year. Occasionally particular users have new
          requirements, or bugs are found. Normally, only users working in
          related areas are informed about new features or minor bugs that
          only occur when performing that particular type of analysis. Where
          new features relate to a wide body of users , or where a significant
          bug is fixed, e-mails are sent out to the Debrief user mailing
          list.</para>

          <para>Don't worry about always having the newest version of
          <application>Debrief</application>. Most software changes only apply
          to a small portion of the software and don't justify the upgrade
          effort. If, however, a Debrief fix applies specifically to your
          work, you should follow these steps to upgrade your Debrief
          installation:<orderedlist xml:id="search_software_updates">
              <title>Searching for software updates</title>

              <listitem>
                <para>Select <guimenu>Help</guimenu>/<guimenu>Software
                Updates</guimenu>/<guimenu>Find and install</guimenu>.</para>
              </listitem>

              <listitem>
                <para>Select <guibutton>Search for updates of the currently
                installed features</guibutton>, then
                <guibutton>Next</guibutton>.</para>
              </listitem>

              <listitem>
                <para>Follow the instructions provided to view what updates
                are available, select any relevant ones (though you can't
                really go wrong in retrieving all of them), and install them.
                Easy.</para>
              </listitem>
            </orderedlist></para>

          <para>Now, Debrief may now have found any updates. Hey, maybe there
          weren't any. But maybe Debrief's not looking in the right place. If
          no updates are found, follow these steps to ensure the Debrief
          update server is configured:<orderedlist>
              <listitem>
                <para>Select <guimenu>Help</guimenu>/<guimenu>Software
                Updates</guimenu>/<guimenu>Find and install</guimenu>.</para>
              </listitem>

              <listitem>
                <para>Select <guibutton>Search for new features to
                install</guibutton></para>
              </listitem>

              <listitem>
                <para>You will see a list of download sites. If there isn't
                one with a name you associate with Debrief, select
                <guibutton>New Remote Site...</guibutton>.</para>
              </listitem>

              <listitem>
                <para>A file dialog will open. In it, enter <filename>Debrief
                update site</filename> for the Name, and
                <filename>http://debrief.sourceforge.net/eclipse/</filename>
                for the URL. Now, from the list of update sites, ensure
                <userinput>Debrief update site</userinput> is ticked, but not
                the others (since they rely on an internet connection).</para>
              </listitem>

              <listitem>
                <para>Now you should be able to perform the <link
                linkend="search_software_updates">search for software
                updates</link> again.</para>
              </listitem>
            </orderedlist></para>
        </sect2>
      </sect1>

      <sect1 xml:id="debrief_feedback">
        <title>Providing feedback</title>

        <para>In addition to the <application>Debrief</application> web-site,
        the <application>Debrief</application> project makes use of
        <application>SourceForge</application> and
        <application>Assembla</application> , online development web-sites
        <indexterm>
            <primary>SourceForge</primary>

            <secondary>Providing Feedback</secondary>
          </indexterm> that provide us with bug-tracking, file download
        support, and news groups. Since 2008, Assembla
        (<uri>http://www.assembla.com/spaces/Debrief</uri>) has taken over the
        bug-reporting and feature requests, with SourceForge just responsible
        for downloads.</para>

        <figure xml:id="sf.net_home_page">
          <title>Debrief's home page at Assembla</title>

          <screenshot>
            <mediaobject>
              <imageobject>
                <imagedata fileref="figures/assembla_home.png" width="100%"></imagedata>
              </imageobject>
            </mediaobject>
          </screenshot>
        </figure>

        <para>From the screenshot of the Assembla home page for
        <application>Debrief</application> you can see a list of the services
        it provides, ranging from discussion forums, through bug and
        feature-request trackers</para>

        <sect2 xml:id="debrief_bugs">
          <title>Reporting bugs</title>

          <para><indexterm><primary>Bugs</primary><secondary>Submitting</secondary></indexterm> To report a bug, or a feature which you believe is behaving
          incorrectly, you must first register at Assembla. You can either
          create a new account, or login using a number of existing login
          authorities (including Google and Yahoo). Once registered, you can
          click on the 'New Ticket' button, and submit a request for a bug-fix
          or new features. The items are then tracked, and provided an e-mail
          address was provided, the submitter is kept informed of the progress
          of the submission.</para>

          <para>The following screenshot shows the form used to submit bugs.
          Don't worry if you're not quite sure if the bug is actually intended
          behaviour, or if you're unsure whether a proposed new feature would
          'make the cut'. Once your request is emailed it's recorded on the
          system and an informed debate/discussion can follow. This ensures
          requests don't fall through the cracks.</para>

          <para><figure xml:id="bug_reporting_page">
              <title>Assembla Bug Reporting page</title>

              <screenshot>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="figures/assembla_bugs.png"
                               width="100%"></imagedata>
                  </imageobject>
                </mediaobject>
              </screenshot>
            </figure></para>

          <para>Once you have submitted the report, you should receive an
          e-mail confirmation of the bug-report, followed by an e-mail from
          the <link linkend="project_manager">Project Manager</link>, normally
          containing a time-frame for resolution of the bug.</para>
        </sect2>

        <sect2 xml:id="debrief_features">
          <title>Requesting new features</title>

          <para>The procedure for <indexterm>
              <primary>SourceForge</primary>

              <secondary>Requesting new features</secondary>
            </indexterm>requesting new features is much the same as for <link
          linkend="debrief_bugs">Reporting Bugs</link>, described above. The
          time-frame for resolution of feature-requests is normally larger
          than for bugs, but if maintenance effort is being performed in a
          related area of <application>Debrief</application>, and the <link
          linkend="project_sponsor">Project Sponsor</link> is supportive, then
          the new feature should get added quite quickly.</para>
        </sect2>
      </sect1>
    </chapter>

    <chapter xml:id="maintainers">
      <title>Debrief maintainer's guide</title>

      <sect1 xml:id="more_maintainers_guidance">
        <title>Installation guidance</title>

        <sect2 xml:id="more_install_guidance">
          <title>System requirements</title>

          <para><table xml:id="debrief_reqts">
              <title>Requirements for
              <application>Debrief</application></title>

              <tgroup cols="3">
                <thead>
                  <row>
                    <entry><para>Requirement</para></entry>

                    <entry><para>Minimum</para></entry>

                    <entry><para>Recommended</para></entry>
                  </row>
                </thead>

                <tbody>
                  <row>
                    <entry><para>Processor</para></entry>

                    <entry><para>800 MHz</para></entry>

                    <entry><para>1400 MHz</para></entry>
                  </row>

                  <row>
                    <entry><para>Memory</para></entry>

                    <entry><para>256 Mb</para></entry>

                    <entry><para>1024 Mb</para></entry>
                  </row>

                  <row>
                    <entry><para>Java Virtual Machine</para></entry>

                    <entry><para>JVM 1.5</para></entry>

                    <entry><para>As new as possible. JVM 1.5 includes
                    significant performance improvements, particularly in the
                    list processing used extensively within
                    Debrief</para></entry>
                  </row>

                  <row>
                    <entry><para>Java 3D Libraries (required for viewing
                    Debrief plots in 3D <footnote>
                        <para>To interactively view Debrief plots in 3
                        dimensions the Java 3d runtime files and libraries
                        must be installed on the machine. These libraries are
                        a free download from the Java website.</para>
                      </footnote> )</para></entry>

                    <entry>Java 3D 1.3</entry>

                    <entry><para>Java 3D 1.3</para></entry>
                  </row>

                  <row>
                    <entry><para>XML Libraries</para></entry>

                    <entry><para>SAX and DOM support (through the enclosed
                    jaxp.jar and parser.jar libraries)</para></entry>

                    <entry><para></para></entry>
                  </row>

                  <row>
                    <entry><para>OpenMap libraries (used for plotting NIMA's
                    Vector Map data)</para></entry>

                    <entry><para>4.2.1 (through the enclosed openmap.jar
                    library)</para></entry>

                    <entry><para></para></entry>
                  </row>
                </tbody>
              </tgroup>
            </table></para>
        </sect2>

        <sect2 xml:id="RightClickIntegration">
          <title>Implementing 'open with' support for DebriefNG</title>

          <para>Since Winter 2010, DebriefNG can be opened by <indexterm>
              <primary>Right-clicking</primary>
            </indexterm> on a Debrief data file (rep <xref
          linkend="replay_file_format" /> or xml .<xref
          linkend="debrief_file_format" />). But, first DebriefNG must be
          associated with files of that file-type, via Windows Explorer. Do
          this as follows<footnote>
              <para>Note, across the range of versions of MS Windows a variety
              of user interface phrases exist. The steps in this process
              contain the text that will loosely match that which you'll
              see</para>
            </footnote>:<orderedlist>
              <listitem>
                <para>Open Windows Explorer</para>
              </listitem>

              <listitem>
                <para>Navigate to a Debrief <filename>REP</filename>
                file</para>
              </listitem>

              <listitem>
                <para>Right-click on the file and select 'Open With'</para>
              </listitem>

              <listitem>
                <para>Now browse to the DebriefNG.exe executable, typically
                contained in the <filename>c:\DebriefNG</filename>. You may
                also wish to select '<guilabel>Always use this
                application</guilabel>'.</para>
              </listitem>

              <listitem>
                <para>Now repeat this process for a Debrief
                <filename>XML</filename> file , though there's a chance you
                don't wish to select '<guilabel>Always use this
                application</guilabel>' - xml files are used by a range of
                applications and you may end up in trouble if you're trying to
                open data files for other applications with Debrief.</para>
              </listitem>
            </orderedlist></para>
        </sect2>

        <sect2 xml:id="more_directory_structure">
          <title>Directory structure</title>

          <para>Debrief installs itself into a <filename>Debrief NG</filename>
          folder in the top level of your C:\ drive.. Within the Debrief NG
          folder you will find the DebriefNG executable in the top-level,
          together with some additional <filename>dll</filename> files used
          for optimised graphics (<filename>gdiplus.dll</filename>), and copy
          to clipboard (<filename>JavaClipboard.dll</filename>).</para>

          <para>The <filename>jre</filename> folder contains a Java Runtime
          Environment that's been modified by the inclusion of a current set
          of Java3d libraries. In the absence of this <filename>jre</filename>
          folder Debrief (Eclipse) would use the system's default Java
          installation, if there was one. Including it overrides any other
          configured library.</para>

          <para>The <filename>configuration</filename> folder contains details
          of Debrief's initial settings together with the locations of update
          download sites.</para>

          <para>The <filename>features</filename> and
          <filename>plugins</filename> folders include details of what Eclipse
          plugins are present (where each feature is actually a group of
          plugins), together with the plugins themselves. The
          <filename>workspace</filename> folder is a default workspace
          provided for new users. It contains current work projects together
          with a large volume of metadata representing change history, screen
          layout and user preferences.</para>
        </sect2>

        <sect2 xml:id="mulit_user">
          <title>Multi-user Debrief installation</title>

          <para>The conventional way of installing Debrief is for each user to
          have their own copy, maintaining their own sets of plugins and
          updates (as above). There is an alternate installation scenario,
          however - for all users to share a common Debrief installation. An
          advantage of this scenario is that software updates only need to be
          performed once, at the central location. By default, however, shared
          installations are troublesome for Debrief - since all users will be
          looking at a single set of settings - so administrator participation
          is necessary.</para>

          <para>Whilst a number of theoretical solutions exist for this
          problem, the most reliable solution to emerge is to force Debrief NG
          to use the workspace in the users own login directory (since each
          user has a unique login directory). This also overcomes the
          challenge of new users having to select a workspace before they know
          what a workspace is.</para>

          <para>Thus, the Debrief shortcut (.ini file) has been modified to
          explicitly indicate that the workspace is in the a folder in the
          user login area:<screen>-data
@user.home/.DebriefNG</screen>The '.' character before the DebriefNG folder
          name follows a convention that is normally sufficient to make the
          operating system make the folder hidden by default.<tip>
              <para>When users are upgrading from older versions of DebriefNG,
              the application will ignore the last workspace location, and
              load a new, blank workspace from the new user directory. If the
              user now closes Debrief the workspace data can be copied from
              the old location into the new location, which will get read when
              the application re-opens.</para>
            </tip></para>
        </sect2>

        <sect2 xml:id="CentralUpdates">
          <title>Centralised software updates</title>

          <para>In the Autumn 2009 updates Debrief adopted the Eclipse p2
          <emphasis>update</emphasis> mechanism. With this update came support
          for centralised updates. Centralised updates allow updated Debrief
          components to be placed at a central location on shared network
          storage, with individual Debrief installations automatically
          updating from it.</para>

          <para>Start by locating a central shared folder, and creating a
          <emphasis>Repository</emphasis> folder in it. This is where your
          Debrief maintainer will unzip Debrief updates. Next, you must tell
          the individual Debrief installations where the repository is. Do
          this from the <guilabel>Preferences</guilabel>
          <guilabel>Install/Update</guilabel> <guilabel>Available Software
          Sites</guilabel> dialog:<figure xml:id="ReposLocation">
              <title>Repository location dialog</title>

              <screenshot>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="figures/ReposLocation.png"
                               width="100%"></imagedata>
                  </imageobject>
                </mediaobject>
              </screenshot>
            </figure></para>

          <para>Then, to update a Debrief installation select <emphasis>Check
          for updates</emphasis> from the <emphasis>Help</emphasis> menu.
          Note, the <emphasis>Install/Updates</emphasis> section of Debrief
          preferences also includes options for automatic software
          updates.</para>
        </sect2>

        <sect2 xml:id="starting_debrief">
          <title>Starting the program</title>

          <para>The shortcut placed on the <guimenu>Start|Program
          Files|Debrief NG</guimenu> menu actually calls the
          <filename>DebriefNG.exe</filename> file found in the startup
          directory. This application triggers the startup of Debrief, passing
          to it the parameters contained in the
          <filename>DebriefNG.ini</filename> file. This file contains options
          to select the initial perspective, the memory allocation, and
          additional files to include on the classpath (3d files in our
          case).</para>
        </sect2>

        <sect2 xml:id="UseOfEnglishLocale">
          <title>Use of English locale</title>

          <para>Note that Debrief fails when on an machine set to a
          non-English locale, such as French(Canada). The application cannot
          read data-files correctly, nor can it populate screen editors. The
          workaround to this problem is to explicitly direct Debrief to
          startup using an English locale. Do this by launching Debrief with
          the "-nl en" command parameter. This can be performed either by
          modifying the shortcut used to start Debrief, or by adding the
          command parameter to the <filename>Debrief.ini</filename>
          configuration file (though this will have to be re-performed after
          each Debrief update).</para>
        </sect2>
      </sect1>

      <sect1 xml:id="fault_diagnosis">
        <title>Fault-diagnosis instructions</title>

        <sect2 xml:id="more_fault_diagnosis">
          <title>How-to</title>

          <para>With the adoption of the Eclipse framework,
          <application>Debrief</application> enjoys the benefits of the
          Eclipse configuration and logging engine. Debrief uses this for
          information, warning, and error reporting.</para>

          <para>Details of an individual Debrief NG installation can be
          obtained by selecting <guimenuitem>About Debrief NG</guimenuitem>
          from the <guimenu>Help</guimenu> menu. From the dialog that opens,
          select <guibutton>Installation Details</guibutton>. This will open a
          text dialog providing the following information:<itemizedlist>
              <listitem>
                <para>Date stamp</para>
              </listitem>

              <listitem>
                <para>System properties (about the Java and OS
                environments)</para>
              </listitem>

              <listitem>
                <para>Plug-in registry (plug-ins and fragments - ids,
                versions, and names)</para>
              </listitem>

              <listitem>
                <para>Update manager log</para>
              </listitem>

              <listitem>
                <para>Current error log contents</para>
              </listitem>
            </itemizedlist></para>

          <para>In addition to these configuration details is a button to
          <guibutton>View Error Log</guibutton>. The Error Log is a continuous
          stream of comments recorded by Debrief - typically comments that are
          not of value to a typical user under normal usage. The log itself is
          called <filename>.log</filename> and is located in the <filename
          class="directory">workspace/metadata</filename> folder within your
          Workspace (initially, this is within your Debrief NG installation
          directory).</para>

          <para>Th error log may be examined for hints to the problem
          occurring. The error trace may be viewed in a text editor, and may
          be forwarded back to the <link linkend="project_manager">Project
          Manager</link> via post/e-mail/fax as applicable. The file does not
          contain any details of the data being edited, but the file may still
          be inspected before transmission</para>

          <para>If these error messages do not provide any insight to the
          problem, you are left with the normal diagnosis steps as follows:
          <itemizedlist>
              <listitem>
                <para>Try to run another Java application on the machine, to
                check that Java is not corrupted</para>
              </listitem>

              <listitem>
                <para>If Java is ok then, <itemizedlist>
                    <listitem>
                      <para>Check that Debrief can open and process the
                      "sample" files included in the installation: boat1.rep
                      and boat2.rep.</para>
                    </listitem>

                    <listitem>
                      <para>If Debrief can process these files, but not the
                      current ones then <itemizedlist>
                          <listitem>
                            <para>Try to re-install the Debrief application from
                            'save' disks to check that the sources are not
                            corrupted</para>
                          </listitem>

                          <listitem>
                            <para>If at this point the error is still occurring
                            then you will have to resort to reading as much of
                            this Help guidance as practical, and then contacting
                            the <link linkend="project_manager">Project
                            Manager</link></para>
                          </listitem>
                        </itemizedlist></para>
                    </listitem>
                  </itemizedlist></para>
              </listitem>
            </itemizedlist></para>
        </sect2>
      </sect1>

      <sect1 xml:id="debrief_props">
        <title xml:id="debrief_props_title">Debrief properties</title>

        <sect2 xml:id="more_deb_props">
          <title>Introduction</title>

          <para>Whilst Debrief used to use a dedicated settings file, the
          settings have now been incorporated into the general framework of
          the application - with context sensitive help available where
          applicable.</para>
        </sect2>
      </sect1>
    </chapter>
  </part>

  <!-- ********************************************************************** -->

  <!-- ********************************************************************** -->

  <!--   Reference                                                           -->

  <!-- ********************************************************************** -->

  <!-- ********************************************************************** -->

  <part xml:id="reference_guide">
    <title>Reference Guide</title>

    <partintro xml:id="ref_guide_intro">
      <para>If the tutorial hasn't provided you with all of the answers you
      need, just have a look at the pages here in the Reference Guide.</para>
    </partintro>

    <chapter xml:id="reference">
      <title>Debrief file formats</title>

      <sect1 xml:id="replay_file_format">
        <title>Replay file format</title>

        <sect2 xml:id="replay_track_format">
          <title>Track data</title>

          <para><application>Debrief</application> accepts files in the
          <indexterm>
              <primary>Replay file format</primary>
            </indexterm><indexterm>
              <primary>File Format</primary>

              <secondary>Replay</secondary>
            </indexterm> <application>Replay</application> datafile format.
          This format uses an 80 character string containing data/time, vessel
          name, position, heading, depth and speed. More than one vessel track
          can be stored in each file. The gaps between the data fields can be
          any whitespace characters, that is any number of spaces or tabs, but
          there must be a value for each data field. <note>
              <para>Whilst file formats recorded here are shown against an 80
              character index marker - the fields can be of any width - the
              data is broken down using delimiters, not fixed field
              widths.</para>
            </note></para>

          <para>The file-naming convention for files in the <glossterm
          linkend="g_replay">Replay</glossterm> format is to have a
          <filename>.REP</filename> suffix.</para>

          <para>Through an extension to the format, annotation data can also
          be accepted. The annotation data format is described below. Whilst
          annotation and track data may be stored in single file, it is
          recommended that they are stored in separate files, to ease reading
          and plotting track-data only.</para>

          <para>The standard data format is as follows:<screen>            <markup>
123456789012345678901234567890123456789012345678901234567890123456789012
YYMMDD HHMMSS.SSS XXXXXX SY DD MM SS.SS H DDD MM SS.SS H CCC.C SS.S DDD
            </markup> </screen>or since Autumn 2004 multi-word track names can
          be entered by enclosing them in double-quotation marks (") and
          4-figure year values are supported: <screen
          xml:id="quoted_track_names">            <markup>
12345678901234567890123456789012345678901234567890123456789012345678901234567890
YYYYMMDD HHMMSS.SSS "XYX XYX XYX" SY DD MM SS.SS H DDD MM SS.SS H CCC.C SS.S DDD
            </markup>      </screen></para>

          <para>The field descriptions are: <table frame="all"
              xml:id="debrief_position_structure">
              <title>Fields in Debrief position entry</title>

              <tgroup cols="2">
                <colspec colname="col01" colnum="1" colwidth="1.00*" />

                <colspec colname="col1" colnum="2" colwidth="4.5*" />

                <thead>
                  <row>
                    <entry><para>Field number</para></entry>

                    <entry><para>Description</para></entry>
                  </row>
                </thead>

                <tbody>
                  <row>
                    <entry><para>1</para></entry>

                    <entry><para>Date, either 2 of 4 figure date, followed by
                    month then date</para></entry>
                  </row>

                  <row>
                    <entry><para>2</para></entry>

                    <entry><para>Time</para></entry>
                  </row>

                  <row>
                    <entry><para>3</para></entry>

                    <entry><para>Vessel Name - either as single, unquoted
                    word, or as a multi-word phrase enclosed in quotation
                    marks.</para></entry>
                  </row>

                  <row>
                    <entry><para>4</para></entry>

                    <entry><para>Symbology (see below)</para></entry>
                  </row>

                  <row>
                    <entry><para>5</para></entry>

                    <entry><para>Latitude Degrees (Debrief is able to handle
                    decimal degrees - provide zeros for mins and
                    secs)</para></entry>
                  </row>

                  <row>
                    <entry><para>6</para></entry>

                    <entry><para>Latitude Minutes (Debrief is able to handle
                    decimal mins - provide zeros for secs)</para></entry>
                  </row>

                  <row>
                    <entry><para>7</para></entry>

                    <entry><para>Latitude Seconds</para></entry>
                  </row>

                  <row>
                    <entry><para>8</para></entry>

                    <entry><para>Latitude Hemisphere</para></entry>
                  </row>

                  <row>
                    <entry><para>9</para></entry>

                    <entry><para>Longitude Degrees (Debrief is able to handle
                    decimal degrees - provide zeros for mins and
                    secs)</para></entry>
                  </row>

                  <row>
                    <entry><para>10</para></entry>

                    <entry><para>Longitude Minutes (Debrief is able to handle
                    decimal mins - provide zeros for secs)</para></entry>
                  </row>

                  <row>
                    <entry><para>11</para></entry>

                    <entry><para>Longitude Seconds</para></entry>
                  </row>

                  <row>
                    <entry><para>12</para></entry>

                    <entry><para>Longitude Hemisphere</para></entry>
                  </row>

                  <row>
                    <entry><para>13</para></entry>

                    <entry><para>Heading (0..359.9 degrees)</para></entry>
                  </row>

                  <row>
                    <entry><simpara>14</simpara></entry>

                    <entry><simpara>Speed (knots)</simpara></entry>
                  </row>

                  <row>
                    <entry><para>13</para></entry>

                    <entry><para>Depth (metres) <footnote>
                        <para>Where depth data is not available, the IEE
                        symbol NaN (Not a Number) may be used.
                        <application>Debrief</application> reflects the
                        absence of this data where applicable.</para>
                      </footnote></para></entry>
                  </row>
                </tbody>
              </tgroup>
            </table></para>
        </sect2>

        <sect2 xml:id="replay_symbology">
          <title>Symbology attributes</title>

          <para><indexterm><primary>Symbology data</primary></indexterm>The symbology data field describes the representation required
          for this vessel track, specifying the colour of track to use and
          symbol-type to represent that vehicle. The Symbol style read in is
          used when tracks are to be shown by using symbol (in 2D or 3D), as
          described in <xref linkend="intro_to_sym_sets" /> . <table
              xml:id="debrief_Sym">
              <title>Debrief symbology data fields</title>

              <tgroup cols="4">
                <colspec colname="c1" />

                <colspec colname="c2" />

                <colspec colname="c3" />

                <colspec colname="c4" />

                <thead>
                  <row>
                    <entry nameend="c2" namest="c1"><para>Symbol
                    Style</para></entry>

                    <entry nameend="c4"
                    namest="c3"><para>Colour</para></entry>
                  </row>
                </thead>

                <tbody>
                  <row>
                    <entry><para>A</para></entry>

                    <entry><para>Aircraft</para></entry>

                    <entry><para>@</para></entry>

                    <entry><para>White</para></entry>
                  </row>

                  <row>
                    <entry><para>C</para></entry>

                    <entry><para>Carrier</para></entry>

                    <entry><para>A</para></entry>

                    <entry><para>Blue</para></entry>
                  </row>

                  <row>
                    <entry><para>D</para></entry>

                    <entry><para>Destroyer</para></entry>

                    <entry><para>B</para></entry>

                    <entry><para>Green</para></entry>
                  </row>

                  <row>
                    <entry><para>F</para></entry>

                    <entry><para>Frigate</para></entry>

                    <entry><para>C</para></entry>

                    <entry><para>Red</para></entry>
                  </row>

                  <row>
                    <entry><para>H</para></entry>

                    <entry><para>Helicopter</para></entry>

                    <entry><para>D</para></entry>

                    <entry><para>Yellow</para></entry>
                  </row>

                  <row>
                    <entry><para>M</para></entry>

                    <entry><para>Merchant</para></entry>

                    <entry><para>E</para></entry>

                    <entry><para>Purple</para></entry>
                  </row>

                  <row>
                    <entry><para>N</para></entry>

                    <entry><para>Minesweeper</para></entry>

                    <entry><para>F</para></entry>

                    <entry><para>Orange</para></entry>
                  </row>

                  <row>
                    <entry><para>P</para></entry>

                    <entry><para>Torpedo</para></entry>

                    <entry><para>G</para></entry>

                    <entry><para>Brown</para></entry>
                  </row>

                  <row>
                    <entry><para>R</para></entry>

                    <entry><para>Troop Carrier</para></entry>

                    <entry><para>H</para></entry>

                    <entry><para>Cyan</para></entry>
                  </row>

                  <row>
                    <entry><para>S</para></entry>

                    <entry><para>Submarine</para></entry>

                    <entry><para>I</para></entry>

                    <entry><para>Light Green</para></entry>
                  </row>

                  <row>
                    <entry><para>T</para></entry>

                    <entry><para>TA Frigate</para></entry>

                    <entry><para>J</para></entry>

                    <entry><para>Gold</para></entry>
                  </row>

                  <row>
                    <entry><para>U</para></entry>

                    <entry><para>Cruiser</para></entry>

                    <entry><para>K</para></entry>

                    <entry><para>Pink</para></entry>
                  </row>

                  <row>
                    <entry><para>V</para></entry>

                    <entry><para>Fishing Vessel</para></entry>

                    <entry></entry>

                    <entry></entry>
                  </row>

                  <row>
                    <entry><para>@</para></entry>

                    <entry><para>Unknown</para></entry>

                    <entry></entry>

                    <entry></entry>
                  </row>
                </tbody>
              </tgroup>
            </table><note>
              <para>Note that historically only the first color style read in
              from file for a particular track was implemented, this has been
              changed in order that the colour value is used for each position
              read in.</para>
            </note></para>
        </sect2>

        <sect2 xml:id="replay_annotation_format">
          <title>Annotation Data</title>

          <para>In addition to the positional vessel track data, annotations
          can also be added. Each annotation is placed on a single line in a
          replay file, each line beginning with the comment marker; a
          semi-colon ';'.To put a comment on a line, begin with two
          semi-colons.</para>

          <para><indexterm>
            <primary>Narrative Data</primary>
            
            <secondary>File format</secondary>
          </indexterm>The format for the different types of annotations is: <screen
          width="70">            <markup>
123456789012345678901234567890123456789012345678901234567890123456789
0123456789012345678901234567890 

;LINE: @@ DD MM SS H DDD MM SS.S H DD MM SS.S H DDD MM SS H XX.XXX 
;; symb, start lat &amp; long, end lat &amp; long, text label (optional) 

;TEXT: @@ DD MM SS H DDD MM SS H XX..XX 
;; symb, lat &amp; long, text 

;NARRATIVE:  YYMMDD HHMMSS  TTT.TTT  XX..XX 
;; dtg, track name, narrative entry 

;TIMETEXT: @@ YYMMDD HHMMSS DD MM SS.S H DDD MM SS.S H XX..XX 
;; symb, date, lat &amp; long, text 

;PERIODTEXT: @@ YYMMDD HHMMSS YYMMDD HHMMSS DD MM SS.S H DDD MM SS.S H 
DDD XX..XX 
;; symb, start date, end date, lat &amp; long, Depth(optional) text 

;GRID: @@ DD MM SS.S H DDD MM SS.S H MM.MM MM.MM XX..XX 
;; symb, centre lat &amp; long (N13) lat increment, long increment, text 

;RECT: @@ DD MM SS.S H DDD MM SS.S H DDMMSS H DDDMMSS H 
;; symb, tl corner lat &amp; long, br corner lat &amp; long 

;SGSAGEOG: @@ YYMMDD HHMMSS YYMMDD HHMMSS DD MM SS.S H DDD MM SS.S H 
DD MM SS.S H DDD MM SS.S H XX..XX 
;; symb, start date, end date, tl lat &amp; long, br lat &amp; long, 
text label (1 word) 

;SGSAGRID: @@ YYMMDD HHMMSS YYMMDD HHMMSS AA NN AA NN XX..XX 
;; symb, start date, end date, tl corner, br corner, text label (1 word) 

;WHEEL: @@ YYMMDD HHMMSS DD MM SS.S H DDD MM SS.S H YYY YYY XX.XX
;; symb, centre date, centre lat, centre long, inner radius (yards), 
outer radius (yards), label

;CIRCLE: @@ DD MM SS.S H DDD MM SS.S H YYY XX.XX 
;; symb, centre lat, centre long, radius (yards), label 

;ELLIPSE: BD YYMMDD HHMMSS DD MM SS.SS H DD MM SS.SS H CCC XXXX YYYY xx.xx 
;; symb, date, time, lat, long, orientation, maxima (yards), 
minima (yards), label 

;BRG: BD YYMMDD HHMMSS DD MM SS.SS H DD MM SS.SS H CCC XXXX xx.xx 
;; symb, date, time, lat, long, orientation, length (yards), label (one word) 

;SENSOR: YYMMDD HHMMSS.SSS AAAAAA @@ DD MM SS.SS H DDD MM SS.SS H 
BBB.B RRRR yy..yy xx..xx 
;; date, ownship name, symbology, sensor lat/long (or the single word NULL), 
bearing (degs), range(yds), sensor name, label (to end of line)

;SENSOR2: YYMMDD HHMMSS.SSS AAAAAA @@ DD MM SS.SS H DDD MM SS.SS H BBB.B CCC.C 
FFF.F RRRR yy..yy xx..xx
;; date, ownship name, symbology, sensor lat/long (or the single word NULL), 
bearing (degs) [or the single word NULL], ambigous bearing (degs) [or the 
single word NULL], frequency(Hz) [or the single word NULL],  range(yds) 
[or the single word NULL], sensor name, label (to end of line)

;TMA_POS: YYMMDD HHMMSS.SSS AAAAAA @@ DD MM SS.SS H DDD MM SS.SS H 
TT...TT OOO.O  XXXX YYYY  CCC SSS DDD xx.xx 
;; date, time, ownship name, symbology, tma lat, tma long, track name, 
ellipse orientation (deg from north),  maxima (yds), minima (yds), course, 
speed, depth (m), label string

;TMA_RB: YYMMDD HHMMSS.SSS AAAAAA @@ BBB.B RRR.R TT...TT OOO.O 
XXXX YYYY  CCC SSS DDD xx.xx 
;; date, time, ownship name, symbology, bearing (deg), range (yds), 
track name, elipse orientation (deg from north),  maxima (yds), minima (yds), 
course, speed, depth (m), label string

;NARRATIVE:  YYMMDD HHMMSS  TTT.TTT  XX..XX
 ;; dtg, track name, narrative entry. Note the track name can be multi-word if 
surrounded by quotes (").

;NARRATIVE2:  YYMMDD HHMMSS  TTT.TTT AA..AA XX..XX
 ;; dtg, track name, narrative entry-type, narrative entry.  Note the track name 
and entry type can be multi-word if surrounded by quotes (").
            </markup>   </screen><note>
              <para>Note, when null positions are entered for <glossterm
              linkend="g_sensor">Sensor</glossterm> data, the position is
              taken from the track named in "ownship name". Debrief finds the
              nearest track location equal to or greater than the indicated
              time, and uses this as the sensor lat and long.</para>
            </note><note>
              <para>As with normal positional data, annotation entries which
              use a track/ownship name may now contain multi-word phrases if
              they are enclosed in quotation marks ("), and the year can be
              expressed as 2 or 4 figures.</para>
            </note><note>
              <para>Debrief can handle decimal values for degrees or minutes.
              If you original data is in decimal degrees or degrees plus
              decimal minutes feel free to use these values directly, but
              remember to provide a zero for the unused column(s)</para>
            </note></para>

          <para><glossterm linkend="g_annotation">Annotation</glossterm>
          positions are specified in degrees as in the standard replay file
          format, and symbology representations are as in the above
          tables.</para>
        </sect2>
      </sect1>

      <sect1 xml:id="debrief_file_format">
        <title>Debrief file format</title>

        <sect2 xml:id="more_file_format">
          <title>Introduction</title>

          <para><glossterm linkend="g_xml">XML</glossterm> <indexterm>
              <primary>File Format</primary>

              <secondary>XML</secondary>
            </indexterm> is the Extensible Markup Language. Like its
          predecessor SGML, <glossterm linkend="g_xml">XML</glossterm> is a
          meta-language used to define other languages. The article in the
          <link linkend="intro_xml">Reference Guide</link> taken from MSDN
          gives some background to <glossterm
          linkend="g_xml">XML</glossterm>.</para>
        </sect2>

        <sect2 xml:id="more_adopting_xml">
          <title>Adoption of XML</title>

          <para>An acknowledged shortcoming of the former file format (
          <filename>dpl</filename>) used in <application>Debrief</application>
          was the frequency with which <application> Debrief</application>
          modifications rendered previous <filename>DPL</filename> files
          unreadable. This use of <application>Java</application>
          serialization offered low cost in development terms and was seen as
          essential to store the more complex data used in
          <application>Debrief 2000</application> (such as projections, and
          formatting data).</para>

          <para>The only way to divorce the <application>Debrief</application>
          version from the file format has been to adopt an independent file
          format. This independent format must be structured in order to store
          <application>Debrief</application> data tidily, and the development
          to support it must not be too "expensive". The adoption of
          <application> XML</application> meets both of these criteria = it is
          quite capable of storing <application>Debrief</application> data,
          and there are a number of libraries available which support
          it.</para>

          <para>XML provides additional benefits beyond those described above:
          <itemizedlist>
              <listitem>
                <para>It is human-readable, offering the following benefits:
                <itemizedlist>
                    <listitem>
                      <para>Apparently corrupt data files can be examined in a
                      text editor and repaired</para>
                    </listitem>

                    <listitem>
                      <para>Data files can be edited outside Debrief</para>
                    </listitem>
                  </itemizedlist></para>
              </listitem>

              <listitem>
                <para>It is a world-wide standard independent of Debrief and
                Java <itemizedlist>
                    <listitem>
                      <para>Applications are freely available which support
                      it: Internet Explorer will open XML data files for
                      inspection</para>
                    </listitem>

                    <listitem>
                      <para>When used in conjunction with the <indexterm>
                          <primary>DTD</primary>

                          <secondary>XML Structure</secondary>
                        </indexterm><indexterm>
                          <primary>XML</primary>

                          <secondary>DTD Structure</secondary>
                        </indexterm>Debrief DTD, the IBM Xeena editor provides
                      easy editing/creation of Debrief plots</para>
                    </listitem>

                    <listitem>
                      <para>As more organisations/industries adopt XML, there
                      is increased likelihood that import/export filters will
                      not be required, since XML documents are easily
                      translated between each other.</para>
                    </listitem>
                  </itemizedlist></para>
              </listitem>
            </itemizedlist></para>

          <para>The XML structure adopted within Debrief is as follows:
          <figure xml:id="debrief_xml">
              <title>XML file structure in Debrief</title>

              <mediaobject>
                <imageobject>
                  <imagedata fileref="figures/XMLStructure.gif" width="100%"></imagedata>
                </imageobject>
              </mediaobject>
            </figure></para>
        </sect2>
      </sect1>

      <sect1 xml:id="Section_KML">
        <title xml:id="SectionKML_Title">KML file format</title>

        <sect2 xml:id="IntroToKML">
          <title>Introduction to KML file format</title>

          <para><blockquote>
              <attribution><link xlink:href="http://en.wikipedia.org/wiki/Kml"
              xmlns:xlink="http://www.w3.org/1999/xlink">WikiPedia</link>,
              2010</attribution>

              <para>Keyhole Markup Language (KML) is an XML-based language
              schema for expressing geographic annotation and visualization on
              existing or future Internet-based, two-dimensional maps and
              three-dimensional Earth browsers. KML was developed for use with
              Google Earth, which was originally named Keyhole Earth Viewer.
              It was created by Keyhole, Inc, which was acquired by Google in
              2004. The name "Keyhole" is an homage to the KH reconnaissance
              satellites, the original eye-in-the-sky military reconnaissance
              system first launched in 1976. KML is an international standard
              of the Open Geospatial Consortium. Google Earth was the first
              program able to view and graphically edit KML files, and other
              projects such as Marble have also started to develop KML
              support</para>
            </blockquote></para>

          <para><indexterm><primary>KML/KMZ Files</primary></indexterm> Whilst it has military roots, the KML dialect of XML has
          received wide adoption for the recording and distribution of
          positional information. KML extends the GML standard. KML and GML
          provide a number of ways of recording positional data. This section
          will record the KML dialects that Debrief understands.</para>
        </sect2>

        <sect2 xml:id="KML_LineString">
          <title>LineString KML files</title>

          <para>Handheld GPS systems (including mobile phones) tend to store
          positional data in a <command>Placemark</command> that contains a
          single, lengthy <command>LineString</command> element containing a
          series of long, lat, altitude elements - devoid of time stamps.
          Debrief makes the following assumptions regarding this
          format:<orderedlist>
              <listitem>
                <para>If altitude data is missing, its comma separator will
                still be present</para>
              </listitem>

              <listitem>
                <para>The filename will be of the form w20090802164801.kml,
                where the digits represent year, month, day, hour, minute,
                second</para>
              </listitem>

              <listitem>
                <para>The data items will have been recorded at one second
                intervals</para>
              </listitem>

              <listitem>
                <para>The filename (without suffix) is used as the track
                identifier</para>
              </listitem>
            </orderedlist></para>
        </sect2>

        <sect2 xml:id="KML_MultiGeometry">
          <title>MultiGeometry KML files</title>

          <para>More capable recording systems tend to store positional data
          in a more refined, time-stamped format - using series of
          <command>Placemark</command> entries - each containing a
          <command>MultiGeometry</command> record. Additionally, these more
          complex files are able to represent data for a number of different
          vehicles. Debrief makes the following assumptions regarding this
          file format:<orderedlist>
              <listitem>
                <para>Only <command>Placemark</command> elements that contain
                a <command>MultiGeometry</command> element are treated as
                compliant and processed</para>
              </listitem>

              <listitem>
                <para>The <command>Placemark</command> name element is used to
                determine the track id: any digits/letters appearing before a
                "-" hyphen are treated as a track id, this multiple positions
                are attributed to their relevant track</para>
              </listitem>

              <listitem>
                <para>Tracks imported into Debrief from this file format are
                named as the first component of the filename (before the "."),
                followed by the unique id declared in the Placemark
                entries.</para>
              </listitem>

              <listitem>
                <para>The contents of the <command>when</command> element are
                treated as the time-stamp of the position record (time-zone
                ignored, always treated as GMT)</para>
              </listitem>

              <listitem>
                <para>The long/lat/altitude coordinates are taken from the
                first <command>coordinates</command> element in the
                <command>Placemark</command></para>
              </listitem>

              <listitem>
                <para>Course and speed data is taken from the
                <command>description</command> element, based on a presumption
                that the element contains a string formatted like:
                <code>&lt;br&gt;Course: 345.2&lt;br&gt;Speed: 9.6
                knots&lt;br&gt;Date:</code></para>
              </listitem>
            </orderedlist></para>
        </sect2>
      </sect1>

      <sect1 xml:id="Section_Flat">
        <title xml:id="SectionFlat_Title">Flat file format</title>

        <sect2 xml:id="IntroToFlat">
          <title>Introduction to Flat file (SAM) format</title>

          <para>One Debrief user organisation frequently has to use exported
          Debrief tracks in a subsequent analysis application (SAM). This
          application requires tab-separated columns of data using a
          flat-earth measurements in imperial units. The data is formatted as
          specified below. Note that records are only included for times for
          which there is sensor datums - which may be a shorter time period
          than that which the user specified.</para>
        </sect2>

        <sect2 xml:id="FlatSchema">
          <title>Schema for Flat file format</title>

          <programlisting>STRAND Scenario Report 1.00
&lt;Operation_Name&gt;
&lt;Platform_Name&gt;
&lt;Ownship_Track_Name&gt;
&lt;Sensor_Track_Name&gt;
&lt;Measured_Tgt_Name&gt;
&lt;Predicted_Tgt_Name&gt;
&lt;Start_Time&gt;
&lt;End_Time&gt;
&lt;Bearing_SIF&gt;
&lt;Range_SIF&gt;
&lt;Combined_SIF&gt;
&lt;Num_Records&gt;
&lt;Geo_Origin_X&gt; &lt;Geo_Origin_Y&gt;
Time OS_Status OS_X OS_Y OS_Speed OS_Heading Sensor_Status Sensor_X Sensor_Y
Sensor_Brg Sensor_Bacc Sensor_Freq Sensor_Facc Sensor_Speed Sensor_Heading 
Sensor_Type Msd_Status Msd_X Msd_Y Msd_Speed Msd_Heading Prd_Status Prd_X Prd_Y 
Prd_Brg Prd_Brg_Acc Prd_Range Prd_Range_Acc Prd_Course Prd_Cacc Prd_Speed Prd_Sacc 
Prd_Freq Prd_Freq_Acc
&lt;scenario_sample_time&gt; &lt;OS_Data_Status&gt; &lt;OS_X&gt; &lt;OS_Y&gt; &lt;OS_Speed&gt; &lt;OS_Heading&gt; 
  &lt;Sensor_Data_Status&gt; &lt;Sensor_X&gt; &lt;Sensor_Y&gt; &lt;Sensor_Brg&gt; &lt;Sensor_Bacc&gt; &lt;Sensor_Freq&gt; 
  &lt;Sensor_Facc&gt; &lt;Sensor_Speed&gt; &lt;Sensor_Heading&gt; &lt;Sensor_Type&gt; &lt;Msd_status&gt; &lt;Msd_X&gt;
  &lt;Msd_Y&gt; &lt;Msd_Speed&gt; &lt;Msd_Heading&gt; &lt;Prd_Status&gt; &lt;Prd_X&gt; &lt;Prd_Y&gt; &lt;Prd_Brg&gt;
  &lt;Prd_Brg_Acc&gt; &lt;Prd_Range&gt; &lt;Prd_Range_Acc&gt; &lt;Prd_Course&gt; &lt;Prd_Cacc&gt; &lt;Prd_Speed&gt;
  &lt;Prd_Sacc&gt; &lt;Prd_Freq&gt; &lt;Prd_Freq_Acc&gt;
&lt;scenario_sample_time&gt; &lt;OS_Data_Status&gt; &lt;OS_X&gt; &lt;OS_Y&gt; &lt;OS_Speed&gt; &lt;OS_Heading&gt; 
  &lt;Sensor_Data_Status&gt; &lt;Sensor_X&gt; &lt;Sensor_Y&gt; &lt;Sensor_Brg&gt; &lt;Sensor_Bacc&gt; &lt;Sensor_Freq&gt; 
  &lt;Sensor_Facc&gt; &lt;Sensor_Speed&gt; &lt;Sensor_Heading&gt; &lt;Sensor_Type&gt; &lt;Msd_status&gt; &lt;Msd_X&gt;
  &lt;Msd_Y&gt; &lt;Msd_Speed&gt; &lt;Msd_Heading&gt; &lt;Prd_Status&gt; &lt;Prd_X&gt; &lt;Prd_Y&gt; &lt;Prd_Brg&gt;
  &lt;Prd_Brg_Acc&gt; &lt;Prd_Range&gt; &lt;Prd_Range_Acc&gt; &lt;Prd_Course&gt; &lt;Prd_Cacc&gt; &lt;Prd_Speed&gt;
  &lt;Prd_Sacc&gt; &lt;Prd_Freq&gt; &lt;Prd_Freq_Acc&gt;
&lt;scenario_sample_time&gt; &lt;OS_Data_Status&gt; &lt;OS_X&gt; &lt;OS_Y&gt; &lt;OS_Speed&gt; &lt;OS_Heading&gt; 
  &lt;Sensor_Data_Status&gt; &lt;Sensor_X&gt; &lt;Sensor_Y&gt; &lt;Sensor_Brg&gt; &lt;Sensor_Bacc&gt; &lt;Sensor_Freq&gt; 
  &lt;Sensor_Facc&gt; &lt;Sensor_Speed&gt; &lt;Sensor_Heading&gt; &lt;Sensor_Type&gt; &lt;Msd_status&gt; &lt;Msd_X&gt;
  &lt;Msd_Y&gt; &lt;Msd_Speed&gt; &lt;Msd_Heading&gt; &lt;Prd_Status&gt; &lt;Prd_X&gt; &lt;Prd_Y&gt; &lt;Prd_Brg&gt;
  &lt;Prd_Brg_Acc&gt; &lt;Prd_Range&gt; &lt;Prd_Range_Acc&gt; &lt;Prd_Course&gt; &lt;Prd_Cacc&gt; &lt;Prd_Speed&gt;
  &lt;Prd_Sacc&gt; &lt;Prd_Freq&gt; &lt;Prd_Freq_Acc&gt;
&lt;scenario_sample_time&gt; &lt;OS_Data_Status&gt; &lt;OS_X&gt; &lt;OS_Y&gt; &lt;OS_Speed&gt; &lt;OS_Heading&gt; 
  &lt;Sensor_Data_Status&gt; &lt;Sensor_X&gt; &lt;Sensor_Y&gt; &lt;Sensor_Brg&gt; &lt;Sensor_Bacc&gt; &lt;Sensor_Freq&gt; 
  &lt;Sensor_Facc&gt; &lt;Sensor_Speed&gt; &lt;Sensor_Heading&gt; &lt;Sensor_Type&gt; &lt;Msd_status&gt; &lt;Msd_X&gt;
  &lt;Msd_Y&gt; &lt;Msd_Speed&gt; &lt;Msd_Heading&gt; &lt;Prd_Status&gt; &lt;Prd_X&gt; &lt;Prd_Y&gt; &lt;Prd_Brg&gt;
  &lt;Prd_Brg_Acc&gt; &lt;Prd_Range&gt; &lt;Prd_Range_Acc&gt; &lt;Prd_Course&gt; &lt;Prd_Cacc&gt; &lt;Prd_Speed&gt;
  &lt;Prd_Sacc&gt; &lt;Prd_Freq&gt; &lt;Prd_Freq_Acc&gt;
....
  Own Ship Data Fields    Sensor Data Fields    Measured Target Data Fields  
  Predicted Target Data Fields

Data Dictionary
All fields are tab delimited.  All text shown in bold is to be included in the output file exactly as shown.

Header Information
&lt;Operation_Name&gt;     The name of the operation taken from the header Information of the own ship file
&lt;Platform_Name&gt;      The name of the own ship platform taken from the headerinformation of the own ship track.
&lt;Ownship_Track_Name&gt; The name of the own ship track taken from the header information of the own ship track
&lt;Sensor_Track_Name&gt;  The name of the sensor track taken from the header informationof the sensor track
&lt;Measured_Tgt_Name&gt;  The name of the measured target track taken form the target trackheader information
&lt;Predicted_Tgt_Name&gt; The name of the predicted target track taken from the targettrack header information
&lt;Start_Time&gt;         The time of the first data record in the form:
                      hh:mm:ss &lt;TAB&gt; dd/mm/yyyy
&lt;End_Time&gt;           The time of the last data record in the form: 
                      hh:mm:ss &lt;TAB&gt; dd/mm/yyyy
&lt;Bearing_SIF&gt;        The system integrity factor based on bearing information
&lt;Range_SIF&gt;          The system integrity factor based on range information
&lt;Combined_SIF&gt;       The system integrity factor for the whole system
&lt;Num_Records&gt;        The number of data records in the file's body
&lt;Geo_Origin_X&gt;       The X component of the geographical origin in cartesian coordinates
&lt;Geo_Origin_Y&gt;       The Y component of the geographical origin in cartesiancoordinates

Body Information
All records consist of a sequence of TAB delimited fields generating a tabular output.  Each column will be identified by a title as shown in bold type.

&lt;scenario_sample_time&gt; The time of the scenario information contained in the record.
                        Measured in seconds from the start time given in the header.
&lt;OS_Data_Status&gt;      Flag defining the availability of own ship data built from the sum of the following codes.
                        0 = No own ship data, 1 = OS Position, 2 = Os Speed, 
                        4 = OS Heading.  For example if all own ship data is available the status = 1+2+4 = 7
&lt;OS_X&gt;                The X component of the own ship position in cartesiancoordinates at scenario sample time.  
                        Use STRANDPos type - integers measuring scenario locationin yards
&lt;OS_Y&gt;                The Y component of the own ship position in cartesiancoordinates at scenario sample time.
                        Use STRANDPos type - integers measuring scenario locationin yards
&lt;OS_Speed&gt;            The speed of the own ship at scenario_sample_time in knots.
                       Positive float
&lt;OS_Heading&gt;          The heading of the own ship at scenario_sample_time in degrees.
                       Float in range 0 to 359.99
&lt;Sensor_Data_Status&gt;  Flag defining the availability of sensor data built from the sum of the following codes.
                       0 = No sensor data, 1 = Sensor position, 2 = sensor bearing, 
                       4 = sensor frequency, 8 = Sensor Speed, 16 = Sensor Heading,
                       32 = Sensor Type.  For example if all sensor data is available
                       the status = 63
&lt;Sensor_X&gt;            The X component of the sensor position in cartesian coordinates at scenario sample time.
                       Use STRANDPos type - integers measured in yards
&lt;Sensor_Y&gt;            The Y component of the sensor position in cartesian coordinates at scenario sample time.
                       Use STRANDPos type - integers measured in yards
&lt;Sensor_Brg&gt;          The true bearing measured by the sensor in degrees. 
                       Float in range 0 to 359.99
&lt;Sensor_Bacc&gt;         The accuracy of the measured bearing in degrees.  Float in 
                       range 0 to 180.0
&lt;Sensor_Freq&gt;         The frequency measured by the sensor in hertz. Positive Float
&lt;Sensor_Facc&gt;         The accuracy of the measured frequency in degrees.  Positive float
&lt;Sensor_Speed&gt;        The speed of the sensor in knots. Positive float
&lt;Sensor_Heading&gt;      The heading of the sensor in degrees. Float in range 0 to 359.99
&lt;Sensor_Type&gt;         The type of sensor the data refers to.  
                       1 character H = hull or T = towed array
&lt;Msd_status&gt;          Flag defining the availability of measured target data built from the sum of the following codes.  
                       0 = no measured target data, 1 = measured target position, 
                       2 = measured target speed, 4 = measured target heading.
&lt;Msd_X&gt;               The X component of the measured target position in cartesian coordinates at scenario sample time. 
                       Use STRANDPos type - integers measured in yards
&lt;Msd_Y&gt;               The Y component of the measured target position in cartesian coordinates at scenario sample time. 
                       Use STRANDPos type - integers measured in yards
&lt;Msd_Speed&gt;           The measured target speed in knots. Positive float
&lt;Msd_Heading&gt;         The measured target heading in degrees. Float in range 0 to
                       359.99
&lt;Prd_status&gt;          Flag defining the availability of predicted target data built from the sum of the following codes.
                       0 = no predicted target data, 1 = predicted position, 
                       2 = predicted  bearing, 4 = predicted bearing accuracy, 
                       8 = predicted range, 16 = predicted range accuracy, 
                       32 = predicted course, 64 = predicted course accuracy, 
                       128 = predicted speed, 256 = predicted speed accuracy, 
                       512 = predicted frequency, 1024 = predicted frequency accuracy 
&lt;Prd_X&gt;               The X component of the predicted target position in cartesian coordinates at scenario sample time. 
                       Use STRANDPos type - integers measured in yards
&lt;Prd_Y&gt;               The Y component of the predicted target position in cartesian coordinates at scenario sample time.
                       Use STRANDPos type - integers measured in yards
&lt;Prd_Brg&gt;             The predicted target bearing in degrees.  Float in range 0 to
                       359.99
&lt;Prd_Brg_Acc&gt;         The predicted target bearing accuracy in degrees.  Float in 
                       range 0 to 180.0
&lt;Prd_Range&gt;           The predicted target range in yards  Positive float
&lt;Prd_Range_Acc&gt;       The predicted target range accuracy in yards  Positive float
&lt;Prd_Course&gt;          The predicted target course in degrees.  Float in range 0 to 
                       359.99
&lt;Prd_Cacc&gt;            The accuracy of the predicted course in degrees.  Positive 
                       float in range 0 to 359.99
&lt;Prd_Speed&gt;           The predicted target speed in knots.  Positive float
&lt;Prd_Sacc&gt;            The accuracy of the measured speed in knots.  Positive float
&lt;Prd_Freq&gt;            The predicted target range in hertz  Positive float
&lt;Prd_Freq_Acc&gt;        The predicted target frequency accuracy in hertz  Positive float</programlisting>
        </sect2>
      </sect1>

      <sect1 xml:id="multi_data_files">
        <title>Multipath analysis datafiles</title>

        <sect2 xml:id="multi_data_intro">
          <title>Introduction</title>

          <para><indexterm><primary>Multipath</primary><secondary>data files</secondary></indexterm>/indexterm> The <link linkend="multipath_analysis">Multi Path
          Analysis</link> view allows a target depth to be estimated by
          visually aligning a calculated set of time delays with a measured
          set. This view requires two additional data files to be loaded. Both
          of these files are in textual <filename>csv</filename>
          format.</para>
        </sect2>

        <sect2 xml:id="multi_data_svp">
          <title>SVP file</title>

          <para>The Sound Velocity Profile file is a two-column csv text
          file:<variablelist>
              <varlistentry>
                <term>depth</term>

                <listitem>
                  <para>floating point depth (m)</para>
                </listitem>
              </varlistentry>

              <varlistentry>
                <term>sound speed</term>

                <listitem>
                  <para>floating point sound speed (m/s)</para>
                </listitem>
              </varlistentry>
            </variablelist></para>
        </sect2>

        <sect2 xml:id="multi_data_delays">
          <title>Time delays file</title>

          <para>The time-delays data file is a two-column csv text
          file:</para>

          <variablelist>
            <varlistentry>
              <term>time</term>

              <listitem>
                <para>floating point timestamp (seconds from the start of
                January 1, 1970)</para>
              </listitem>
            </varlistentry>

            <varlistentry>
              <term>time-delay</term>

              <listitem>
                <para>floating point time delay (seconds)</para>
              </listitem>
            </varlistentry>
          </variablelist>

          <para>Note, you can determine the timestamp using the <link
          xlink:href="http://www.unixstamp.com/"
          xmlns:xlink="http://www.w3.org/1999/xlink">unix timestamp</link> web
          site.</para>
        </sect2>
      </sect1>

      <sect1 xml:id="intro_xml">
        <title>Introduction to XML</title>

        <para>Extensible Markup Language ( <glossterm
        linkend="g_xml">XML</glossterm>) is a meta-markup language that
        provides a format for describing structured data. This facilitates
        more precise declarations of content and more meaningful search
        results across multiple platforms. In addition, XML will enable a new
        generation of Web-based data viewing and manipulation
        applications.</para>

        <sect2 xml:id="more_xml">
          <title>Extensible</title>

          <para>In XML you can define an unlimited set of tags. While HTML
          tags can be used to display a word in bold or italic, XML provides a
          framework for tagging structured data. An XML element can declare
          its associated data to be a retail price, a sales tax, a book title,
          the amount of precipitation, or any other desired data element. As
          XML tags are adopted throughout an organization's intranet, and by
          others across the Internet, there will be a corresponding ability to
          search for and manipulate data regardless of the applications within
          which it is found. Once data has been located, it can be delivered
          over the wire and presented in a browser such as Internet Explorer 5
          in any number of ways, or it can be handed off to other applications
          for further processing and viewing.</para>
        </sect2>

        <sect2 xml:id="xml_structure">
          <title>Structural representation of data</title>

          <para>XML provides a structural representation of data that has
          proved broadly implementable and easy to deploy. Industrial
          implementations in the Standard Generalized Markup Language (SGML)
          community and elsewhere demonstrate the intrinsic quality and
          industrial strength of XML's tree-structured data format.</para>

          <para>XML is a subset of SGML that is optimized for delivery over
          the Web; it is defined by the World Wide Web Consortium, ensuring
          that structured data will be uniform and independent of applications
          or vendors. This resulting interoperability is kick-starting a new
          generation of business and electronic-commerce Web
          applications.</para>

          <para>XML, which provides a data standard that can encode the
          content, semantics, and schemata for a wide variety of cases ranging
          from simple to complex, can be used to mark up the following:
          <itemizedlist>
              <listitem>
                <para>An ordinary document.</para>
              </listitem>

              <listitem>
                <para>A structured record, such as an appointment record or
                purchase order.</para>
              </listitem>

              <listitem>
                <para>An object with data and methods, such as the persistent
                form of a Java object or ActiveX control.</para>
              </listitem>

              <listitem>
                <para>A data record, such as the result set of a query.</para>
              </listitem>

              <listitem>
                <para>Meta-content about a Web site, such as Channel
                Definition Format (CDF).</para>
              </listitem>

              <listitem>
                <para>Graphical presentation, such as an application's user
                interface.</para>
              </listitem>

              <listitem>
                <para>Standard schema entities and types.</para>
              </listitem>

              <listitem>
                <para>All links between information and people on the
                Web.</para>
              </listitem>
            </itemizedlist></para>

          <para>Once the data is on the client desktop, it can be manipulated,
          edited, and presented in multiple views, without return trips to the
          server. Servers can now become more scalable, due to lower
          computational and bandwidth loads. Also, since data is exchanged in
          the XML format, it can be easily merged from different
          sources.</para>

          <para>XML is valuable to the Internet, as well as to large corporate
          intranet environments because it provides interoperability using a
          flexible, open, standards-based format, with new ways of accessing
          legacy databases and delivering data to Web clients. Applications
          can be built more quickly, are easier to maintain, and can easily
          provide multiple views on the structured data.</para>
        </sect2>

        <sect2 xml:id="more_xml_data">
          <title>Data is separated from the presentation and the
          process</title>

          <para>The power and beauty of XML is that it maintains the
          separation of the user interface from the structured data. Hypertext
          Markup Language (HTML) specifies how to display data in a browser,
          XML defines the content. For example, in HTML you use tags to tell
          the browser to display data as bold or italic; in XML you only use
          tags to describe data, such as city name, temperature, and
          barometric pressure. In XML, you use stylesheets such as Extensible
          Style Language (XSL) and Cascading Style Sheets (CSS) to present the
          data in a browser. XML separates the data from the presentation and
          the process, enabling you to display and process the data as you
          wish by applying different style sheets and applications.</para>

          <para>This separation of data from presentation enables the seamless
          integration of data from diverse sources. Customer Information,
          purchase orders, research results, bill payments, medical records,
          catalog data, and other information can be converted to XML on the
          middle tier, allowing data to be exchanged online as easily as HTML
          pages display data today. Data encoded in XML can then be delivered
          over the Web to the desktop. No retrofitting is necessary for legacy
          information stored in mainframe databases or documents, and because
          HTTP is used to deliver XML over the wire, no changes are required
          for this function.</para>

          <para>XML documents are easy to create; if you are familiar with
          HTML, you can quickly learn to create one. In this example, XML is
          used to describe a weather report: <screen>              <markup>
                &lt;weather-report&gt;
                &lt;date&gt;March 25, 1998&lt;/date&gt;
                &lt;time&gt;08:00&lt;/time&gt;
                &lt;area&gt;
                &lt;city&gt;Seattle&lt;/city&gt;
                &lt;state&gt;WA&lt;/state&gt;
                &lt;region&gt;West Coast&lt;/region&gt;
                &lt;country&gt;USA&lt;/country&gt;
                &lt;/area&gt;
                &lt;measurements&gt;
                &lt;skies&gt;partly cloudy&lt;/skies&gt;
                &lt;temperature&gt;46&lt;/temperature&gt;
                &lt;wind&gt;
                &lt;direction&gt;SW&lt;/direction&gt;
                &lt;windspeed&gt;6&lt;/windspeed&gt;
                &lt;/wind&gt;
                &lt;h-index&gt;51&lt;/h-index&gt;
                &lt;humidity&gt;87&lt;/humidity&gt;
                &lt;visibility&gt;10&lt;/visibility&gt;
                &lt;uv-index&gt;1&lt;/uv-index&gt;
                &lt;/measurements&gt;
                &lt;/weather-report&gt;
             </markup>          </screen></para>

          <para>You can display this data in many different ways, or hand it
          off to other applications for further processing. You can also apply
          a style sheet to display this information in a browser.</para>
        </sect2>
      </sect1>
    </chapter>

    <chapter xml:id="chap_debrief_algorithms">
      <title>Debrief algorithms</title>

      <sect1 xml:id="rng_brg_calcs">
        <title>Range/Bearing calculations within Debrief</title>

        <para><indexterm><primary>Range/bearing calculations</primary></indexterm>Ranges and bearings within Debrief are calculated according to
        the Rhumb-Line formulae, taken from the Admiralty Manual of
        Navigation, Volume 2, BR 45(2), Revised 1973, pages 5-11.</para>

        <para>The Rhumb-line calculation is used both for the display of
        measured range-bearing and for the projection of data onto the
        monitor. Briefly, the to convert from real-world to screen coordinates
        the following procedure is followed:</para>

        <para><orderedlist>
            <listitem>
              <para>Determine the area represented by the current viewed data
              in world coordinates</para>
            </listitem>

            <listitem>
              <para>Determine the centre of this data area - this is used as
              the origin of the data</para>
            </listitem>

            <listitem>
              <para>For each data point to be plotted, find its range and
              bearing from the origin</para>
            </listitem>

            <listitem>
              <para>Convert this range and bearing into a delta-x and delta-y
              in screen coordinates</para>
            </listitem>

            <listitem>
              <para>Produce a data point in screen coordinates by adding these
              deltas to the centre of the screen</para>
            </listitem>
          </orderedlist></para>

        <note>
          <para>The result of this projection algorithm (as with most others)
          is that whilst the information plotted at the centre horizontal
          section (mid-latitude) of the screen is an accurate representation,
          travelling further north and south from it degrades the accuracy.
          This is negligible in data areas near the equator or where only a
          small area is covered (less than a couple of hundred nautical
          miles). With greater data areas, and nearer the poles, the effects
          are more noticeable, however.</para>
        </note>

        <para>For those without access to the Admiralty Manual of Navigation,
        here is an abbreviated snippet from it:</para>

        <sect2 xml:id="rhumb-lines">
          <title>The Rhumb-Line formulae</title>

          <para>A line on the earth's surface which cuts all meridians at the
          same angle is called a rhumb line.</para>

          <para>With his knowledge of the distance along a parallel of
          latitude and the departure between two places, the navigator can
          find the course he must steer in order to follow the rhumb line
          joining the two places, and also the distance he will travel along
          whilst doing so. In <xref linkend="rhumb_line_parts" /> FT is the
          rhumb-line divided into a large number of equal parts FA, AB, BC...
          <figure xml:id="rhumb_line_parts">
              <title>Rhumb line parts</title>

              <mediaobject>
                <imageobject>
                  <imagedata fileref="figures/rhumb_line_segments.gif"
                             width="200"></imagedata>
                </imageobject>
              </mediaobject>
            </figure></para>

          <para>Af, Ba, Cb... are the arcs of parallels drawn through A, B, C
          ... and the angles at f, a, b ..., are therefore at right-angles. If
          the divisions of FT are made sufficiently small, the triangles FaF,
          ABa, BbB ... are themselves small enough to be treated as plane
          triangles. Also, since the course angle at F, A, B, C, ... remains
          constant by the definition of a rhumb-line, these small triangles
          are equal.</para>
        </sect2>

        <sect2 xml:id="short_dist_sailing">
          <title>Short-distance sailing</title>

          <para>By the term <emphasis>short-distance sailing</emphasis> is
          meant the following of a rhumb-line track for a distance not greater
          than 600'. Within this limiting distance, the navigator can obtain
          all he wants to know about the track from the three formulae:</para>

          <para><screen> <markup>
departure = d.long cos (mean latitude)   (1)
departure = distance sin (course)     (2)
d.lat = distance cos (course)         (3)

The course is given by (2) divided by (3). Thus:
departure / d.lat = tan (course)</markup>
            </screen></para>
        </sect2>
      </sect1>

      <sect1 xml:id="WormInHole">
        <title>Worm in the hole algorithm</title>

        <sect2 xml:id="WormOverview">
          <title>Overview</title>

          <para><indexterm><primary>Algorithms</primary><secondary>Worm in the hole</secondary></indexterm>Frequently vehicles in Debrief use sensors with a different
          datum to the host platform - either because they're several metres
          from the position recorded datum on board the platform, or because
          they're an offboard sensor dragged behind the sensor. For an onboard
          sensor it is acceptable to locate the sensor by reference to its
          sensor length offset in conjunction with the current heading.
          However for an offboard sensor this coarse calculation may not be
          representative of the actual sensor location. When a platform is on
          a straight-line course, it is acceptable to plot the sensor datum
          back along the reverse heading. But, when a platform has travelled
          through a turn, plotting the sensor datum at the reciprocal of the
          platform heading will place the sensor in an unrealistic location.
          To counter this, Debrief offers a 'Worm in the hole' sensor locating
          model.</para>

          <para>The 'worm in the hole' algorithm takes the sensor length
          offset value, and determines the point this specified distance back
          along the platform track. The metaphor is that a worm has opened a
          tunnel through a body of material. The sensor is being dragged
          through this tunnel, and we determine the sensor location
          accordingly.</para>

          <note>
            <para>This is not a perfect algorithm. In truth, during a turn the
            forces on a towed array will cause it to slip sideways, cutting
            off the corner to an extent. It is the responsibility of the
            analyst to appraise himself with array performance and determine
            the applicability of the worm in the hole algorithm - though note
            its results are much more accurate than the non-worm in the hole
            straight line model.</para>
          </note>
        </sect2>

        <sect2 xml:id="WormExample">
          <title>Example</title>

          <para>The screenshot belows shows a comparison of the two models.
          The red ownship track has positions at times 100,200,300 and 400.
          The sensor track has positions at times 100,140,280,350. The array
          is 400m long.</para>

          <para>The two array models show the same value for the first 3
          points plotted: in the first two of these the array falls behind the
          start of the ownship track - thus the reciprocal of ownship heading
          is necessary to determine the position. In the third position, the
          length of the 400m array falls completely within the 600m
          leg.</para>

          <para>The fourth position is, however, different. The straight-line
          model plots it back along the reciprocal of the platform heading at
          time 300. The worm in the hole model, however, turns back along the
          ownship track from position 200 to 300. At time 350, the ownship
          platform will be 1/2 way down between positions 300 and 400 - this
          will consume 1/2 of the 600m separation (300m), leaving another 100m
          of array to be consumed - this the algorithm moves 100m back down
          between the points at 200 &amp; 300.<screenshot>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="figures/WormInHole.png" scalefit="1"
                             width="100%"></imagedata>
                </imageobject>
              </mediaobject>
            </screenshot></para>
        </sect2>

        <sect2 xml:id="WormAlgorithm">
          <title>Algorithm</title>

          <para>The worm in the hole algorithm is implemented as
          follows:<orderedlist>
              <listitem>
                <para>Determine platform track, the time at which sensor
                location is required, the specified length offset, and whether
                the sensor is 'ticked' for 'worm in the hole
                algorithm'.</para>
              </listitem>

              <listitem>
                <para>Work through the platform track to find the position
                immediately after the specified dtg, together with a list of
                points preceding that. These represent the 'nextPoint' and the
                backTrack from that dtg.</para>
              </listitem>

              <listitem>
                <para>Calculate the platform position at the specified dtg by
                interpolating between the last item of the backTrack and the
                nextPoint , at the specified dtg. Name this new position
                nextPoint - it represents the platform position at the
                specified dtg</para>
              </listitem>

              <listitem>
                <para>Now repeatedly perform the following:<orderedlist>
                    <listitem>
                      <para>Work out the distance from nextPoint to the last
                      item in the backTrack</para>
                    </listitem>

                    <listitem>
                      <para>If this distance is greater than the remaining
                      array offset length then:<orderedlist>
                          <listitem>
                            <para>Work out the proportion of the distance that
                            the remaining sensor length represents, name it
                            timeDelta</para>
                          </listitem>

                          <listitem>
                            <para>Interpolate back from nextPoint to the last
                            item in the backTrack by the timeDelta parameter.
                            This is the resultant sensor location</para>
                          </listitem>
                        </orderedlist></para>
                    </listitem>

                    <listitem>
                      <para>If the calculated distance is less than the
                      remaining sensor length then<orderedlist>
                          <listitem>
                            <para>reduce the remaining sensor length by the
                            calculated distance (to represent the array being
                            'consumed' by the backTrack)</para>
                          </listitem>

                          <listitem>
                            <para>if there are any more points in the backTrack
                            then<orderedlist>
                                <listitem>
                                  <para>store the last point on the backTrack as
                                  nextPoint, and move back along the backTrack by one
                                  element</para>
                                </listitem>
                              </orderedlist> else<orderedlist>
                                <listitem>
                                  <para>calculate the offset back from the start of
                                  the platform track, of the remaining sensor length,
                                  along the reciprocal of the vessel heading. This is
                                  the resultant sensor location.</para>
                                </listitem>
                              </orderedlist></para>
                          </listitem>
                        </orderedlist></para>
                    </listitem>
                  </orderedlist></para>
              </listitem>
            </orderedlist></para>
        </sect2>
      </sect1>

      <sect1 xml:id="other_algs">
        <title>Other Debrief algorithms</title>

        <sect2 xml:id="freq_alg">
          <title>Frequency algorithms</title>

          <para><indexterm><primary>Algorithms</primary><secondary>Frequency</secondary></indexterm>In the Single Sided Reconstruction extensions to Debrief
          (2009) the use of frequency data in track reconstruction,
          specifically involving the application of Doppler Offsets. The
          algorithms used have been loosely taken from the Royal Naval
          Submarine School training guide titled <emphasis>The Bearing
          Frequency Plot and Narrowband Analysis</emphasis>. The core doppler
          calculation is as follows:<programlisting>	private static double calcDopplerComponent(final double theBearingRads,
      final double myCourseRads, 
      final double mySpeedKts,	final double observedFreq)
	{
		final double speedOfSoundKts = 2951;
		double relBearingRads = theBearingRads - myCourseRads;

		final double ownSpeedAlongKts = Math.abs(Math.cos(relBearingRads)
				* mySpeedKts);

		// put rel brg into +/- 180 domain
		while (relBearingRads &gt; Math.PI)
			relBearingRads -= (2 * Math.PI);
		while (relBearingRads &lt; -(Math.PI))
			relBearingRads += (2 * Math.PI);

		double dopplerOffset = (ownSpeedAlongKts * observedFreq) / speedOfSoundKts;

		if (Math.abs(relBearingRads) &lt; (Math.PI / 2))
			dopplerOffset = -dopplerOffset;
		return dopplerOffset;
	}</programlisting>The doppler calculation is used in calculation of the
          corrected frequency - which involves the removal of the ownship
          doppler component:<programlisting>	public double getCorrectedFrequency()
	{
		double correctedFreq = 0;

		final double theBearingDegs = getBearingToTarget();
		final double theBearingRads = MWC.Algorithms.Conversions
				.Degs2Rads(theBearingDegs);
		final double myCourseRads = _hostFix.getCourse();

		final double mySpeedKts = _hostFix.getSpeed();
		double observedFreq = _sensor.getFrequency();
		final double dopplerComponent = calcDopplerComponent(theBearingRads,
				myCourseRads, mySpeedKts, observedFreq);

		correctedFreq = observedFreq + dopplerComponent;

		return correctedFreq;
	}</programlisting>The next frequency calculation involves the addition of
          ownship and target dopplers to the base frequency: <programlisting>	public double getPredictedFrequency()
	{
		double predictedFreq = 0;

		if (_targetTrack instanceof RelativeTMASegment)
		{
			RelativeTMASegment rt = (RelativeTMASegment) _targetTrack;
			final double theBearingDegs = getBearingToTarget();
			final double theBearingRads = MWC.Algorithms.Conversions
					.Degs2Rads(theBearingDegs);
			final double myCourseRads = _hostFix.getCourse();

			final double mySpeedKts = _hostFix.getSpeed();
			double baseFreq = rt.getBaseFrequency();
			final double myDopplerComponent = calcDopplerComponent(theBearingRads,
					myCourseRads, mySpeedKts, baseFreq);

			final double hisCourseRads = _targetFix.getCourse();
			final double hisSpeedKts = _targetFix.getSpeed();

			final double hisDopplerComponent = calcDopplerComponent(Math.PI
					+ theBearingRads, hisCourseRads, hisSpeedKts, baseFreq);

			predictedFreq = baseFreq - (myDopplerComponent + hisDopplerComponent);
		}
		return predictedFreq;
	}</programlisting></para>
        </sect2>
      </sect1>

      <sect1 xml:id="contouring_algorithm">
        <title>Contouring algorithm</title>

        <para>The contouring algorithm employed within Debrief was originally
        produced by Paul Bourke back in 1987, for submission to the Byte
        magazine. Here's the article pretty much verbatim:</para>

        <sect2 xml:id="contour_intro">
          <title>Introduction</title>

          <para>This article introduces a straightforward method of contouring
          some surface represented as a regular triangular mesh.</para>

          <para>Contouring aids in visualizing three dimensional surfaces on a
          two dimensional medium (on paper or in this case a computer graphics
          screen).</para>

          <para>Two most common applications are displaying topological
          features of an area on a map or the air pressure on a weather map.
          In all cases some parameter is plotted as a function of two
          variables, the longitude and latitude or x and y axis. One problem
          with computer contouring is the process is usually CPU intensive and
          the algorithms often use advanced mathematical techniques making
          them susceptible to error.</para>
        </sect2>

        <sect2 xml:id="conrec_intro">
          <title>CONREC</title>

          <para><indexterm><primary>Algorithms</primary><secondary>Contouring</secondary></indexterm>To do contouring in software you need to describe the data
          surface and the contour levels you want to have drawn. The software
          given this information must call the algorithm that calculates the
          line segments that make up a contour curve and then plot these line
          segments on whatever graphics device is available.</para>

          <para>CONREC satisfies the above description, it is relatively
          simple to implement, very reliable, and does not require
          sophisticated programming techniques or a high level of mathematics
          to understand how it works.</para>

          <para>The input parameters to the CONREC subroutine are as follows :
          <itemizedlist>
              <listitem>
                <para>The number of horizontal and vertical data points
                designated iub and jub.</para>
              </listitem>

              <listitem>
                <para>The number of contouring levels, nc.</para>
              </listitem>

              <listitem>
                <para>A one dimensional array z(0:nc-1) that saves as a list
                of the contour levels in increasing order. (The order of
                course can be relaxed if the program will sort the
                levels)</para>
              </listitem>

              <listitem>
                <para>A two dimensional array d(0:iub,0:jub) that contains the
                description of the data array to be contoured. Each element of
                the array is a sample of the surface being studied at a point
                (x,y)</para>
              </listitem>

              <listitem>
                <para>Two, one dimensional arrays x(0:iub) and y(0:jub) which
                contain the horizontal and vertical coordinates of each sample
                point. This allows for a rectangular grid of samples.</para>
              </listitem>
            </itemizedlist><figure xml:id="conrec_input">
              <title>Some of the CONREC input parameters.</title>

              <screenshot>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="figures/contour_1.gif"></imagedata>
                  </imageobject>
                </mediaobject>
              </screenshot>
            </figure></para>

          <para></para>

          <para>The contouring subroutine CONREC does not assume anything
          about the device that will be used to plot the contours. It instead
          expects a user written subroutine called VECOUT. CONREC calls VECOUT
          with the horizontal and vertical coordinates of the start and end
          coordinates of a line segment along with the contour level for that
          line segment. In the simplest case this is very similar to the usual
          LINE (x1,y1)-(x2,y2) command in BASIC. See the source code listing
          below.</para>
        </sect2>

        <sect2 xml:id="conrec_alg">
          <title>Algorithm</title>

          <para>As already mentioned the samples of the three dimensional
          surface are stored in a two dimensional real array. This rectangular
          grid is considered four points at a time, namely the rectangle
          d(i,j), d(i+1,j), d(i,j+1), and d(i+1,j+1). The centre of each
          rectangle is assigned a value corresponding to the average values of
          each of the four vertices. Each rectangle is in turn divided into
          four triangular regions by cutting along the diagonals. Each of
          these triangular planes may be bisected by horizontal contour plane.
          The intersection of these two planes is a straight line segment,
          part of the contour curve at that contour height.</para>

          <para>Depending on the value of a contour level with respect to the
          height at the vertices of a triangle, certain types of contour lines
          are drawn. The 10 possible cases which may occur are summarised
          below <orderedlist numeration="loweralpha">
              <listitem>
                <para>All the vertices lie below the contour level.</para>
              </listitem>

              <listitem>
                <para>Two vertices lie below and one on the contour
                level.</para>
              </listitem>

              <listitem>
                <para>Two vertices lie below and one above the contour
                level.</para>
              </listitem>

              <listitem>
                <para>One vertex lies below and two on the contour
                level.</para>
              </listitem>

              <listitem>
                <para>One vertex lies below, one on and one above the contour
                level.</para>
              </listitem>

              <listitem>
                <para>One vertex lies below and two above the contour
                level.</para>
              </listitem>

              <listitem>
                <para>Three vertices lie on the contour level.</para>
              </listitem>

              <listitem>
                <para>Two vertices lie on and one above the contour
                level.</para>
              </listitem>

              <listitem>
                <para>One vertex lies on and two above the contour
                level.</para>
              </listitem>

              <listitem>
                <para>All the vertices lie above the contour level.</para>
              </listitem>
            </orderedlist></para>

          <para>In cases a, b, i and j the two planes do not intersect, i.e.
          no line need be drawn. For cases d and h the two planes intersect
          along an edge of the triangle and therefore line is drawn between
          the two vertices that lie on the contour level. Case e requires that
          a line be drawn from the vertex on the contour level to a point on
          the opposite edge. This point is determined by the intersection of
          the contour level with the straight line between the other two
          vertices. Cases c and f are the most common situations where the
          line is drawn from one edge to another edge of the triangle. The
          last possibility or case g above has no really satisfactory solution
          and fortunately will occur rarely with real arithmetic. <figure
              xml:id="contour_lines">
              <title>Possible line orientations</title>

              <mediaobject>
                <imageobject>
                  <imagedata fileref="figures/contour_2.gif"></imagedata>
                </imageobject>
              </mediaobject>
            </figure></para>
        </sect2>

        <sect2 xml:id="conrec_demo">
          <title>Example</title>

          <para>As a simple example consider one triangle with vertices
          labelled m1,m2 and m3 with heights 0, 2 and 3 respectively <figure
              xml:id="line_permutations">
              <title>Line permutations within contouring algorithm.</title>

              <mediaobject>
                <imageobject>
                  <imagedata fileref="figures/contour_3.gif"></imagedata>
                </imageobject>
              </mediaobject>
            </figure></para>

          <para>To calculate where a contour line at a height of 1 should be
          drawn, it can be seen that this is case f described earlier. Level 1
          intersects line segment m1-m2 half the way along and it intersects
          line segment m1-m3 one third of the way along. A line segment is
          drawn between these two points. Each rectangular mesh cell is
          treated this way.</para>
        </sect2>

        <sect2 xml:id="conrec_sub">
          <title>Subroutine</title>

          <para>An attempt is made at optimization by checking first to see if
          there are any contour levels within the present rectangle and second
          that there are some contour levels within the present triangle. The
          indices i and j are used to step through each rectangle in turn, k
          refers to each contour level and m to the four triangles in each
          rectangle. <figure xml:id="contour_notations">
              <title>Some of the notation used for identifying the rectangles
              and triangles in the subroutine</title>

              <mediaobject>
                <imageobject>
                  <imagedata fileref="figures/contour_4.gif"></imagedata>
                </imageobject>
              </mediaobject>
            </figure> Note that for large arrays the whole data array need not
          be stored in memory . Since the algorithm is a local one only
          requiring 4 points at a time, the data for each rectangle could be
          read from disk as required.</para>
        </sect2>

        <sect2 xml:id="more_conrec_demo">
          <title>Example</title>

          <para>Contour map and the following function <figure
              xml:id="contour_function_demo">
              <title>Function to be contoured</title>

              <mediaobject>
                <imageobject>
                  <imagedata fileref="figures/contour_5.gif"></imagedata>
                </imageobject>
              </mediaobject>
            </figure><figure xml:id="sample_conrec_plot">
              <title>Sample contour plot using CONREC algorithm</title>

              <mediaobject>
                <imageobject>
                  <imagedata fileref="figures/contour_6.gif"></imagedata>
                </imageobject>

                <caption></caption>
              </mediaobject>
            </figure>The sample contour plot itself</para>
        </sect2>

        <sect2 xml:id="conrec_note">
          <title>Note</title>

          <para>On occasion users have reported gaps in their contour lines,
          this should of course never happen. There is however a pathological
          case that all local contouring algorithms suffer from (local meaning
          that they only use information in the immediate vicinity to
          determine the contour lines). The problem arises when all four
          vertices of a grid cell have the same value as the contour level
          under consideration. There are a number of strategies that can be
          employed to overcome this special event, the correct way is to
          consider a larger region in order to join up the contours on either
          side of the problem cell. CONREC doesn't do this and just leaves the
          cell without any contour lines thus resulting in a gap. This special
          case essentially never happens for real values data, it is most
          commonly associated with integer height datasets. The simplest
          solution is to offset the contour levels being drawn by a very small
          amount.</para>
        </sect2>
      </sect1>
    </chapter>
  </part>

  <!-- ********************************************************************** -->

  <!-- ********************************************************************** -->

  <!--   License                                                             -->

  <!-- ********************************************************************** -->

  <!-- ********************************************************************** -->

  <appendix xml:id="gfdl">
    <title>GNU free documentation license</title>

    <!-- - GNU Project - Free Software Foundation (FSF) -->

    <!-- LINK REV="made" HREF="mailto:webmasters@gnu.org" -->

    <!-- sect1>
              <title>GNU Free Documentation License</title -->

    <para>Version 1.1, March 2000</para>

    <blockquote>
      <para>Copyright ©) 2000 Free Software Foundation, Inc. 59 Temple Place,
      Suite 330, Boston, MA 02111-1307 USA. Everyone is permitted to copy and
      distribute verbatim copies of this license document, but changing it is
      not allowed.</para>
    </blockquote>

    <sect1 label="0" xml:id="gpl_0">
      <title>PREAMBLE</title>

      <para>The purpose of this License is to make a manual, textbook, or
      other written document "free" in the sense of freedom: to assure
      everyone the effective freedom to copy and redistribute it, with or
      without modifying it, either commercially or noncommercially.
      Secondarily, this License preserves for the author and publisher a way
      to get credit for their work, while not being considered responsible for
      modifications made by others.</para>

      <para>This License is a kind of "copyleft", which means that derivative
      works of the document must themselves be free in the same sense. It
      complements the GNU General Public License, which is a copyleft license
      designed for free software.</para>

      <para>We have designed this License in order to use it for manuals for
      free software, because free software needs free documentation: a free
      program should come with manuals providing the same freedoms that the
      software does. But this License is not limited to software manuals; it
      can be used for any textual work, regardless of subject matter or
      whether it is published as a printed book. We recommend this License
      principally for works whose purpose is instruction or reference.</para>
    </sect1>

    <sect1 label="1" xml:id="gpl_1">
      <title>APPLICABILITY AND DEFINITIONS</title>

      <para>This License applies to any manual or other work that contains a
      notice placed by the copyright holder saying it can be distributed under
      the terms of this License. The "Document", below, refers to any such
      manual or work. Any member of the public is a licensee, and is addressed
      as "you".</para>

      <para>A "Modified Version" of the Document means any work containing the
      Document or a portion of it, either copied verbatim, or with
      modifications and/or translated into another language.</para>

      <para>A "Secondary Section" is a named appendix or a front-matter
      section of the Document that deals exclusively with the relationship of
      the publishers or authors of the Document to the Document's overall
      subject (or to related matters) and contains nothing that could fall
      directly within that overall subject. (For example, if the Document is
      in part a textbook of mathematics, a Secondary Section may not explain
      any mathematics.) The relationship could be a matter of historical
      connection with the subject or with related matters, or of legal,
      commercial, philosophical, ethical or political position regarding
      them.</para>

      <para>The "Invariant Sections" are certain Secondary Sections whose
      titles are designated, as being those of Invariant Sections, in the
      notice that says that the Document is released under this
      License.</para>

      <para>The "Cover Texts" are certain short passages of text that are
      listed, as Front-Cover Texts or Back-Cover Texts, in the notice that
      says that the Document is released under this License.</para>

      <para>A "Transparent" copy of the Document means a machine-readable
      copy, represented in a format whose specification is available to the
      general public, whose contents can be viewed and edited directly and
      straightforwardly with generic text editors or (for images composed of
      pixels) generic paint programs or (for drawings) some widely available
      drawing editor, and that is suitable for input to text formatters or for
      automatic translation to a variety of formats suitable for input to text
      formatters. A copy made in an otherwise Transparent file format whose
      markup has been designed to thwart or discourage subsequent modification
      by readers is not Transparent. A copy that is not "Transparent" is
      called "Opaque".</para>

      <para>Examples of suitable formats for Transparent copies include plain
      ASCII without markup, Texinfo input format, LaTeX input format, SGML or
      XML using a publicly available DTD, and standard-conforming simple HTML
      designed for human modification. Opaque formats include PostScript, PDF,
      proprietary formats that can be read and edited only by proprietary word
      processors, SGML or XML for which the DTD and/or processing tools are
      not generally available, and the machine-generated HTML produced by some
      word processors for output purposes only.</para>

      <para>The "Title Page" means, for a printed book, the title page itself,
      plus such following pages as are needed to hold, legibly, the material
      this License requires to appear in the title page. For works in formats
      which do not have any title page as such, "Title Page" means the text
      near the most prominent appearance of the work's title, preceding the
      beginning of the body of the text.</para>
    </sect1>

    <sect1 label="2" xml:id="gpl_2">
      <title>VERBATIM COPYING</title>

      <para>You may copy and distribute the Document in any medium, either
      commercially or noncommercially, provided that this License, the
      copyright notices, and the license notice saying this License applies to
      the Document are reproduced in all copies, and that you add no other
      conditions whatsoever to those of this License. You may not use
      technical measures to obstruct or control the reading or further copying
      of the copies you make or distribute. However, you may accept
      compensation in exchange for copies. If you distribute a large enough
      number of copies you must also follow the conditions in section
      3.</para>

      <para>You may also lend copies, under the same conditions stated above,
      and you may publicly display copies.</para>
    </sect1>

    <sect1 label="3" xml:id="gpl_3">
      <title>COPYING IN QUANTITY</title>

      <para>If you publish printed copies of the Document numbering more than
      100, and the Document's license notice requires Cover Texts, you must
      enclose the copies in covers that carry, clearly and legibly, all these
      Cover Texts: Front-Cover Texts on the front cover, and Back-Cover Texts
      on the back cover. Both covers must also clearly and legibly identify
      you as the publisher of these copies. The front cover must present the
      full title with all words of the title equally prominent and visible.
      You may add other material on the covers in addition. Copying with
      changes limited to the covers, as long as they preserve the title of the
      Document and satisfy these conditions, can be treated as verbatim
      copying in other respects.</para>

      <para>If the required texts for either cover are too voluminous to fit
      legibly, you should put the first ones listed (as many as fit
      reasonably) on the actual cover, and continue the rest onto adjacent
      pages.</para>

      <para>If you publish or distribute Opaque copies of the Document
      numbering more than 100, you must either include a machine-readable
      Transparent copy along with each Opaque copy, or state in or with each
      Opaque copy a publicly-accessible computer-network location containing a
      complete Transparent copy of the Document, free of added material, which
      the general network-using public has access to download anonymously at
      no charge using public-standard network protocols. If you use the latter
      option, you must take reasonably prudent steps, when you begin
      distribution of Opaque copies in quantity, to ensure that this
      Transparent copy will remain thus accessible at the stated location
      until at least one year after the last time you distribute an Opaque
      copy (directly or through your agents or retailers) of that edition to
      the public.</para>

      <para>It is requested, but not required, that you contact the authors of
      the Document well before redistributing any large number of copies, to
      give them a chance to provide you with an updated version of the
      Document.</para>
    </sect1>

    <sect1 label="4" xml:id="gpl_4">
      <title>MODIFICATIONS</title>

      <para>You may copy and distribute a Modified Version of the Document
      under the conditions of sections 2 and 3 above, provided that you
      release the Modified Version under precisely this License, with the
      Modified Version filling the role of the Document, thus licensing
      distribution and modification of the Modified Version to whoever
      possesses a copy of it. In addition, you must do these things in the
      Modified Version:</para>

      <orderedlist numeration="upperalpha">
        <listitem>
          <para>Use in the Title Page (and on the covers, if any) a title
          distinct from that of the Document, and from those of previous
          versions (which should, if there were any, be listed in the History
          section of the Document). You may use the same title as a previous
          version if the original publisher of that version gives
          permission.</para>
        </listitem>

        <listitem>
          <para>List on the Title Page, as authors, one or more persons or
          entities responsible for authorship of the modifications in the
          Modified Version, together with at least five of the principal
          authors of the Document (all of its principal authors, if it has
          less than five).</para>
        </listitem>

        <listitem>
          <para>State on the Title page the name of the publisher of the
          Modified Version, as the publisher.</para>
        </listitem>

        <listitem>
          <para>Preserve all the copyright notices of the Document.</para>
        </listitem>

        <listitem>
          <para>Add an appropriate copyright notice for your modifications
          adjacent to the other copyright notices.</para>
        </listitem>

        <listitem>
          <para>Include, immediately after the copyright notices, a license
          notice giving the public permission to use the Modified Version
          under the terms of this License, in the form shown in the Addendum
          below.</para>
        </listitem>

        <listitem>
          <para>Preserve in that license notice the full lists of Invariant
          Sections and required Cover Texts given in the Document's license
          notice.</para>
        </listitem>

        <listitem>
          <para>Include an unaltered copy of this License.</para>
        </listitem>

        <listitem>
          <para>Preserve the section entitled "History", and its title, and
          add to it an item stating at least the title, year, new authors, and
          publisher of the Modified Version as given on the Title Page. If
          there is no section entitled "History" in the Document, create one
          stating the title, year, authors, and publisher of the Document as
          given on its Title Page, then add an item describing the Modified
          Version as stated in the previous sentence.</para>
        </listitem>

        <listitem>
          <para>Preserve the network location, if any, given in the Document
          for public access to a Transparent copy of the Document, and
          likewise the network locations given in the Document for previous
          versions it was based on. These may be placed in the "History"
          section. You may omit a network location for a work that was
          published at least four years before the Document itself, or if the
          original publisher of the version it refers to gives
          permission.</para>
        </listitem>

        <listitem>
          <para>In any section entitled "Acknowledgements" or "Dedications",
          preserve the section's title, and preserve in the section all the
          substance and tone of each of the contributor acknowledgements
          and/or dedications given therein.</para>
        </listitem>

        <listitem>
          <para>Preserve all the Invariant Sections of the Document, unaltered
          in their text and in their titles. Section numbers or the equivalent
          are not considered part of the section titles.</para>
        </listitem>

        <listitem>
          <para>Delete any section entitled "Endorsements". Such a section may
          not be included in the Modified Version.</para>
        </listitem>

        <listitem>
          <para>Do not retitle any existing section as "Endorsements" or to
          conflict in title with any Invariant Section.</para>
        </listitem>
      </orderedlist>

      <para>If the Modified Version includes new front-matter sections or
      appendices that qualify as Secondary Sections and contain no material
      copied from the Document, you may at your option designate some or all
      of these sections as invariant. To do this, add their titles to the list
      of Invariant Sections in the Modified Version's license notice. These
      titles must be distinct from any other section titles.</para>

      <para>You may add a section entitled "Endorsements", provided it
      contains nothing but endorsements of your Modified Version by various
      parties -- for example, statements of peer review or that the text has
      been approved by an organization as the authoritative definition of a
      standard.</para>

      <para>You may add a passage of up to five words as a Front-Cover Text,
      and a passage of up to 25 words as a Back-Cover Text, to the end of the
      list of Cover Texts in the Modified Version. Only one passage of
      Front-Cover Text and one of Back-Cover Text may be added by (or through
      arrangements made by) any one entity. If the Document already includes a
      cover text for the same cover, previously added by you or by arrangement
      made by the same entity you are acting on behalf of, you may not add
      another; but you may replace the old one, on explicit permission from
      the previous publisher that added the old one.</para>

      <para>The author(s) and publisher(s) of the Document do not by this
      License give permission to use their names for publicity for or to
      assert or imply endorsement of any Modified Version.</para>
    </sect1>

    <sect1 label="5" xml:id="gpl_5">
      <title>COMBINING DOCUMENTS</title>

      <para>You may combine the Document with other documents released under
      this License, under the terms defined in section 4 above for modified
      versions, provided that you include in the combination all of the
      Invariant Sections of all of the original documents, unmodified, and
      list them all as Invariant Sections of your combined work in its license
      notice.</para>

      <para>The combined work need only contain one copy of this License, and
      multiple identical Invariant Sections may be replaced with a single
      copy. If there are multiple Invariant Sections with the same name but
      different contents, make the title of each such section unique by adding
      at the end of it, in parentheses, the name of the original author or
      publisher of that section if known, or else a unique number. Make the
      same adjustment to the section titles in the list of Invariant Sections
      in the license notice of the combined work.</para>

      <para>In the combination, you must combine any sections entitled
      "History" in the various original documents, forming one section
      entitled "History"; likewise combine any sections entitled
      "Acknowledgements", and any sections entitled "Dedications". You must
      delete all sections entitled "Endorsements."</para>
    </sect1>

    <sect1 label="6" xml:id="gpl_6">
      <title>COLLECTIONS OF DOCUMENTS</title>

      <para>You may make a collection consisting of the Document and other
      documents released under this License, and replace the individual copies
      of this License in the various documents with a single copy that is
      included in the collection, provided that you follow the rules of this
      License for verbatim copying of each of the documents in all other
      respects.</para>

      <para>You may extract a single document from such a collection, and
      distribute it individually under this License, provided you insert a
      copy of this License into the extracted document, and follow this
      License in all other respects regarding verbatim copying of that
      document.</para>
    </sect1>

    <sect1 label="7" xml:id="gpl_7">
      <title>AGGREGATION WITH INDEPENDENT WORKS</title>

      <para>A compilation of the Document or its derivatives with other
      separate and independent documents or works, in or on a volume of a
      storage or distribution medium, does not as a whole count as a Modified
      Version of the Document, provided no compilation copyright is claimed
      for the compilation. Such a compilation is called an "aggregate", and
      this License does not apply to the other self-contained works thus
      compiled with the Document, on account of their being thus compiled, if
      they are not themselves derivative works of the Document.</para>

      <para>If the Cover Text requirement of section 3 is applicable to these
      copies of the Document, then if the Document is less than one quarter of
      the entire aggregate, the Document's Cover Texts may be placed on covers
      that surround only the Document within the aggregate. Otherwise they
      must appear on covers around the whole aggregate.</para>
    </sect1>

    <sect1 label="8" xml:id="gpl_8">
      <title>TRANSLATION</title>

      <para>Translation is considered a kind of modification, so you may
      distribute translations of the Document under the terms of section 4.
      Replacing Invariant Sections with translations requires special
      permission from their copyright holders, but you may include
      translations of some or all Invariant Sections in addition to the
      original versions of these Invariant Sections. You may include a
      translation of this License provided that you also include the original
      English version of this License. In case of a disagreement between the
      translation and the original English version of this License, the
      original English version will prevail.</para>
    </sect1>

    <sect1 label="9" xml:id="gpl_9">
      <title>TERMINATION</title>

      <para>You may not copy, modify, sublicense, or distribute the Document
      except as expressly provided for under this License. Any other attempt
      to copy, modify, sublicense or distribute the Document is void, and will
      automatically terminate your rights under this License. However, parties
      who have received copies, or rights, from you under this License will
      not have their licenses terminated so long as such parties remain in
      full compliance.</para>
    </sect1>

    <sect1 label="10" xml:id="gpl_10">
      <title>FUTURE REVISIONS OF THIS LICENSE</title>

      <para>The Free Software Foundation may publish new, revised versions of
      the GNU Free Documentation License from time to time. Such new versions
      will be similar in spirit to the present version, but may differ in
      detail to address new problems or concerns. See <link
      xlink:href="http://www.gnu.org/copyleft/"
      xmlns:xlink="http://www.w3.org/1999/xlink">http://www.gnu.org/copyleft/</link>.</para>

      <para>Each version of the License is given a distinguishing version
      number. If the Document specifies that a particular numbered version of
      this License "or any later version" applies to it, you have the option
      of following the terms and conditions either of that specified version
      or of any later version that has been published (not as a draft) by the
      Free Software Foundation. If the Document does not specify a version
      number of this License, you may choose any version ever published (not
      as a draft) by the Free Software Foundation.</para>
    </sect1>
  </appendix>

  <!-- ********************************************************************** -->

  <!-- ********************************************************************** -->

  <!--   GLOSSARY                                                            -->

  <!-- ********************************************************************** -->

  <!-- ********************************************************************** -->

  <appendix xml:id="app_glossary">
    <title>Debrief Glossary</title>

    <sect1 xml:id="gloss_intro">
      <title>Introduction</title>

      <para>This section contains explanations of terms used within
      Debrief</para>
    </sect1>

    <glossary xml:id="glossary">
      <glossentry xml:id="G_AUTEC">
        <glossterm>AUTEC</glossterm>

        <glossdef>
          <para>Atlantic Underwater Test Facility. Data files from this
          facility which are to be imported into Debrief should be suffixed
          with "RAO". The origin of AUTEC is: <screen>
              <markup>
23º 26' 37.6280" N
77º 38' 6.8250" W
              </markup>
            </screen></para>
        </glossdef>
      </glossentry>

      <glossentry xml:id="G_AFWTF">
        <glossterm>AFWTF</glossterm>

        <glossdef>
          <para>Atlantic Fleet Weapons Training Facility. Data files from this
          facility which are to be imported into Debrief should be suffixed
          with "PRN". The origin of AFWTF is : <screen>
              <markup>
17º 38.1577' N 
065º 4.2065' W</markup>
            </screen></para>
        </glossdef>
      </glossentry>

      <glossentry xml:id="g_annotation">
        <glossterm>Annotation</glossterm>

        <glossdef>
          <para>An annotation is the generic term used to describe the graphic
          elements added to a plot which do not represent vehicle positions,
          or bearings recorded on vehicle-mounted sensors. Examples of
          annotations are rectangles, ellipses and lines.</para>
        </glossdef>
      </glossentry>

      <glossentry xml:id="g_asset">
        <glossterm>ASSET</glossterm>

        <glossdef>
          <para>The <abbrev>Advanced Scenario Simulator for the Evaluation of
          Tactics</abbrev>, a modular simulation suite intended for high-level
          simulation of maritime tactical scenarios by a relatively
          inexperienced user (read: uniformed). ASSET was actually the
          predecessor to Debrief, with the initial Debrief software being
          created to analyse ASSET simulation results. Quickly it was
          recognised that Debrief could also be usefully employed in the
          analysis of real exercise tracks. Aaah, how close we came to not
          having Debrief at all...</para>
        </glossdef>
      </glossentry>

      <glossentry xml:id="g_bearing_rate">
        <glossterm>Bearing rate</glossterm>

        <glossdef>
          <para>Bearing rate within the application is calculated using the
          following formula: <screen>
<markup>Bdot = ((Tspd * sin(Tcrse) - Ospd * sin(Ocrse)) *
cos(brg) - (Tspd * cos(Tcrse) - Ospd * cos(Ocrse)) *
sin(brg)) / range * 60</markup>
</screen><screen>
<markup>Rdot = Range Rate (yds/min)
Bdot = Bearing Rate (degs/min)
Tspd, Tcrse = Target course and speed (degs &amp; yps)
Ospd, Ocrse = Ownship course and speed (degs &amp; yps)
brg = Bearing to target from ownship (degs)
range = Range to target from ownship (yds)</markup>
</screen></para>

          <para>Positive and negative bearing rates are named Right and Left
          according to naval convention, abbreviated to R and L in the
          tote.</para>
        </glossdef>
      </glossentry>

      <glossentry xml:id="g_bookmarks">
        <glossterm>Bookmarks</glossterm>

        <glossdef>
          <para>The combination of a DTG, a remark and the name of a
          plot-file. Debrief NG presents the series of bookmarks allowing you
          to quickly move through events of interest across a series of
          plot-files.</para>
        </glossdef>
      </glossentry>

      <glossentry xml:id="g_buoyfields">
        <glossterm>Buoyfields</glossterm>

        <glossdef>
          <para>A series of sonar buoys which are laid in a particular pattern
          during Anti-Submarine Warfare.</para>
        </glossdef>
      </glossentry>

      <glossentry xml:id="G_BUILD_DATE">
        <glossterm>Build date</glossterm>

        <glossdef>
          <para>Each copy of Debrief is aware of the date it was built. Find
          this out by selecting <guimenuitem>About</guimenuitem> from the
          <guimenu>Help</guimenu> menu.</para>
        </glossdef>
      </glossentry>

      <glossentry xml:id="g_cheat">
        <glossterm>Cheat sheets</glossterm>

        <glossdef>
          <para>Cheat sheets guide users through tasks. The task is broken
          down into steps and presented to the user one step at a time, and
          the user checks off the steps as he/she completes them.</para>
        </glossdef>
      </glossentry>

      <glossentry xml:id="g_cmap">
        <glossterm>CMAP</glossterm>

        <glossdef>
          <para><abbrev>Core Maritime Analysis Platform</abbrev> a framework
          of components intended to be reused across a range of maritime
          analysis applications. The two initial CMAP applications are Debrief
          and <glossterm linkend="g_asset">ASSET</glossterm>.</para>
        </glossdef>
      </glossentry>

      <glossentry xml:id="g_coastline_file">
        <glossterm>Coastline file</glossterm>

        <glossdef>
          <para>Debrief expects to <indexterm>
              <primary>Coastline</primary>

              <secondary>File Format</secondary>
            </indexterm>find a coastline file (named
          <application>World.dat</application>) in its installation directory.
          Debrief loads this file in the background as soon as it opens;
          regardless of whether the user has requested to add a coastline to
          the current plot. Once the coastline is loaded (for the standard
          1.2Mb file this takes around 8 seconds) there is no further
          performance penalty within the application.</para>

          <para>The coastline file should be formatted in the following way:
          <itemizedlist>
              <listitem>
                <para>The coastline consists of a series of coastline
                segments. Each segment is drawn as a continuous polygon by the
                application.</para>
              </listitem>

              <listitem>
                <para>Each segment begins with the # -b separator on a line of
                its own</para>
              </listitem>

              <listitem>
                <para>Then there are a series of lines each containing a point
                in latitude and longitude expressed in decimal degrees (to 6
                decimal places in the standard file).</para>
              </listitem>
            </itemizedlist><screen>
              <markup>
# -b
-7.491098    4.257159
-7.523953    4.245425
-9.112761    5.008146
-9.464786    5.339050
-9.807424    5.681688
# -b
-9.807424    5.681688
-10.004558    5.845966
-11.152161    6.606341
-11.131039    6.639197
-11.163895    6.672052
-11.307052    6.761232
-11.351642    6.803475
              </markup>
            </screen></para>
        </glossdef>
      </glossentry>

      <glossentry xml:id="g_DeadReckoning">
        <glossterm>Dead reckoning</glossterm>

        <glossdef>
          <para>Dead reckoning (DR) is the process of estimating one's current
          position based upon a previously determined position, or fix, and
          advancing that position based upon known or estimated speeds over
          elapsed time, and course. Debrief plots tracks in DR mode by
          plotting the positions as a series of course/speed legs from an
          origin. Debrief plots lats/longs unchanged when in <glossterm
          linkend="g_OverTheGround">Over the Ground</glossterm> mode.</para>
        </glossdef>
      </glossentry>

      <glossentry xml:id="g_display_mode">
        <glossterm>Display mode</glossterm>

        <glossdef>
          <para>Each of the display modes used on the Debrief plot represents
          a different method of stepping through the plot. When in the normal
          mode each track is shown in full, with a highlight drawn over the
          current point (as indicated in the Tote). When in snail mode only
          the current point plus an optional back-track is plotted.</para>
        </glossdef>
      </glossentry>

      <glossentry xml:id="g_earth_model">
        <glossterm>Earth Model</glossterm>

        <glossdef>
          <para>The Earth Model used by the application is modular and
          interchangeable. In the initial release of the application the
          calculations use the Rhumb-Line Formulae, as described in 'Admiralty
          Manual of Navigation, Volume 2, 1973'. Short-distance sailing is
          defined as "the following of a rhumb-line track for a distance not
          greater than 600"</para>
        </glossdef>
      </glossentry>

      <glossentry xml:id="g_dtg">
        <glossterm>DTG</glossterm>

        <glossdef>
          <para>Acronym representing Date Time Group</para>
        </glossdef>
      </glossentry>

      <glossentry xml:id="g_etopo">
        <glossterm>ETOPO</glossterm>

        <glossdef>
          <para>Standard for digital topographic data, predominantly
          distributed by the NOAA</para>
        </glossdef>
      </glossentry>

      <glossentry xml:id="g_highlighter">
        <glossterm>Highlighter</glossterm>

        <glossdef>
          <para>The highlighter is the graphic used to indicate the current
          point on a track. Use of different highlighters allows range rings
          or a vessel-specific symbol to be plotted at the current
          point</para>
        </glossdef>
      </glossentry>

      <glossentry xml:id="g_layer">
        <glossterm>Layer</glossterm>

        <glossdef>
          <para>A collection of objected plotted on the
          <application>Debrief</application> Plot. Each layer can be switched
          on and off individually using the <link linkend="layer_mgr">Layer
          Manager</link>. When written to a plot-file, each layer is stored
          separately - making it quite easy to copy individual layers out of a
          plot-file using a text-editor and collating them into a new file.
          (An example of this would be drawing exercise areas into one
          session, then moving them all into one layer, save the file to disk,
          copy this layer to a file of its own, then dropping this file of
          exercise areas into new files - an example of this is in the <link
          linkend="vpf_how_to">VPF best-practice</link>.)</para>
        </glossdef>
      </glossentry>

      <glossentry xml:id="g_MWC">
        <glossterm>MWC</glossterm>

        <glossdef>
          <para>[Extracts taken from MWC 2000 Flyer]</para>

          <para>Under CinCFleet, the Maritime Warfare Centre (MWC) is a
          'one-stop shop' for the evolution and dissemination of
          maritime/joint doctrine and concepts through teaching, tactical
          development, operational analysis, force development and
          wargaming.</para>

          <para>It also provides the focus for the development and practice of
          operational level warfighting, planning and decision making.</para>

          <para>The MWC was formed on 1 October 1995 merging the activities of
          the Maritime Warfare Development Centre at HMS Dolphin and the
          Maritime Tactical School at HMS Dryad to create a focal point for
          doctrine and tactical development.</para>
        </glossdef>
      </glossentry>

      <glossentry xml:id="g_narrative">
        <glossterm>Narrative</glossterm>

        <glossdef>
          <para>A series of time-related text messages. Typically these may
          represent the narrative recorded in a control room during an
          exercise, but alternatively they may contain a series of status
          messages retrieved from a sensor or weapon. All that is required is
          that the message have a DTG attached and that it may be represented
          in text form.</para>
        </glossdef>
      </glossentry>

      <glossentry xml:id="g_OverTheGround">
        <glossterm>Over the ground</glossterm>

        <glossdef>
          <para>Plotting a Debrief track using the recorded sensor positions.
          Whilst Debrief stores course and speed data, and uses their values
          in calculations, they do not contribute to how the positions are
          plotted. Debrief plots a track using course and speed data when in
          <glossterm linkend="g_DeadReckoning">Dead Reckoning</glossterm>
          mode.</para>
        </glossdef>
      </glossentry>

      <glossentry xml:id="g_overview">
        <glossterm>Overview</glossterm>

        <glossdef>
          <para>A zoomed out plot showing the full dataset currently loaded.
          Double clicking on this plot forces the main plot to re-centre on
          the selected point, and dragging an area on this plot forces the
          main plot to zoom in on the selected area. The formatting on the
          overview chart is identical to (and unchangeable from) that on the
          main plot, with the exception that text is not plotted - to reduce
          clutter.</para>
        </glossdef>
      </glossentry>

      <glossentry xml:id="g_perspective">
        <glossterm>Perspective</glossterm>

        <glossdef>
          <para>Each Workbench window contains one or more perspectives. A
          perspective defines the initial set and layout of views in the
          Workbench window. Within the window, each perspective shares the
          same set of editors. Each perspective provides a set of
          functionality aimed at accomplishing a specific type of task or
          works with specific types of resources. For example, the
          <guibutton>Tactical Analysis</guibutton> perspective combines views
          that you would commonly use while editing analysing tactical files,
          while the <guibutton>Contact Ork</guibutton> perspective would help
          aliens (typically named Mork) in contacting their mother planet -
          together with the VOIP software link direct to Orson. As you work in
          the Workbench, you will probably switch perspectives frequently,
          especially if you're having Mindy trouble.</para>

          <para>Perspectives control what appears in certain menus and
          toolbars. They define visible action sets, which you can change to
          customize a perspective. You can save a perspective that you build
          in this manner, making your own custom perspective that you can open
          again later.</para>

          <para>You can use the <guimenu>General &gt; Perspectives</guimenu>
          preference page to open perspectives in the same window or in a new
          window.</para>
        </glossdef>
      </glossentry>

      <glossentry xml:id="g_pfwtf">
        <glossterm>PFWTF</glossterm>

        <glossdef>
          <para>Pacific Fleet Weapons Training Facility (see AFWTF). The
          origin of PFWTF is : <screen>              <markup>
22º 7.16646' N
159º 55.17' W
           </markup>          </screen></para>
        </glossdef>
      </glossentry>

      <glossentry xml:id="g_plt">
        <glossterm>Plot</glossterm>

        <glossdef>
          <para>A graphic <emphasis>God's-eye</emphasis> representation of the
          current dataset. By default the plot has a black background but this
          may be altered by the user.</para>
        </glossdef>
      </glossentry>

      <glossentry xml:id="g_plot_file">
        <glossterm>Plot-File</glossterm>

        <glossdef>
          <para>A file containing the following: <itemizedlist>
              <listitem>
                <para>The data originally loaded from the Replay file</para>
              </listitem>

              <listitem>
                <para>Any formatting applied to the data originally
                loaded</para>
              </listitem>

              <listitem>
                <para>The details of any features added to the plot from the
                toolbars</para>
              </listitem>

              <listitem>
                <para>The coordinates of the current view of the data</para>
              </listitem>

              <listitem>
                <para>The settings of any controls used in Debrief (time on
                the Tote, primary/secondary tracks, etc)</para>
              </listitem>
            </itemizedlist> Plot-Files end with an XML suffix and may be
          viewed in <application>Internet Explorer</application> or edited
          using <application>Notepad</application>.</para>
        </glossdef>
      </glossentry>

      <glossentry xml:id="g_property_window">
        <glossterm>Properties window</glossterm>

        <glossdef>
          <para>A view containing a list of all of the editable properties for
          an object within Debrief. Where applicable, custom editors are
          supplied (Color, Location, DTG, etc)</para>
        </glossdef>
      </glossentry>

      <glossentry xml:id="g_range_rate">
        <glossterm>Range rate</glossterm>

        <glossdef>
          <para>Range rate within the application is calculated using the
          following formula: <screen>              <markup>
Rdot = (Tspd * cos (Tcrse - brg) - 
Ospd * cos(Ocrse - brg) /*60
              </markup>          </screen><screen>
              <markup>Rdot = Range Rate (yds/min)
Tspd, Tcrse = Target course and speed (degs &amp; yps)
Ospd, Ocrse = Ownship course and speed (degs &amp; yps)
brg = Bearing to target from ownship (degs)
              </markup>       </screen></para>
        </glossdef>
      </glossentry>

      <glossentry xml:id="g_replay">
        <glossterm>Replay</glossterm>

        <glossdef>
          <para>Replay is the name of the Unix application used for viewing
          tracks back in the early 90's at MWC</para>
        </glossdef>
      </glossentry>

      <glossentry xml:id="g_serial">
        <glossterm>Serial</glossterm>

        <glossdef>
          <para>A "block" of exercise time, typically a sub-section of an
          exercise. An analyst will normally analyse and exercise one serial
          at a time, and it is usual for the exercise data to be broken down
          into serials.</para>
        </glossdef>
      </glossentry>

      <glossentry xml:id="g_sensor">
        <glossterm>Sensor</glossterm>

        <glossdef>
          <para>A sensor is defined as source of bearing-related information.
          As such, it could clearly be an acoustic sensor such as a sonar, but
          could also be a periscope or radar.
          <application>Debrief</application> makes no specific assumptions
          regarding what type of sensor is being represented.</para>
        </glossdef>
      </glossentry>

      <glossentry xml:id="g_sensor_contact">
        <glossterm>Sensor contact</glossterm>

        <glossdef>
          <para>This is an individual contact recorded on a sensor, a single
          bearing line reaching from the sensor location (origin) along the
          contact bearing to the contact range.</para>
        </glossdef>
      </glossentry>

      <glossentry xml:id="g_session">
        <glossterm>Session</glossterm>

        <glossdef>
          <para>The layers, projection details, and settings of any
          GUI-elements for the current view</para>
        </glossdef>
      </glossentry>

      <glossentry xml:id="g_slant_range">
        <glossterm>Slant range</glossterm>

        <glossdef>
          <para>The line of sight distance between two points, not at the same
          level relative to a specific datum. Normally in Debrief range is
          just calculated in two-dimensions (at the surface), but slant ranges
          can be requested via the Preferences window. Slant ranges are
          particularly useful in Debrief when analysing the proximity of two
          entities that are very close when measured at the surface but who
          possess a significant depth separation.</para>
        </glossdef>
      </glossentry>

      <glossentry xml:id="g_snail_trail">
        <glossterm>Snail trail</glossterm>

        <glossdef>
          <para>A mode within <application>Debrief</application> where only
          the current vessel position plus a short back-track of previous
          positions is shown.</para>
        </glossdef>
      </glossentry>

      <glossentry xml:id="g_stepper_control">
        <glossterm>Stepper control</glossterm>

        <glossdef>
          <para>The Stepper Control is the collection of controls at the top
          of the Tote panel. The Stepper Control provides controls to move the
          current time backwards and forwards, controls to edit the stepper
          itself (edit properties and change display mode).</para>
        </glossdef>
      </glossentry>

      <glossentry xml:id="g_symbology">
        <glossterm>Symbology</glossterm>

        <glossdef>
          <para>This pair of text characters contained in an
          <filename>REP</filename> file indicate the formatting to be applied
          to this particular track/fix/annotation, although they can be
          over-ridden once the data is open in
          <application>Debrief</application>.</para>
        </glossdef>
      </glossentry>

      <glossentry xml:id="g_tzero">
        <glossterm>T-Zero</glossterm>

        <glossdef>
          <para>A specific time of interest, particularly the start of a
          particular event. Contexts typically have their own convention of
          t-zero. Lightweight torpedo launches use weapon-splash time.</para>
        </glossdef>
      </glossentry>

      <glossentry xml:id="g_tma_solution">
        <glossterm>TMA solution</glossterm>

        <glossdef>
          <para>Warships (submarines in particular) use Target Motion Analysis
          (TMA) to produce an estimate of target range. course and speed when
          the target is held on a bearing/frequency only sensor. TMA solutions
          frequently represent uncertainty over target location by
          representing the location as an ellipse - given by a centre-point,
          an orientation and dimensions for the maximum and minimum axis (as
          diameter, not radius).</para>
        </glossdef>
      </glossentry>

      <glossentry xml:id="g_track">
        <glossterm>Track</glossterm>

        <glossdef>
          <para>A series of positions recorded for a particular vehicle (ship,
          submarine, helo, etc). A track has its own characteristics such as
          colour, label and symbol frequency, and the symbol used to represent
          it when the <link linkend="intro_to_sym_sets">symbol
          highlighter</link> is in use.</para>
        </glossdef>
      </glossentry>

      <glossentry xml:id="g_tote">
        <glossterm>Tote</glossterm>

        <glossdef>
          <para>A GUI panel located by default at the lower-left hand side of
          the <application>Debrief</application> window. The Tote contains the
          Time Stepper, beneath which are shown the primary and secondary
          tracks, when assigned. When stepping forward through a
          <glossterm>serial</glossterm> the Tote contains data calculated from
          the current vessel positions.</para>
        </glossdef>
      </glossentry>

      <glossentry xml:id="g_vpf">
        <glossterm>VPF</glossterm>

        <glossdef>
          <para>The Vector Product Format is the format of vectored data which
          may be viewed by <application>Debrief</application>. The main type
          of VPF data is the Vector Map Level 0, an unclassified global
          database which includes coastlines, national borders and depth
          contours. Its supplier ( <link xlink:href="http://www.nima.mil"
          xmlns:xlink="http://www.w3.org/1999/xlink">WWW.NIMA.MIL</link>)
          describes it as: <quote>The Vector Product Format (VPF) is a
          standard format, structure, and organization for large geographic
          databases that are based on a georelational data model and are
          intended for direct use. </quote></para>
        </glossdef>
      </glossentry>

      <glossentry xml:id="g_xml">
        <glossterm>XML</glossterm>

        <glossdef>
          <para>The eXtensible Markup Language, as recommend by the World Wide
          Web consortium. See the <link linkend="intro_xml">XML
          description</link> of the Debrief reference guide</para>
        </glossdef>
      </glossentry>
    </glossary>
  </appendix>

  <!-- ********************************************************************** -->

  <!-- ********************************************************************** -->

  <!-- Index-->

  <!-- ********************************************************************** -->

  <!-- ********************************************************************** -->
  <index xml:id="the_index">  <title>Index</title>
  </index>

  <!-- ********************************************************************** -->

  <!-- ********************************************************************** -->

  <!-- Colophon                                                              -->

  <!-- ********************************************************************** -->

  <!-- ********************************************************************** -->

  <colophon xml:id="colophon">
    <para>Debrief has been authored in DocBook XML version 5.0 using Oxygen V12.
    Version 6.5.2 of Saxon used version 1.76 of the Docbook XSL
    stylesheets and version 1.0 of fop to publish the document to PDF and
    HTML.</para>

    <para>The majority of the text was originally imported from previous
        <application>Debrief</application> help-files, but the reviews conducted in the transfer to
      DocBook have resulted in many corrections and clarifications. <uri
        xlink:href="http://sharp-words.co.uk/">Sharp Words</uri>  provided a  block of
      tidying/reformatting in Summer 2011, including an update of the sources to Docbook 5.0.</para>
  </colophon>
</book>
<!-- 
Local Variables:
mode: sgml
sgml-indent-step: 2
sgml-indent-data: t
sgml-set-face: t
End:
-->
