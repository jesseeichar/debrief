<?xml version="1.0" encoding="UTF-8"?>
<project name="org.mwc.debrief.help" default="docbook_to_eclipse" basedir=".">

	<!-- and the cvs-logging related ones -->
	<property name="contribDir" value="../contribs" />
	<property name="sourceDir" value="./" description="top level directory within which all our sources are stored" />
	<property name="deployDir" value="../deploy" description="where we start building the output set" />
	<property name="buildCVSLogDir" value="${deployDir}/cvs" />	
	
	<!-- and the docbook/help related bits -->
	<property name="contribDir" value="../contribs" />
	<property name="helpDir" value="./" />
	<property name="helpDest" value="${helpDir}\html\legacy" />
	<property name="pdfDest" value="${helpDir}\html\pdf" />
	
	<target name="_log1_produce" description="produce the cvs change logs">

		<!-- clear the output directory -->
		<delete dir="${buildCVSLogDir}" />

		<!-- create the output directory if we have to -->
		<mkdir dir="${buildCVSLogDir}" />
		<mkdir dir="${buildCVSLogDir}/statcvs" />

		<!-- produce the CVS log -->
		<echo message="about to log:${sourceDir}"/>
		
		<tstamp>
			<format property="TODAY_UK" pattern="yyyy-MM-dd" locale="en" />
		</tstamp>

		<cvs  quiet="yes" dest="${sourceDir}" output="${buildCVSLogDir}/statcvs.log">
			<commandline>
				<argument line="log -d&quot;2006-01-01&quot;&lt;&quot;${TODAY_UK}&quot;  ../" />
			</commandline> 
		</cvs>
	</target>




	<target name="_log2_format" description="use the stylesheet tidier">
		<antcall target="_cvs_stat_formatter">
			<param name="cvs_stat_outputDir" value="${buildCVSLogDir}/statcvs/short" />
			<param name="cvs_stat_stylesheet" value="../org.mwc.cmap.installer/statcvs_template/single_page_suite.xml" />
			<param name="cvs_stat_outputTitle" value="Abbreviated change statistics" />
		</antcall>

		<antcall target="_cvs_stat_formatter">
			<param name="cvs_stat_outputDir" value="${buildCVSLogDir}/statcvs/long" />
			<param name="cvs_stat_stylesheet" value="../org.mwc.cmap.installer/statcvs_template/suite.xml" />
			<param name="cvs_stat_outputTitle" value="Verbose change statistics" />
		</antcall>

	</target>


	<target name="_log3_copy" description="copy the tidy cvs logs to the help structure so that they can be included in help-references">
		<copy todir="..\org.mwc.debrief.help\html\history">
			<fileset dir="${buildCVSLogDir}" />
		</copy>
	</target>

	<target name="cvs_log" description="do the steps to produce a cvs log">
		<!--<antcall target="_log1_produce" />
		<antcall target="_log2_format" />
		<antcall target="_log3_copy" />  -->
	</target>	


	<target name="clear_output" description="ditch the existing output files">
		<delete dir="${helpDest}" />
	</target>
	
	<target name="docbook_to_eclipse" description="Generate html from docbook">
		<!-- clear the output directories -->
		<antcall target="clear_output"></antcall>
		
		<!-- generate the output -->
		<mkdir dir="${helpDest}" />
		<mkdir dir="${pdfDest}" />
		

		<!-- build the history content 
		<antcall target="cvs_log"/>		-->

		<!-- generate the HTML  -->
		<echo message="Generating HTML"/>
		<java classpath="${contribDir}\saxon6_5_2\saxon.jar" fork="yes" dir="${helpDest}" classname="com.icl.saxon.StyleSheet" maxmemory="128m">
			<arg value="D:\Dev\cmap2\org.mwc.debrief.help\docbook/ng_help.xml" />
			<arg value="D:\Dev\cmap2\org.mwc.debrief.help\docbook/eclipse_html_style.xsl" />
		</java> 
			
		<!-- hey, to maintain the correct document locations, we've got to copy the generated content back
		  into the top-level of the docbook output directories -->
		<echo message="Copying HTML"/>
		<copy todir="${helpDest}\" preservelastmodified="yes">
			<fileset dir="${helpDest}\html\legacy" />
		</copy>
		<!-- and delete the duff directory (to stop us getting confused... -->
		<delete dir="${helpDest}\html\legacy" />
		
		
		<!-- also copy the images to the target directory -->
		<echo message="Copying images"/>
		<copy todir="${helpDest}\figures" preservelastmodified="yes">
			<fileset dir="${helpDir}\docbook/figures" />
		</copy>
		<copy todir="${helpDest}\images" preservelastmodified="yes">
			<fileset dir="${helpDir}\docbook/images" />
		</copy>
		<!-- and the stylesheet -->
		<copy todir="${helpDest}" preservelastmodified="yes">
			<fileset file="${helpDir}\docbook/header.css" />
		</copy>

		
		<!-- try to insert our additional section content -->
		<echo message="Inserting history"/>
		<antcall target="insert_history_link"/>
		
		<!-- and move the generated toc back to the top level -->
		<move file="${helpDest}\toc.xml" todir="${helpDest}"/>
		
	</target>


	<target name="docbook_to_pdf" description="Generate html from docbook">

	  <property name="fopVersion" value="fop-0.20.5rc" description="the current version of FOP"/>
	  <property name="fopDir" value="C:\docbook\${fopVersion}" description="where the fop libraries are located"/>
	  <property name="docName" value="Debrief User Guide.pdf" description="The Debrief document file"/>

    <!-- produce the FO file, ready for PDF-->
    <java classpath="c:\docbook\saxon6_5_2\saxon.jar" fork="yes" dir="${pdfDest}"
      classname="com.icl.saxon.StyleSheet" maxmemory="512m">
      <arg value="-o"/>
      <arg value="out.fo"/>
			<arg value="D:\Dev\cmap2\org.mwc.debrief.help\docbook/ng_help.xml" />
			<arg value="D:\Dev\cmap2\org.mwc.debrief.help\docbook/fo_style.xsl" />
    </java>
		
		<echo message="fo complete, now going to pdf"/>	
		
    <!-- now convert the fo file to PDF format-->
    <java classpath="${fopDir}\build\fop.jar;${fopDir}\lib\batik.jar;${fopDir}\lib\xalan-2.4.1.jar;${fopDir}\lib\xercesImpl-2.2.1.jar;${fopDir}\lib\xml-apis.jar;${fopDir}\lib\avalon-framework-cvs-20020806.jar;${fopDir}\lib\logkit-1.0.jar;${fopDir}\lib\jimi-1.0.jar"
      fork="yes" dir="${pdfDest}"
      classname="org.apache.fop.apps.Fop" maxmemory="512m">
      <sysproperty key="FOPD" value="c:\docbook\${fopVersion}\"/>
      <arg value="-d"/>
      <arg value="out.fo"/>
      <arg value="${docName}"/>
    </java>
		
		
		<!-- also copy the images to the target directory -->
		<copy todir="${helpDest}\figures" preservelastmodified="yes">
			<fileset dir="${helpDir}\docbook/figures" />
		</copy>
		<copy todir="${helpDest}\images" preservelastmodified="yes">
			<fileset dir="${helpDir}\docbook/images" />
		</copy>
		
	</target>	
	
	<!-- now, how do we tie the two together? -->
	<target name="insert_history_link">
		<property name="dupFile" value="${helpDest}\toc2.xml" />

		<!-- make sure the target file is gone -->
		<delete file="${dupFile}"/>
		
		<!-- create a fresh copy -->
		<copy file="${helpDest}\toc.xml" tofile="${dupFile}"/>
		
		<!-- try the change -->
		<replace file="${dupFile}">
			<replacetoken>label="Getting started"</replacetoken>
			  <replacevalue>
			  	label="History">&lt;topic label="Short" href="\html\history\statcvs\short\index.html"/&gt;
			  	&lt;topic label="Verbose" href="\html\history\statcvs\long\index.html"/&gt;&lt;/topic&gt;
			  	&lt;topic label="Getting started" </replacevalue>
		</replace>
		
	</target>
	
	
	<!--
	######################################################################################
	##	utility tasks
	######################################################################################
	  -->

	<target name="_cvs_stat_formatter" description="use the stylesheet tidier">
		<!-- ok, delete the output directory -->
		<delete dir="${cvs_stat_outputDir}" />

		<!-- and create it afresh -->
		<mkdir dir="${cvs_stat_outputDir}" />

		<!-- and produce the output -->
		<java dir="${sourceDir}" jar="${contribDir}/statcvs/statcvs-xml-0.9.6-full.jar" fork="true">
			<jvmarg line="-mx128m" />
			<arg line=" -output-dir ${cvs_stat_outputDir}
	            -title '${cvs_stat_outputTitle}'
	            -suite ${cvs_stat_stylesheet}
				../deploy/cvs/statcvs.log" />
		</java>
	</target>
	
	
</project>