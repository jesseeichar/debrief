// Stub class generated by rmic, do not edit.
// Contents subject to change without notice.

package ASSET.Util.RMI.Client;

public final class ObserverBaseImpl_Stub
    extends java.rmi.server.RemoteStub
    implements ASSET.Util.RMI.ScenarioCreatedListenerRMI, ASSET.Util.RMI.ScenarioSteppedListenerRMI, ASSET.Util.RMI.ParticipantsChangedListenerRMI, ASSET.Util.RMI.PropertyChangeListenerRMI
{
    @SuppressWarnings("deprecation")
		private static final java.rmi.server.Operation[] operations = {
	new java.rmi.server.Operation("void newParticipant(int)"),
	new java.rmi.server.Operation("void participantRemoved(int)"),
	new java.rmi.server.Operation("void propertyChange(java.lang.String, java.lang.Object, java.lang.Object)"),
	new java.rmi.server.Operation("void restart()"),
	new java.rmi.server.Operation("void scenarioCreated(int)"),
	new java.rmi.server.Operation("void scenarioDestroyed(int)"),
	new java.rmi.server.Operation("void step(long)")
    };
    
    private static final long interfaceHash = -6458680418860554713L;
    
    private static final long serialVersionUID = 2;
    
    private static boolean useNewInvoke;
    private static java.lang.reflect.Method $method_newParticipant_0;
    private static java.lang.reflect.Method $method_participantRemoved_1;
    private static java.lang.reflect.Method $method_propertyChange_2;
    private static java.lang.reflect.Method $method_restart_3;
    private static java.lang.reflect.Method $method_scenarioCreated_4;
    private static java.lang.reflect.Method $method_scenarioDestroyed_5;
    private static java.lang.reflect.Method $method_step_6;
    
    static {
	try {
	    java.rmi.server.RemoteRef.class.getMethod("invoke",
		new java.lang.Class[] {
		    java.rmi.Remote.class,
		    java.lang.reflect.Method.class,
		    java.lang.Object[].class,
		    long.class
		});
	    useNewInvoke = true;
	    $method_newParticipant_0 = ASSET.Util.RMI.ParticipantsChangedListenerRMI.class.getMethod("newParticipant", new java.lang.Class[] {int.class});
	    $method_participantRemoved_1 = ASSET.Util.RMI.ParticipantsChangedListenerRMI.class.getMethod("participantRemoved", new java.lang.Class[] {int.class});
	    $method_propertyChange_2 = ASSET.Util.RMI.PropertyChangeListenerRMI.class.getMethod("propertyChange", new java.lang.Class[] {java.lang.String.class, java.lang.Object.class, java.lang.Object.class});
	    $method_restart_3 = ASSET.Util.RMI.ParticipantsChangedListenerRMI.class.getMethod("restart", new java.lang.Class[] {});
	    $method_scenarioCreated_4 = ASSET.Util.RMI.ScenarioCreatedListenerRMI.class.getMethod("scenarioCreated", new java.lang.Class[] {int.class});
	    $method_scenarioDestroyed_5 = ASSET.Util.RMI.ScenarioCreatedListenerRMI.class.getMethod("scenarioDestroyed", new java.lang.Class[] {int.class});
	    $method_step_6 = ASSET.Util.RMI.ScenarioSteppedListenerRMI.class.getMethod("step", new java.lang.Class[] {long.class});
	} catch (java.lang.NoSuchMethodException e) {
	    useNewInvoke = false;
	}
    }
    
    // constructors
    public ObserverBaseImpl_Stub() {
	super();
    }
    public ObserverBaseImpl_Stub(final java.rmi.server.RemoteRef ref) {
	super(ref);
    }
    
    // methods from remote interfaces
    
    // implementation of newParticipant(int)
    @SuppressWarnings("deprecation")
		public void newParticipant(final int $param_int_1)
	throws java.rmi.RemoteException
    {
	try {
	    if (useNewInvoke) {
		ref.invoke(this, $method_newParticipant_0, new java.lang.Object[] {new java.lang.Integer($param_int_1)}, 6058815235368992318L);
	    } else {
		final java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 0, interfaceHash);
		try {
		    final java.io.ObjectOutput out = call.getOutputStream();
		    out.writeInt($param_int_1);
		} catch (java.io.IOException e) {
		    throw new java.rmi.MarshalException("error marshalling arguments", e);
		}
		ref.invoke(call);
		ref.done(call);
	    }
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of participantRemoved(int)
    @SuppressWarnings("deprecation")
		public void participantRemoved(final int $param_int_1)
	throws java.rmi.RemoteException
    {
	try {
	    if (useNewInvoke) {
		ref.invoke(this, $method_participantRemoved_1, new java.lang.Object[] {new java.lang.Integer($param_int_1)}, 6918855842559771137L);
	    } else {
		final java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 1, interfaceHash);
		try {
		    final java.io.ObjectOutput out = call.getOutputStream();
		    out.writeInt($param_int_1);
		} catch (java.io.IOException e) {
		    throw new java.rmi.MarshalException("error marshalling arguments", e);
		}
		ref.invoke(call);
		ref.done(call);
	    }
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of propertyChange(String, Object, Object)
    @SuppressWarnings("deprecation")
		public void propertyChange(final java.lang.String $param_String_1, final java.lang.Object $param_Object_2, final java.lang.Object $param_Object_3)
	throws java.rmi.RemoteException
    {
	try {
	    if (useNewInvoke) {
		ref.invoke(this, $method_propertyChange_2, new java.lang.Object[] {$param_String_1, $param_Object_2, $param_Object_3}, 6250943665385694296L);
	    } else {
		final java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 2, interfaceHash);
		try {
		    final java.io.ObjectOutput out = call.getOutputStream();
		    out.writeObject($param_String_1);
		    out.writeObject($param_Object_2);
		    out.writeObject($param_Object_3);
		} catch (java.io.IOException e) {
		    throw new java.rmi.MarshalException("error marshalling arguments", e);
		}
		ref.invoke(call);
		ref.done(call);
	    }
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of restart()
    @SuppressWarnings("deprecation")
		public void restart()
	throws java.rmi.RemoteException
    {
	try {
	    if (useNewInvoke) {
		ref.invoke(this, $method_restart_3, null, -2563244869731757367L);
	    } else {
		final java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 3, interfaceHash);
		ref.invoke(call);
		ref.done(call);
	    }
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of scenarioCreated(int)
    @SuppressWarnings("deprecation")
		public void scenarioCreated(final int $param_int_1)
	throws java.rmi.RemoteException
    {
	try {
	    if (useNewInvoke) {
		ref.invoke(this, $method_scenarioCreated_4, new java.lang.Object[] {new java.lang.Integer($param_int_1)}, -8759210789926416634L);
	    } else {
		final java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 4, interfaceHash);
		try {
		    final java.io.ObjectOutput out = call.getOutputStream();
		    out.writeInt($param_int_1);
		} catch (java.io.IOException e) {
		    throw new java.rmi.MarshalException("error marshalling arguments", e);
		}
		ref.invoke(call);
		ref.done(call);
	    }
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of scenarioDestroyed(int)
    @SuppressWarnings("deprecation")
		public void scenarioDestroyed(final int $param_int_1)
	throws java.rmi.RemoteException
    {
	try {
	    if (useNewInvoke) {
		ref.invoke(this, $method_scenarioDestroyed_5, new java.lang.Object[] {new java.lang.Integer($param_int_1)}, 7120272653670683755L);
	    } else {
		final java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 5, interfaceHash);
		try {
		    final java.io.ObjectOutput out = call.getOutputStream();
		    out.writeInt($param_int_1);
		} catch (java.io.IOException e) {
		    throw new java.rmi.MarshalException("error marshalling arguments", e);
		}
		ref.invoke(call);
		ref.done(call);
	    }
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
    
    // implementation of step(long)
    @SuppressWarnings("deprecation")
		public void step(final long $param_long_1)
	throws java.rmi.RemoteException
    {
	try {
	    if (useNewInvoke) {
		ref.invoke(this, $method_step_6, new java.lang.Object[] {new java.lang.Long($param_long_1)}, 8658722000524436368L);
	    } else {
		final java.rmi.server.RemoteCall call = ref.newCall((java.rmi.server.RemoteObject) this, operations, 6, interfaceHash);
		try {
		    final java.io.ObjectOutput out = call.getOutputStream();
		    out.writeLong($param_long_1);
		} catch (java.io.IOException e) {
		    throw new java.rmi.MarshalException("error marshalling arguments", e);
		}
		ref.invoke(call);
		ref.done(call);
	    }
	} catch (java.lang.RuntimeException e) {
	    throw e;
	} catch (java.rmi.RemoteException e) {
	    throw e;
	} catch (java.lang.Exception e) {
	    throw new java.rmi.UnexpectedException("undeclared checked exception", e);
	}
    }
}
