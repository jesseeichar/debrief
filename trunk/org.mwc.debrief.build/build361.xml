<project default="build">
	<property file="build361.properties" />

	<!-- get it built in the correct place -->
	<property name="buildDirectory" value="${basedir}/buildDirectory" />

	<!-- and deploy it to the right place -->
	<property name="deployDest" value="../deploy" />
	<property name="zipFile" value="DebriefNG-win32.win32.x86.zip" />
	<property name="debriefDest" value="${deployDest}/${zipFile}" />
	<property name="repoDest" value="${deployDest}/Repository" />
	<property name="osxExe" value="${deployDest}/DebriefNG/DebriefNG.app/Contents/MacOS/DebriefNG" />

	<target name="clean">
		<!-- note, the build fails if there's compiled code in the build directory -->
		<delete dir="${basedir}/buildDirectory" />
		<delete file="${debriefDest}" />
		<delete dir="${repoDest}" />
		<delete file="${deployDest}/repository.zip" />
	</target>

	<target name="build" depends="clean">

		<property name="builder" value="../deploy/${archivePrefix}" />

		<property name="baseLocation" value="${eclipse.home}" />
		<!-- by default, check for deltapack co-located with eclipse -->
		<property name="deltapack" value="${eclipse.home}/deltapack" />

		<!-- Check that we have a deltapack -->
		<available property="haveDeltaPack" file="${deltapack}" />
		<fail unless="haveDeltaPack" message="The deltapack is required to build this product.  Please edit buildProduct.xml or set the &quot;deltapack&quot; property from|${deltapack}|${eclipse.pdebuild.home}." />

		<property name="pluginPath" value="${basedir}/..${path.separator}${deltapack}" />
		<property name="buildTempFolder" value="${buildDirectory}/tmp" />

		<ant antfile="${eclipse.pdebuild.scripts}/productBuild/productBuild.xml" />

		<echo message="about to move the zips...">
		</echo>

	</target>


	<target name="deploy" description="move compiled bits to deploy folder">

		<antcall target="move_files_to_deploy_directory" />

		<antcall target="provide_custom_versions" />

		<antcall target="sort_out_exe_permissions" />

		<antcall target="refresh_changed_directories" />

	</target>

	<target name="uploadToSF">

		<fail message="can't upload, windows exe not present">
			<condition>
				<not>
					<resourcecount count="1">
						<fileset id="fs" dir="../deploy" includes="${zipFile}" />
					</resourcecount>
				</not>
			</condition>
		</fail>

		<!-- description="create date-string to name exe at sf.net" -->
		<tstamp>
			<format property="TODAY_UK" pattern="yyyyMMdd" locale="en,UK" />
		</tstamp>

		<property name="datedDist" value="../deploy/DebriefNG_${TODAY_UK}.zip" />

		<!-- produce a named deliverable -->
		<move file="${buildDirectory}/${buildLabel}/${zipFile}" tofile="${datedDist}" />

		<!-- help the ftp task get going -->
		<property environment="env" />
		<property name="sfPassword" value="${env.sfPassword}" />
		<property name="sfUsername" value="${env.sfUsername}" />

		<!-- next, scp the file to the internet
		<fail unless="${sfUsername}">SourceForge details missing</fail>
		<fail unless="${sfPassword}">SourceForge details missing</fail> -->

		<scp file="${datedDist}" verbose="true" password="${sfPassword}" todir="ianmayo,debrief@frs.sourceforge.net:/home/frs/project/d/de/debrief/Debrief_Installation_Set/DebriefNG" />

		<!-- and put the name back -->
		<move file="${datedDist}" tofile="${buildDirectory}/${buildLabel}/${zipFile}" />
	</target>

	<target name="move_files_to_deploy_directory">
		<copy tofile="${debriefDest}">
			<fileset file="${buildDirectory}/${buildLabel}/${zipFile}" />
		</copy>
		<copy todir="${repoDest}">
			<fileset dir="${buildDirectory}/buildRepo" />
		</copy>
	</target>

	<target name="provide_custom_versions">
		<!-- now unzip the dist, just in case anyone wants it that way -->
		<unzip src="${debriefDest}" dest="${deployDest}" />

		<!-- and zip the repo, to help move it -->
		<zip basedir="${repoDest}" destfile="${deployDest}/Repository.zip" />
	</target>


	<target name="refresh_changed_directories">
		<eclipse.convertPath fileSystemPath="${basedir}" property="resourcePath" />
		<eclipse.refreshLocal resource="${resourcePath}" depth="infinite" />

		<eclipse.convertPath fileSystemPath="${deployDest}" property="deployPath" />
		<eclipse.refreshLocal resource="${deployPath}" depth="infinite" />
	</target>

	<target name="isOSX">
		<available file="${osxExe}" property="osx.Present" />
	</target>

	<target name="sort_out_exe_permissions" depends="isOSX" if="osx.Present">
		<echo message="this is osx - setting exe permission" />
		<chmod file="${osxExe}" perm="ugo+x" />
	</target>

	<property name="usbDest" value="/Volumes/USB DISK/" />

	<target name="can_do_usb_copy">
		<available property="target.exists" file="${usbDest}" />
	</target>

	<target name="copy_to_usb">

		<echo message="ditching existing versions" />
		<delete file="${usbDest}/Repository.zip" />
		<delete dir="${usbDest}/DebriefNG" />

		<echo message="copying new versions" />

		<copy verbose="true" todir="${usbDest}/">
			<fileset file="${deployDest}/Repository.zip" />
		</copy>
	</target>

</project>
