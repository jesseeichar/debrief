<?xml version="1.0" encoding="UTF-8"?>
<!--<!DOCTYPE set PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN">-->
<!DOCTYPE set PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN" "../../contribs/docbook-xml-4.5/docbookx.dtd">
<?xml-stylesheet href="file:///C:/docbook/docbook-xsl-1.44/html/docbook.xsl" type="text/xsl"?>
<set>
  <title>ASSET Documentation Set</title>
  <setinfo>
    <mediaobject>
      <imageobject>
        <imagedata fileref="figures/asset_docset.gif" format="GIF" align="center" width="440"/>
      </imageobject>
      <textobject>
        <phrase>Overview image</phrase>
      </textobject>
    </mediaobject>
    <abstract>
      <para>The <application>ASSET</application> Documentation Set provides a full introduction to
        the <application>ASSET</application> Framework, useful to users, developers and maintainers.
        The individual books within the set are self-contained, but online versions do contain
        occasional inter-book links. </para>
    </abstract>
    <author>
      <firstname>Ian</firstname>
      <surname>Mayo</surname>
      <affiliation>
        <orgname>PlanetMayo Ltd.</orgname>
        <address>
          <street>34 Shearwater Avenue</street>
          <city>Fareham</city>
          <state>HANTS</state>
          <postcode>PO16 8YE</postcode>
          <email>info@planetmayo.co.uk</email>
        </address>
      </affiliation>
    </author>
  </setinfo>
  <book id="asset_overview">
    <title>
      <application>ASSET</application> Overview </title>
    <article id="intro_to_asset">
      <title>An introduction to <application>ASSET</application>
      </title>
      <para>This document provides an overview to the <application>ASSET</application> maritime
        tactical modelling environment. <figure>
          <title>Screenshot of <application>ASSET</application> Workbench front-end </title>
          <mediaobject>
            <imageobject>
              <imagedata fileref="figures/workbench_view.png" format="GIF" align="center"
                scalefit="1" width="100%"/>
            </imageobject>
          </mediaobject>
        </figure></para>
      <para>In typical use <application>ASSET</application> presents the user with a 2-d view of a
        tactical engagement and provides drill-down into current participant status, the behaviours
        of participants and views of sensor detections. The user is able to enable logging of data,
        copy screenshots to disk for insertion into reports, or even open a 3-d view of events as
        they unfold. </para>
      <para>Through drag and drop the user is able to load new scenarios, scenario participants,
        sensors and behaviours.</para>
      <sect1 id="overview_breadth">
        <title>Breadth of modelling</title>
        <para>
          <application>ASSET</application> comprises a highly optimised modular modelling engine
          with a number of graphical front-ends tailored to specific approaches in the solution of
          tactical problems. The front-ends used by <application>ASSET</application> allow
          computer-controlled, human-in-the-loop and composite engagements to be investigated by
          scientific and non-scientific users, providing outputs for subsequent After Action Review. <figure>
            <title>Overview of <application>ASSET</application> capabilities </title>
            <mediaobject>
              <imageobject>
                <imagedata fileref="figures/ASSET_overview.gif" format="GIF" align="center"
                  width="100%"/>
              </imageobject>
            </mediaobject>
          </figure></para>
        <para>Not only does <application>ASSET</application> have strong modelling capabilities, it
          also has a strong visualisation capability. The earlier screenshot shows a typical
            <application>ASSET</application> 2 dimensional view of a scenario unfolding (a helo
          investigating two contacts of interest) using recognised NATO symbology. Where the 2
          dimensional view is insufficient then a 3 dimensional dynamic view can be opened. The
          following screenshot shows a friendly helo about to prosecute a hostile submarine, itself
          attempting to prosecute a friendly warship. The 3 dimensional view has a range of options
          to improve legibility. These include magnifying the size of the participants themselves
          (as in the screenshot), configurable grid-lines, ocean shading, and snail trails. <figure>
            <title>Demonstration of <application>ASSET</application> 3d visualisation </title>
            <mediaobject>
              <imageobject>
                <imagedata fileref="figures/helo_3d_screen.gif" format="GIF" align="center"
                  width="100%"/>
              </imageobject>
            </mediaobject>
          </figure></para>
        <para>
          <application>ASSET</application> has been built from the ground up to provide tactical
          modelling facilities to support the needs of maritime tactical development. Fundamental to
          this strategy has been the identification of an acceptable fidelity in modelling, where
            <application>ASSET</application> can be used in initial investigations into new tactical
          problems - acknowledging that it may be necessary to employ a higher fidelity model in the
          later stages of analysis, and that frequently the only true test for a tactic is
          real-world employment. Nevertheless, <application>ASSET</application> can be employed to
          great benefit in the following methods of analysis: <itemizedlist>
            <listitem>
              <para>
                <emphasis>Quantitative analysis.</emphasis> The direct comparison of different
                tactics allows for sensitivity analysis of different characteristics such as initial
                manoeuvres, evasion headings/speeds and protective screen dispositions. Different
                engagements can be compared through analysis of time-to-detection, closest point of
                approach, number of kills or a wide variety of other user-defined performance
                measures. </para>
            </listitem>
            <listitem>
              <para>
                <emphasis>Collaborative brainstorming.</emphasis> Through
                  <application>ASSET</application> users are able to visualise ideas for new
                tactics, recording the engagement for replay by peers or interactively modifying a
                particular tactic to make rapid progress whilst brainstorming. </para>
            </listitem>
            <listitem>
              <para>
                <emphasis>Mission rehearsal.</emphasis> It is no longer necessary to wait for a sea
                trial before progressing an area of tactical development. Trial tactics can be
                synthetically modelled in <application>ASSET</application>, discarding poorly
                performing tactics to concentrate sparse sea-time on optimally performing solutions.
                Additionally, an exercise-order can be rehearsed in-house prior to being sent to sea
                to test for completeness and highlight areas where greater detail is needed or
                remove exercise serials which will clearly not progress the problem under
                investigation. </para>
            </listitem>
            <listitem>
              <para>
                <emphasis>After action review.</emphasis> In post-exercise review
                  <application>ASSET</application> can be used to recreate tactical engagements with
                different environmental conditions, rules of engagement, or sensor performance,
                leading to a greater understanding of exercise events and improving the quality of
                analysis. </para>
            </listitem>
          </itemizedlist></para>
        <para>The adoption of <application>ASSET</application> can lead to advances in the
          following: <itemizedlist>
            <listitem>
              <para>
                <emphasis>Operational capability.</emphasis>
                <application>ASSET</application> provides a quick turnaround, low cost means of
                trialling new ways of conducting joint warfare. Expert users can experiment
                collaboratively to trial new force capabilities, quickly determining strong and weak
                points in command and control structures or platform capabilities. Lessons learnt
                from <application>ASSET</application> can leverage effort invested in sea-trials to
                quickly produce new or improved operational capabilities at short notice. </para>
            </listitem>
            <listitem>
              <para>
                <emphasis>Operational performance.</emphasis> The operational performance of
                existing systems can be improved through the development of more efficient tactics
                and procedures, or through the use of <application>ASSET</application> components in
                tactical decision aids. </para>
            </listitem>
            <listitem>
              <para>
                <emphasis>Exercise preparation.</emphasis>
                <application>ASSET</application> can be used in exercise preparation to validate
                speed-time transit calculations, verify that manoeuvres are achievable, and
                highlight to participants areas which need particularly detailed record-keeping.
              </para>
            </listitem>
            <listitem>
              <para>
                <emphasis>Mission and threat analysis.</emphasis> The repeated simulation of
                particular scenarios with slight variations allows for sensitivity analysis to be
                performed, leading to a greater understanding of the role of particular participants
                and rules of engagement. This leads to a greater understanding of the mission/threat
                itself and can be used to leverage the existing analyst's knowledge towards more
                thorough tactical development. </para>
            </listitem>
            <listitem>
              <para>
                <emphasis>Performance prediction.</emphasis> Once the agreed characteritics of a
                future sensor/weapon/platform have been defined, <application>ASSET</application>
                can model these equipments and provide performance predictions to allow for early
                recognition of potential advantages or shortcomings possibly years ahead of their
                use at sea. When the equipments are first available for use effort can be
                efficiently concentrated on specific areas highlighted by
                  <application>ASSET</application>. </para>
            </listitem>
          </itemizedlist></para>
        <para>Additionally, <application>ASSET</application> is capable of modelling maritime
          engagements at a number of levels from a Force on Force engagement (such as an RN Task
          Force breaking through a blockade to rescue commonwealth dependants), down through
          one-on-one engagements (such as optimal firing position of helo on FAC) to single system
          analysis (to determine individual sensor performance). <figure>
            <title>Range of modelling supported by <application>ASSET</application>
            </title>
            <mediaobject>
              <imageobject>
                <imagedata fileref="figures/levels_of_analysis.gif" format="GIF" align="center"
                  width="100%"/>
              </imageobject>
            </mediaobject>
          </figure></para>
      </sect1>
      <sect1 id="overview_integrated_analysis">
        <title>Integrated Analysis</title>
        <para>Obviously, the complete analysis of a problem requires the analyst to be able to
          replay <application>ASSET</application> engagements. To this end, the
            <application>ASSET</application> integrated analysis suite includes the
            <application>Debrief</application> analysis tool, already in use at the Maritime Warfare
          Centre, COMSUBDEVRON 12, VX-1, Canadian Forces MWC, etc. <figure>
            <title>Integrated tactical development using <application>ASSET</application> and
                <application>Debrief</application>
            </title>
            <mediaobject>
              <imageobject>
                <imagedata fileref="figures/overview_int_debrief.gif" format="GIF" align="center"
                  width="100%"/>
              </imageobject>
            </mediaobject>
          </figure></para>
        <para>This integration is achieved through the use of agreed file formats: <itemizedlist>
            <listitem>
              <para>
                <application>ASSET</application> is capable of exporting data in
                  <application>Debrief</application>'s <filename>.REP</filename> file format, so
                allowing in-depth analysis of an engagement to be conducted with a tool which is
                both already familiar to many MWC personnel, and one of the best tools in its field
              </para>
            </listitem>
            <listitem>
              <para>Additionally, <application>ASSET</application> is capable of reading in the
                Debrief REP format, allowing an analyst to load a "real-world" vessel track into a
                scenario and determine for example, its search performance against a much larger
                body of targets. </para>
            </listitem>
          </itemizedlist></para>
        <para>The <application>Debrief</application> analysis tool is available <ulink
            url="www.debrief.info">online</ulink>, and provides extensive functionality for the
          analysis of maritime engagements, supported by the following features: <itemizedlist>
            <listitem>
              <para>3-d view of engagement</para>
            </listitem>
            <listitem>
              <para>Graphing support of time-variables, with export features to copy data to
                  <application>MS Excel</application> for more versatile plotting. </para>
            </listitem>
            <listitem>
              <para>Global coastline and bathymetric support</para>
            </listitem>
            <listitem>
              <para>Mature plot export support, for subsequent insertion into
                reports/presentations.</para>
            </listitem>
          </itemizedlist><figure>
            <title>The <application>Debrief</application> analysis tool </title>
            <mediaobject>
              <imageobject>
                <imagedata fileref="figures/overview_debrief_shot.jpg" format="GIF" align="center"
                  width="100%"/>
              </imageobject>
            </mediaobject>
          </figure></para>
      </sect1>
      <sect1 id="overview_mod_cons">
        <title>Modular construction</title>
        <sect2>
          <title>Modular modelling</title>
          <para>The modular modelling mechanisms contained within ASSET allow the engine to conduct
            modelling at a range of resolutions - all configured dynamically at run-time, not
            build-time. For example, the modular modelling allows the user to elect to model an
            acoustic sensor using cookie-cutter detections or full sonar equations by specifying his
            requirement in the ASSET scenario file. Additionally, varying levels of complexity can
            be combined to suit the analysis problem at hand - the designer getting support from
            informed guidance in the ASSET modelling handbook. </para>
          <para>Despite the wide range of modelling modules in ASSET, they remain "thin" software
            components - that is, they rely to a great extent on the parameters passed to them from
            datafiles. This inherent reliance on datafiles provides a great degree of flexibility to
            the software - and as before, this is determined at run-time by the user not at
            build-time by the developer.</para>
        </sect2>
        <sect2>
          <title>Modular applications</title>
          <para>ASSET is build from a variety of high and low level components. Fundamentally it
            uses COTS graphical user interface (GUI) components taken from the Maritime Warfare
            Centre's <application>Debrief </application>application. Added to these components are
            further modules to handle file read/write, time management, and networking. Assembling
            different combinations of these modules provides a number of applications supporting
            various analysis/tactical development requirements, from non-graphic plain text
            applications (used for monitoring number crunching of large numbers of scenarios), to
            detailed graphic environments aimed to replicate onboard displays (so adding to the
            realism of the simulation whilst reducing the learning curve for understanding the
            results displayed). </para>
          <para>During the normal course of events new analysis requirements will normally be met by
            producing new <application>ASSET</application> scenarios and for the required
              <application>ASSET</application> front-end. Exceptionally however, a new application
            may be required. The <application>ASSET</application> modules can quickly be re-combined
            using the <application>ASSET</application> skeleton provided, thus adding a new
            application to the <application>ASSET</application> toolset. <figure>
              <title>The modular construction of <application>ASSET</application>
              </title>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="figures/modular_applications.gif" format="GIF" align="center"
                    width="100%"/>
                </imageobject>
              </mediaobject>
            </figure></para>
        </sect2>
      </sect1>
      <sect1 id="overview_open_standards">
        <title>Modern, open, standards</title>
        <para>Under the covers, the <application>ASSET</application> modelling environment is an
          example of a software development taking full advantage of modern development standards
          and working practices. The adoption of modern practices has facilitated the rapid
          development maturing of the <application>ASSET</application> software, and reduced
          documentation and maintenance costs. </para>
        <sect2>
          <title>
            <application>ASSET</application> File Format </title>
          <para>XML (eXtensible Modelling Language) is a text-file format which can be used to
            represent a wide variety of types of data in support of a wide variety of applications.
            The XML file format was first trialled by the Maritime Warfare Centre in support of its
            Debrief application, since then adopted across the world by a number of analysis
            agencies/corporations. The XML format allows <application>ASSET</application> to store
            data in a tightly defined structure only normally available in binary storage, where it
            would lose its human legibility. <figure>
              <title>Sample of <application>ASSET</application> file format </title>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="figures/xml_sample.gif" format="GIF" align="center"
                    width="100%"/>
                </imageobject>
              </mediaobject>
            </figure></para>
          <para>The extensive adoption of XML in <application>ASSET</application> has provided the
            following opportunities: <itemizedlist>
              <listitem>
                <para>
                  <emphasis>Re-use of data.</emphasis> The versatile and robust XML file format
                  allows elements of <application>ASSET</application> data-files to be cut and
                  pasted to form new scenarios, or placed under configuration management to form
                  libraries of agreed performance/behaviour for friendly and threat
                  platforms/sensors. This significantly reduces the traditionally expensive task of
                  scenario generation/preparation, additionally allowing information to be passed to
                  collaborating agencies for joint tactical development </para>
              </listitem>
              <listitem>
                <para>
                  <emphasis>Low cost development.</emphasis> Many off-the-shelf libraries exist
                  which support the read/write of XML data, ensuring that minimum time is invested
                  in developing this necessary functionality. Successive software developments which
                  need to read/write <application>ASSET</application> data-files are also able to
                  exploit these free libraries. </para>
              </listitem>
              <listitem>
                <para>
                  <emphasis>Tool Support.</emphasis> The world-wide adoption of XML as a standard
                  file-format has resulted in a number of software tool suppliers providing
                  dedicated XML editing applications, these applications have provided low-cost,
                  high quality view and edit facilities for <application>ASSET</application>
                  datafiles. The screenshot (below) shows an intelligent editor application inviting
                  the user to add ether a broadband or optic sensor (top-right) to the sensor fit of
                  the frigate currently being edited (centre). </para>
              </listitem>
            </itemizedlist><figure>
              <title>Sample of dedicated XML editor</title>
              <mediaobject>
                <imageobject id="xml_editor">
                  <imagedata fileref="figures/xml_editor.gif" format="GIF" align="center"
                    width="100%"/>
                </imageobject>
              </mediaobject>
            </figure></para>
        </sect2>
        <sect2>
          <title>Java programming language</title>
          <para>The last three decades have seen an explosion in the variety and number of
            programming languages and environments available for software development. Sun
            Microsystems took the lessons learnt from previous languages such as Pascal, Fortran and
            c++ and produced the Java programming language. Very quickly after its release Java
            experienced wide industry adoption, and use for development of heavyweight applications.
            The adoption of Java within <application>ASSET</application> provides the following
            benefits: <itemizedlist>
              <listitem>
                <para>
                  <emphasis>Platform Independence</emphasis> Through the use of Java,
                    <application>ASSET</application> is able to run on a wide variety of operating
                  systems, from standard desktop PC's to high performance Linux and Solaris
                  workstations capable of number-crunching vast numbers tactical scenarios. </para>
              </listitem>
              <listitem>
                <para>
                  <emphasis>Object Orientation.</emphasis> Tactical modelling inherently lends
                  itself to object orientation; the representation of real-world objects as
                  functional software units. For example, the object orientated support provided to
                    <application>ASSET</application> by Java allows a software model of an SSK to
                  quickly be produced taking the existing model of an SSN and adding battery usage,
                  and snorting noise models. This significantly reduces both development and
                  maintenance costs. </para>
              </listitem>
              <listitem>
                <para>
                  <emphasis>Rich Standard Library.</emphasis> Java contains an extensive set of
                  standard libraries, which have been exploited in <application>ASSET</application>
                  to provide user interface, network communications, XML file storage, and 3
                  dimensional viewing. Use of standard libraries in addition of these areas of
                  functionality to <application>ASSET</application> has reduced development costs,
                  maintenance costs, and through-life costs (since they will never incur license
                  charges). </para>
              </listitem>
              <listitem>
                <para>
                  <emphasis>Wide developer support.</emphasis> The adoption of Java by industry,
                  academic and research institutions world-wide significantly eases the problem of
                  finding qualified development support - all recent computer science graduates will
                  have a grounding in Java, and most will be fully competent in using it in
                  developments such as <application>ASSET</application>. Thus an organisation making
                  use of <application>ASSET</application> can be increasingly confident of finding
                  suitably trained developmental effort. </para>
              </listitem>
            </itemizedlist></para>
        </sect2>
      </sect1>
    </article>
  </book>
  <!--NOW FOR THE MODELLING GUIDE-->
  <!--NOW FOR THE MODELLING GUIDE-->
  <!--NOW FOR THE MODELLING GUIDE-->
  <!--NOW FOR THE MODELLING GUIDE-->
  <!--NOW FOR THE MODELLING GUIDE-->
  <!--NOW FOR THE MODELLING GUIDE-->
  <book id="modelling_guide">
    <title>
      <application>ASSET</application> Modelling Guide </title>
    <bookinfo>
      <mediaobject>
        <imageobject>
          <imagedata fileref="figures/ASSET_modguide.gif" format="GIF" align="center" width="100%"/>
        </imageobject>
      </mediaobject>
      <revhistory>
        <revision>
          <revnumber>0.6</revnumber>
          <date>12th June 2003</date>
          <revdescription>
            <para>Introduce Author guidance</para>
          </revdescription>
        </revision>
        <revision>
          <revnumber>0.5</revnumber>
          <date>28th June 2002</date>
          <revdescription>
            <para>Initial Skeleton</para>
          </revdescription>
        </revision>
      </revhistory>
      <date>June 2002</date>
      <copyright>
        <year>2001,2002</year>
      </copyright>
      <author>
        <firstname>Ian</firstname>
        <surname>Mayo</surname>
        <affiliation>
          <orgname>PlanetMayo Ltd.</orgname>
          <address>
            <street>34 Shearwater Avenue</street>
            <city>Fareham</city>
            <state>HANTS</state>
            <postcode>PO16 8YE</postcode>
            <email>info@planetmayo.co.uk</email>
          </address>
        </affiliation>
      </author>
      <abstract>
        <title>The <application>ASSET</application> Modelling Guide </title>
        <para>The <application>ASSET</application> Modelling guide gives details of the elements,
          characteristics and behaviours used inside the <application>ASSET</application> Engine.
          The modelling guide does not give any detail, nor does it refer to any front-ends through
          which the engine may be accessed. This information is contained in the <link
            linkend="user_guide">
            <application>ASSET</application> User Guide </link>
        </para>
      </abstract>
    </bookinfo>
    <chapter id="mod_scenario">
      <title>Introduction</title>
      <sect1 id="modelling_philosophy">
        <title>
          <application>ASSET</application> modelling philosophy </title>
        <para>
          <application>ASSET</application> has adopted a specific modelling philosophy which
          directly affects the resolution of modelling performed. The role of
            <application>ASSET</application> is seen as an advanced substitute for graph paper -
          used to look at vessel geometries and detections quickly, reliably and robustly. </para>
        <para>
          <application>ASSET</application> does not aim to approach <emphasis>real-world</emphasis>
          levels of modelling, and there is no expectation of producing results which can replace
          tactical development undertaken at sea. <application>ASSET</application> does, however,
          aim to allow a user to run through a simplified version of the real world to gain a better
          understanding of a particular platform, sensor or tactic. Through the use of
            <application>ASSET</application> it is hoped that the Tactical Development process can
          be accelerated through the discarding of the low-value tactics allowing at-sea exercise
          time to focus on high-value tactics. </para>
        <para>Of course the results produced by <application>ASSET</application> have to be
          relatively realistic, so vessels manoeuvre using specific turning circles and acceleration
          rates, sensors have specific recognition differentials, and energy travelling through the
          environment experiences propagation loss. </para>
        <important>
          <para>The <application>ASSET</application> user should have a full understanding of the
            modelling abstraction used in a specific scenario, <application>ASSET</application> is
            not attempting to reproduce a "real-world" equivalent, and the user must decide what
            assumptions can be made of the results. A thorough understanding of the
              <application>ASSET</application> Modelling Guide is required before any analysis of
            results is conducted. </para>
        </important>
      </sect1>
      <sect1 id="modelling_sources">
        <title>
          <application>ASSET</application> modelling sources </title>
        <para>Large areas of the modelling used within <application>ASSET</application> directly
          follow that recommended in the two volumes of the <citetitle>Sonar Modelling Handbook,
            September 1998, DERA/S&amp;P/UWS/CR980073</citetitle> produced by DERA,
            <citetitle>Principles of underwater sound</citetitle> written by Robert J Urick, 1983,
          and the Meteorlogist's Glossary, [REF??@@] </para>
      </sect1>
      <sect1 id="modelling_overview">
        <title>Overview</title>
        <para>Information in this modelling guide is structured according to the entity being
          modelled, scenario, environment, vessels, sensors and behaviours. This results in some
          related information being spread out through the guide; in particular the components of
          the sonar equations are spread out through several section. The following list should
          help: <variablelist>
            <varlistentry>
              <term>Radiated Noise</term>
              <listitem>
                <para>Radiated Noise is covered in the Participants characteristics section, at:
                    <xref linkend="mod_radiated_noise"/>
                </para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>Self Noise</term>
              <listitem>
                <para>Self Noise is also covered in the Participants characteristics section, at:
                    <xref linkend="mod_self_noise"/>
                </para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>Propagation Loss</term>
              <listitem>
                <para>Propagation Loss is covered in the Environment section, at: <xref
                    linkend="mod_mediums"/>
                </para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>Detection Threshold</term>
              <listitem>
                <para>Detection Threshold is covered in the Sensors section, at: <xref
                    linkend="mod_sensors"/>
                </para>
              </listitem>
            </varlistentry>
          </variablelist></para>
      </sect1>
      <sect1 id="model_definition_process">
        <title>Model definition/approval process</title>
        <para>The following process will be used for the creation/incorporation of models into ASSET <orderedlist>
            <listitem>
              <para>Model requirement established either from ASSET analysis document or by domain
                expert</para>
            </listitem>
            <listitem>
              <para>Algorithm researched by domain expert</para>
            </listitem>
            <listitem>
              <para>Algorithm documented in Microsoft Word according to structure defined in <link
                  linkend="guidance_mod_template">Modelling Template</link>
              </para>
            </listitem>
            <listitem>
              <para>Author submits document to ASSET maintainer, providing amplification where
                necessary</para>
            </listitem>
            <listitem>
              <para>Domain expert agrees applicable level of review with ASSET maintainer according
                to choices in <link linkend="levels_of_review">note</link>
                <note id="levels_of_review">
                  <title>Varying levels of algorithm review</title>
                  <para>
                    <orderedlist>
                      <listitem>
                        <para>Review by ASSET maintainer</para>
                      </listitem>
                      <listitem>
                        <para>Review by other MWC resource as recommended by author </para>
                      </listitem>
                      <listitem>
                        <para>Review by ad-hoc group formed within MWC </para>
                      </listitem>
                      <listitem>
                        <para>Review by other MoD agency (such as DSTL, ADAC)</para>
                      </listitem>
                      <listitem>
                        <para> It is hoped that no ASSET algorithms will require external industry
                          review. This requirement will addressed if it arises.</para>
                      </listitem>
                    </orderedlist>
                  </para>
                </note></para>
            </listitem>
            <listitem>
              <para>Review conducted</para>
            </listitem>
            <listitem>
              <para>ASSET maintainer incorporates algorithm in modelling guide</para>
            </listitem>
            <listitem>
              <para>Schema amended to support new model, reviewed by domain expert</para>
            </listitem>
            <listitem>
              <para>Software algorithms implemented</para>
            </listitem>
            <listitem>
              <para>Software test cases proven</para>
            </listitem>
            <listitem>
              <para>Software verification recorded (if necessary)</para>
            </listitem>
          </orderedlist></para>
      </sect1>
      <sect1 id="guidance_to_authors">
        <title>Guidance to Authors</title>
        <para>This section provides guidance to authors of entity algorithm authors. The authoring
          of algorithms is not part of a specific phase of the ASSET development (as recorded in the
            <ulink url="http://intranet2/coag/asset/docs/ASSETRoadmap.pdf">ASSET Roadmap</ulink>),
          but is a continuing process with algorithms implemented as they are defined. In this
          document, information structures that form part of the ASSET modelling engine are provided
          with a hyperlink to the relevant point in the <ulink
            url="http://intranet2/coag/asset/api/index.html">ASSET system documentation</ulink>. </para>
        <para>The following types of vessel-related entity are modelled within ASSET: <itemizedlist>
            <listitem>
              <para>Vessels (including movement, fuel usage and radiated noise)</para>
            </listitem>
            <listitem>
              <para>Sensors</para>
            </listitem>
            <listitem>
              <para>Behaviours</para>
            </listitem>
          </itemizedlist>The algorithm skeletons for these types of algorithm are detailed on the
          following pages. There may be requirements for new inputs and outputs in support of
          particular algorithms, which will be dealt with on a case by case basis, hopefully with
          decreasing frequency. </para>
        <para>Information is passed between the vessel-related algorithms as described in the <xref
            linkend="part_time_cycle"/> - essential reading for a model author. </para>
        <sect2 id="mod_vessel_movement">
          <title>Vessel movement</title>
          <para>The movement algorithm receives the following inputs:</para>
          <itemizedlist id="vessel_status">
            <title>Current vessel <ulink
                url="http://intranet2/coag/asset/api/ASSET/Participants/Status.html"> status</ulink>
            </title>
            <listitem>
              <para>Location : lat (degs), long (degs), depth (m)</para>
            </listitem>
            <listitem>
              <para>Course - degs</para>
            </listitem>
            <listitem>
              <para>Speed - m/sec</para>
            </listitem>
            <listitem>
              <para>Fuel level - % of capacity</para>
            </listitem>
          </itemizedlist>
          <itemizedlist id="move_chars">
            <title>Vessel <ulink
                url="http://intranet2/coag/asset/api/ASSET/Models/Movement/MovementCharacteristics.html"
                >movement characteristics</ulink>
            </title>
            <listitem>
              <para>Acceleration rate (m/sec)</para>
            </listitem>
            <listitem>
              <para>Dive rate (m/s)</para>
            </listitem>
            <listitem>
              <para>Climb rate (m/s)</para>
            </listitem>
            <listitem>
              <para> Fuel usage rate (units/m/sec)</para>
            </listitem>
            <listitem>
              <para>Maximum depth (m)</para>
            </listitem>
            <listitem>
              <para>Minimum depth (m)</para>
            </listitem>
            <listitem>
              <para>Maximum speed (m/sec)</para>
            </listitem>
            <listitem>
              <para>Minimum speed (m/sec)</para>
            </listitem>
            <listitem>
              <para>Turning circle (m), turn rate (deg/sec), or G-pulled</para>
            </listitem>
          </itemizedlist>
          <para>Using this information the movement algorithm produces an updated <ulink
              url="http://intranet2/coag/asset/api/ASSET/Participants/Status.html">Status</ulink>
            object. Vessel behaviour </para>
        </sect2>
        <sect2>
          <title>Decision behaviour</title>
          <para>The decision behaviour receives the following inputs:</para>
          <itemizedlist>
            <title>Current vessel <ulink
                url="http://intranet2/coag/asset/api/ASSET/Participants/Status.html">Status</ulink>
            </title>
            <listitem>
              <para>As described above in <xref linkend="mod_vessel_movement"/>
              </para>
            </listitem>
          </itemizedlist>
          <para>Together with a <ulink
              url="http://intranet2/coag/asset/api/ASSET/Models/Detection/DetectionList.html"
              >detection list</ulink>. This is a list of <ulink
              url="http://intranet2/coag/asset/api/ASSET/Models/Detection/DetectionEvent.html"
              >Detections</ulink>, each comprising a number of parameters, one or more of which may
            be represented by a 'Not-available' value: </para>
          <itemizedlist>
            <title>Detection</title>
            <listitem>
              <para>Bearing to target (degs)</para>
            </listitem>
            <listitem>
              <para>Course of target (degs)</para>
            </listitem>
            <listitem>
              <para> Range to target (m)</para>
            </listitem>
            <listitem>
              <para> Relative bearing to target (degs)</para>
            </listitem>
            <listitem>
              <para> Sensor location (lat/long degs)</para>
            </listitem>
            <listitem>
              <para> Speed of target (m/sec)</para>
            </listitem>
            <listitem>
              <para> Strength of detection (agreed units)</para>
            </listitem>
            <listitem>
              <para> Target type ( <ulink
                  url="http://intranet2/coag/asset/api/ASSET/Participants/Category.html"
                  >Category</ulink> of target - in as much detail as is available from this sensor)
              </para>
            </listitem>
            <listitem>
              <para> Target id (when available)</para>
            </listitem>
          </itemizedlist>
          <para>The <ulink url="http://intranet2/coag/asset/api/ASSET/Participants/Category.html"
              >Category</ulink> of any ASSET participant is made up from 3 components: Environment,
            Force, and Type. The Force is one of Red, Blue or Green. The Environment is one of
            Subsurface, Surface, Airborne or Cross. Finally the Type value is used to list the
            actual type of platform, including submarine, torpedo, sonar buoy, carrier, frigate,
            oiler, helicopter, MPA, missile. </para>
          <para>The decision behaviour returns a <ulink
              url="http://intranet2/coag/asset/api/ASSET/Participants/DemandedStatus.html">Demanded
              Status</ulink> object comprising: <itemizedlist>
              <listitem>
                <para>Course (degs)</para>
              </listitem>
              <listitem>
                <para>Speed (m/sec)</para>
              </listitem>
              <listitem>
                <para>Depth (m)</para>
              </listitem>
              <listitem>
                <para>Optionally, a change to a sensor line-up</para>
              </listitem>
            </itemizedlist></para>
        </sect2>
      </sect1>
      <sect1 id="guidance_mod_template">
        <title>Modelling Template</title>
        <para>The following template is to be used as a basis for definition of model algorithms -
          but other sections may be added where applicable.</para>
        <table frame="sides">
          <title>Template for model algorithm authors</title>
          <tgroup cols="3">
            <colspec colname="col01" colnum="1" colwidth="1.30*"/>
            <colspec colname="col1" colnum="2" colwidth="1.5*"/>
            <colspec colname="col2" colnum="3" colwidth="1.5*"/>
            <thead>
              <row>
                <entry>
                  <para>Section name</para>
                </entry>
                <entry>
                  <para>Description</para>
                </entry>
                <entry>
                  <para>Example</para>
                </entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry>
                  <para>Title</para>
                </entry>
                <entry>
                  <para>Brief title for this algorithm</para>
                </entry>
                <entry>
                  <para>Merlin Mk x Fuel Usage</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>Author</para>
                </entry>
                <entry>
                  <para>Domain expert with main responsibility for algorithm</para>
                </entry>
                <entry>
                  <para>Ian Mayo</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>Description</para>
                </entry>
                <entry>
                  <para>What are we trying to represent?</para>
                </entry>
                <entry>
                  <para>Merlin is ASW helo responsible for </para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>Inputs </para>
                </entry>
                <entry>
                  <para>Information required to configure behaviour (other than the <link
                      linkend="guidance_to_authors">standard behaviour inputs</link>). Whilst
                    internally the information will be stored in SI units, the input parameters
                    should indicate any units used by convention </para>
                </entry>
                <entry>
                  <para>Target Location, Trail Speed (kts)</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>Algorithm </para>
                </entry>
                <entry>
                  <para>Series of steps representing algorithm. May be expressed in pseudo-code or
                    pictorially via flowchart</para>
                </entry>
                <entry>
                  <para>fuel usage as in following table...</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>Source</para>
                </entry>
                <entry>
                  <para>Origin of algorithm, or <emphasis>original invention</emphasis>
                  </para>
                </entry>
                <entry>
                  <para>Merlin simulator user guide, dated 12th Jan 2002</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>Test case </para>
                </entry>
                <entry>
                  <para>Simple reproducible scenario providing expected model outputs</para>
                </entry>
                <entry>
                  <para>With payload of xxx, and fuel load of yyy, climb to yyyy ft travel at zzz
                    kts for 30 mins, resulting load of www</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>Modelling guidance </para>
                </entry>
                <entry>
                  <para>Guidance in the acceptable limits for use of the algorithm (bounds), sample
                    input data.</para>
                </entry>
                <entry>
                  <para>This fuel usage algorithm is suitable for large area ASW search
                    problems</para>
                </entry>
              </row>
              <row>
                <entry>
                  <para>Incorporation</para>
                </entry>
                <entry>
                  <para>The date at which the algorithm was incorporated into ASSET</para>
                </entry>
                <entry>
                  <para>Included in ASSET build 12th July 2003</para>
                </entry>
              </row>
            </tbody>
          </tgroup>
        </table>
        <para>The modelling templates included in this modelling guide may be used as examples for
          length, tone, and level of detail required.</para>
      </sect1>
      <sect1 id="agreed_units">
        <title>Agreed Units</title>
        <para>The following units will be used in ASSET data-files, largely taken from the SI <footnote>
            <para>Système International; the universal, unified, self-consistent system of
              measurement units based on the mks (metre-kilogram-second) system.</para>
          </footnote> standard. Internally however, the ASSET software may use different sets of
          units with conversion factors applied as necessary to decouple this dependency. </para>
        <sect2>
          <title>Spatial</title>
          <variablelist>
            <varlistentry>
              <term>X-Y axis</term>
              <listitem>
                <para>Latitude, Longitude in degrees</para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>Z axis</term>
              <listitem>
                <para>metres, expressed as height</para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>Distance/Range</term>
              <listitem>
                <para>Metres</para>
              </listitem>
            </varlistentry>
          </variablelist>
        </sect2>
        <sect2>
          <title>Other</title>
          <variablelist>
            <varlistentry>
              <term>Noise levels</term>
              <listitem>
                <para>Decibels</para>
              </listitem>
            </varlistentry>
          </variablelist>
        </sect2>
        <sect2>
          <title>Dynamics</title>
          <variablelist>
            <varlistentry>
              <term>Course</term>
              <listitem>
                <para>Degrees (0..360)</para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>Speed</term>
              <listitem>
                <para>m/sec</para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>Acceleration</term>
              <listitem>
                <para>m/sec/sec</para>
              </listitem>
            </varlistentry>
          </variablelist>
        </sect2>
      </sect1>
    </chapter>
    <chapter id="modelling_scenario">
      <title>Scenario</title>
      <sect1 id="mod_scenario_intro">
        <title>Introduction</title>
        <para>Each <glossterm linkend="G_SCENARIO">scenario</glossterm> is an
            <emphasis>instance</emphasis> of the real world, containing an environment, a set of
          entities to be modelled, and details of how <application>ASSET</application> should move
          through the model in time. A scenario is the largest unit which
            <application>ASSET</application> loads from disk ( <xref linkend="sys_permanent_storage"
          />), though a single workstation may contain an <application>ASSET</application> Server
          simultaneously running a number of scenarios. </para>
        <para>Whilst a scenario may contain sufficient detail to fully investigate a tactical
          problem, it may usefully only contain a partial dataset. It may be used to define a single
          reference environment, or it may contain the combination of environment and red force for
          which a number of different blue forces are defined.</para>
      </sect1>
      <sect1 id="mod_scenario_characteristics">
        <title>Characteristics</title>
        <sect2>
          <title>General Characteristics</title>
          <para/>
          <sect3>
            <title>Name</title>
            <para>Each scenario takes a name, typically a short phrase of 20 letters or less. A name
              given to a scenario containing purely an environment may be <literal>Gulf of Oman,
                Spring</literal>, or one containing a detailed tactical problem may be <literal>209
                Barrier Penetration</literal>. </para>
          </sect3>
          <sect3>
            <title>Description</title>
            <para>In addition to it's name, a scenario may store a description. The description can
              describe the environment, the participants, or the tactical problem under
              consideration. The number of characters contained in a description is not
              restricted.</para>
          </sect3>
        </sect2>
        <sect2>
          <title>Time Characteristics</title>
          <para/>
          <sect3 id="application_time_step">
            <title>Application Time Step</title>
            <para>This is the <emphasis>real-world</emphasis> time interval between each model step,
              thus an application time step of 200 milliseconds will result in the
                <emphasis>virtual-world</emphasis> moving forward 5 times per second, provided
              processing power permits. <note>
                <para>The application time step is only used as a guideline. The processing power
                  available may result in the model moving forward more slowly than the application
                  time step. In such instances, the model will step forward immediately the last
                  step is complete.</para>
              </note></para>
          </sect3>
          <sect3 id="scenario_time_step">
            <title>Scenario Time Step</title>
            <para>This is the time moved forward by the <emphasis>virtual world</emphasis> each time
              it steps. A typical time step for a traditional ASW engagement would by 5 seconds (the
              approximate update for a sonar set), whilst for an AAW engagement examining Close-in
              weapon support a sub-second time step may be used. <note>
                <para>Obviously larger time steps mean that the model will be able to move through
                  an engagement more quickly, with results obtained earlier - at the cost of
                  definition. It is recommended that the largest time step suitable be used, with
                  specific time periods of interest re-run with smaller time steps where
                  necessary.</para>
              </note><note>
                <para>Within the ASSET sensor models, sensors only produce at the most one contact
                  per target in each time step - sensors with a long integration rate may only
                  produce a contact every few steps. The scenario designer should choose a step time
                  applicable to the sensors and vehicles being modelled.</para>
              </note>In each model step, the model performs the following processing: <orderedlist>
                <listitem>
                  <para>Move the <link linkend="current_time">current time</link> forward by the
                      <link linkend="scenario_time_step">scenario time step</link>
                  </para>
                </listitem>
                <listitem>
                  <para>Cycle through the participant, instructing each one to step to the new <link
                      linkend="current_time">current time</link>
                  </para>
                </listitem>
              </orderedlist></para>
          </sect3>
          <sect3>
            <title>Start Time</title>
            <para>The time value used as the <link linkend="current_time">Current Time</link> when
              the scenario is first loaded, or when the scenario is started. </para>
          </sect3>
          <sect3 id="current_time">
            <title>Current Time</title>
            <para>This is the time currently being reflected in the model</para>
          </sect3>
        </sect2>
      </sect1>
      <sect1 id="mod_scenario_structure">
        <title>Structure</title>
        <para>The scenario contains the following entities: <variablelist>
            <varlistentry>
              <term>Scenario Characteristics</term>
              <listitem>
                <para>The way this specific scenario behaves - abstract terms which do not relate to
                  entities modelled</para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>Participants</term>
              <listitem>
                <para>The platforms modelled by the scenario. Each model consists: <itemizedlist>
                    <listitem>
                      <para>
                        <link linkend="mod_sensors">Sensors</link>
                      </para>
                    </listitem>
                    <listitem>
                      <para>
                        <link linkend="mod_behaviours">Behaviour</link>
                      </para>
                    </listitem>
                    <listitem>
                      <para>Current/Demanded Status</para>
                    </listitem>
                    <listitem>
                      <para>Radiated noise characteristics</para>
                    </listitem>
                    <listitem>
                      <para>Movement characteristics</para>
                    </listitem>
                  </itemizedlist></para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>Environment</term>
              <listitem>
                <para>The definition of the <link linkend="mod_environment">environment</link>
                  within which the participants are modelled. The environment contains such details
                  as the coastline, bathymetry, and definitions of the mediums modelled (acoustic
                  propagation, optical dissipation, etc.). </para>
              </listitem>
            </varlistentry>
          </variablelist></para>
      </sect1>
    </chapter>
    <chapter id="mod_environment">
      <title>Environment</title>
      <sect1 id="mod_environment_intro">
        <title>Introduction</title>
        <para>The Environment is fundamental component of <application>ASSET</application>
        </para>
      </sect1>
      <sect1 id="mod_env_general">
        <title>General Characteristics</title>
        <para/>
        <sect2>
          <title>Dawn/Dusk times</title>
          <para>These are the times of sunset/sunrise. They are either hard-coded into the
            environment, or calculated from the <link linkend="current_time">current time</link> and
            location. </para>
        </sect2>
        <sect2 id="shipping_level">
          <title>Shipping level</title>
          <para/>
        </sect2>
      </sect1>
      <sect1 id="mod_metoc">
        <title>Oceanography/Meteorology</title>
        <para/>
        <sect2>
          <title>Coastline</title>
          <para>The coastline used within <application>ASSET</application> is obtained from the
              <ulink url="http://www.nima.mil">NIMA</ulink> VMap Level 0 dataset stored in the
            Vector Product Format (VPF). The VMap Level 0 database contains, amongst many other
            things, a global coastline at approximately 500m resolution. </para>
        </sect2>
        <sect2>
          <title>Bathymetry</title>
          <para>The Bathymetric database used within <application>ASSET</application> is obtained
            from the ETOPO dataset. The ETOPO database is a gridded database providing global
            coverage at 5 minute resolution. </para>
        </sect2>
        <sect2>
          <title>Elevation</title>
          <para/>
        </sect2>
        <sect2>
          <title>Sea State</title>
          <para/>
        </sect2>
        <sect2>
          <title>Wind Speed</title>
          <para/>
        </sect2>
        <sect2>
          <title>Rain Levels</title>
          <para/>
        </sect2>
      </sect1>
      <sect1 id="mod_mediums">
        <title>Mediums</title>
        <para>Mediums are used within <application>ASSET</application> to represent energy forms
          which may be transmitted or detected by <glossterm linkend="G_PARTICIPANT"
            >participants</glossterm>. <application>ASSET</application> participants contain a
          series of radiated noise characteristics, representing the one or more mediums in which
          they transmit energy. The meaning of radiated noise in intuitive for acoustic radiated
          noise, but more complex for others, read the relevant sections for more explanation. </para>
        <note>
          <para>Within many mediums energy is transmitted across a broad frequency spectrum.
              <application>ASSET</application> uses a <emphasis>centre-frequency</emphasis> approach
            to this problem, within each medium a single mid-range frequency is used. See each
            medium for more details of the centre-frequency. </para>
        </note>
        <para>Each medium is capable of calculating the following characteristics <variablelist>
            <varlistentry>
              <term>Energy loss</term>
              <listitem>
                <para>The amount of energy lost between two 3-dimensional locations</para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>Background energy</term>
              <listitem>
                <para>The amound of background energy experienced at a specific 3-d location in a
                  particular bearing</para>
              </listitem>
            </varlistentry>
          </variablelist></para>
        <sect2 id="mod_acoustic_loss">
          <title>Acoustic</title>
          <para>Acoustic propagation has for decades been the predominant underwater detection,
            whether it be Narrowband (@@ frequency range) or Broadband (@@frequency range). The
            radiated acoustic noise levels for participants varies with relative bearing and vessel
            speed, and is covered in <xref linkend="mod_acoustic_rad"/>. Acoustic propagation is
            represented by modelling spherical spreading combined with absorption <xref
              linkend="Urick"/>p110. The handy rule provided by Urick to model this propagation is
            <screen>TL = 20 Log r + ar * 10^-3</screen></para>
          <para>
            <variablelist>
              <varlistentry>
                <term>TL</term>
                <listitem>
                  <para>Transmission Loss</para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term>r</term>
                <listitem>
                  <para>Range (yds)</para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term>a</term>
                <listitem>
                  <para>Absorption (dB/kyd)</para>
                </listitem>
              </varlistentry>
            </variablelist>
            <note>
              <para>Absorption coefficients are described on p109 of <xref linkend="Urick"/>.
                Typical values of <emphasis>a</emphasis> are 0.08 at 1.2kHz in water at 20 deg C,
                0.4 at 10kHz in water at 30 deg C. </para>
            </note>
          </para>
          <sect3 id="mod_medium_nb">
            <title>Narrowband</title>
            <para/>
          </sect3>
          <sect3 id="mod_medium_bb">
            <title>Broadband</title>
            <para>An absorption coefficient of 0.08 gives a proploss curve as shown below. <figure>
                <title>Example of broadband proploss curve.</title>
                <mediaobject id="proploss_diag">
                  <imageobject>
                    <imagedata fileref="figures/proploss_diag.gif" format="GIF" align="center"
                      width="100%"/>
                  </imageobject>
                  <textobject>
                    <phrase>Graph showing broadband proploss curve.</phrase>
                  </textobject>
                  <caption>
                    <para>Example of broadband proploss curve.</para>
                  </caption>
                </mediaobject>
              </figure></para>
          </sect3>
        </sect2>
        <sect2>
          <title>Non-acoustic</title>
          <para>There are many forms of electromagnetic energy modelled by
              <application>ASSET</application>
          </para>
          <sect3 id="mod_optic_medium">
            <title>Optic</title>
            <para>The optic medium is used to represent visual detections. Visual sensors range from
              periscopes through to the classic Mk 1 Eyeball, and play a strong role in typical
                <application>ASSET</application> simulations - particularly since they provide
              instantaneous bearing, frequently with classification and range resolution soon after. <footnote>
                <simpara>This description of Optic detections is an initial, simplistic
                  implementation intended only as a <emphasis>placeholder</emphasis> for a future
                  validated version. </simpara>
              </footnote></para>
            <para>The radiated noise for the Optic medium represents the cross-sectional area of the
              participant on that particular bearing; a submarine at PD will show a very small
              optical radiated noise, on the surface when viewed head-on it will be larger, and even
              larger still when viewed on the beam.</para>
            <para>The transmission loss of an optic sensor is a combination of two factors <itemizedlist>
                <listitem>
                  <para>Curvature of the earth - depending on the sensor and target height and range
                    between them, only a portion of the target may be visible. A <link
                      linkend="mod_curvature_calc">curvature of the earth equation</link> is used to
                    reduce the "radiated-noise" of the target to account for seeing none or part of
                    it. </para>
                </listitem>
                <listitem>
                  <para>Dissipation loss - this is purely a function of range and relates to the
                    prevailing atmospheric conditions, obviously a foggy day will result in very
                    short visual detection ranges even when sensor and target are relatively
                    close.</para>
                </listitem>
                <listitem>
                  <para>In <application>
                      <application>ASSET</application>
                    </application> the participant with the largest optical radiated noise is an
                    aircraft carrier (having a cross-sectional area of 6000 square metres). Under
                    the assumption that in clear weather an aircraft carrier will definitely be
                    visible if in line of sight, <application>
                      <application>ASSET</application>
                    </application> dictates that at the maximum line-of-sight range, a loss of 5000
                    units is experienced. This loss is linearly reduced at smaller ranges - this at
                    half of the maximum line of sight, a loss of 2500 units is experienced, and so
                    on. Thus a sensor will have to be well within the maximum line-of-sight range of
                    a submarine periscope to see it. An offset is applied to this linear
                    relationship to reflect that very small targets (such as the submarine
                    periscope) are in fact visible at several kilometers, not the hundreds of yards
                    as would be calculated. The loss calculated is reduced by 700 to represent this
                    "special case". </para>
                </listitem>
              </itemizedlist></para>
            <sidebar id="mod_curvature_calc">
              <title>Equation for curvature of the earth</title>
              <para>The formula used for calculation of the visual horizon (not including
                refraction) is:</para>
              <para>d = sqrt(2 * (h1 + h2) * a)</para>
              <para>Where d represents the range(m), h1 represents the height of the sensor(m), h2
                represents the height of the target(m), and a represents the radius of the earth,
                typically 6371229m. This formula is taken from the Meteographer's Glossary
                [REF@@]</para>
            </sidebar>
            <para/>
          </sect3>
          <sect3>
            <title>Communications Band</title>
            <para/>
          </sect3>
        </sect2>
        <sect2>
          <title>Non-traditional</title>
          <para/>
          <sect3>
            <title>Magnetic</title>
            <para/>
          </sect3>
          <sect3>
            <title>Others</title>
            <para>For the past few decades modern navies have investigated the use of "Footprint"
              type sensors which attempt to detect where a target has been, in contrast with
              traditional sensors which attempt to detect the current location of a target.</para>
            <para>The existence, performance and detection medium of such sensors is a very
              sensitive matter and almost always classified. To overcome this sensitivity and allow
              this document to remain unclassified these sensors are treated in a generic, abstract
              manner, but one in which it should be possible to model their performance in a
              fidelity comparable to other sensors modelled within <application>ASSET</application>. </para>
            <para>A Footprint medium is modelled by defining a spreading rate, decay rate, and limit
              of spread. The location of each participant which radiates the footprint medium is
              recorded at each model step as a footprint. Additionally at each step the previous
              "footprints" are expanded and decayed according to their characteristics. Sensors
              capable of detecting the footprint medium pass through this list of existing
              footprints, and produce a detection for each footprint they are able to detect. The
              strength of the detection is inversely proportional to the period of decay of the
              footprint.</para>
          </sect3>
        </sect2>
      </sect1>
    </chapter>
    <chapter id="mod_participants">
      <title>Participants</title>
      <para>Participants represent a fundamental unit within <application>ASSET</application> - a
        scenario means nothing until participants are added to it, they are the large unit modelled
        over which we would have control in the real world. </para>
      <sect1 id="part_time_cycle">
        <title>Time cycle</title>
        <para>In each time step each ASSET participant cycles through detect, move, decide processes
          as illustrated in <xref linkend="figure_time_steps"/> . <figure id="figure_time_steps">
            <title>ASSET time cycle</title>
            <mediaobject>
              <imageobject>
                <imagedata  fileref="figures/Vessel_stepping_loop.gif" width="100%" scalefit="1"/>
              </imageobject>
            </mediaobject>
          </figure></para>
        <sect2 id="arch_time_cycle">
          <title>Movement</title>
          <para>Within the movement step the participant first looks to see if there are any sensor
            line-up request changes (such as a request for a broadband sonar to go active). Then the
            series of property models manage the transition between any sets of related properties
            (such as a helo moving into a hover). Lastly within this step the movement algorithm
            moves the vessel status towards it's demanded state according to its manoeuvering
            characteristics.</para>
          <sect3>
            <title>State updates</title>
            <para>The behaviour of some particiants within ASSET is dependent upon their state at
              that time. The state may be dependent upon the current vessel status (SSK snorting at
              a particular speed/depth), some equipment lineup (helo in the dip, or SSN waiting for
              towed array steady), or some command and control state (surface ship at Action
              Stations).</para>
            <para>Examples of varying vessel behaviour depending upon state are: a helo only
              travelling to a new dip when it isn't currently in the dip, a surface ship may not
              undergo replenishment at sea when at Action Stations, and an SSK may undergo a
              particular evasive manoeuvre when detecting an enemy vessel whilst snorting.
              Additionally, the fundamental characteristics of a vessel may change according to that
              vessel state: the recognition differential of a surface ship sensor may decrease
              whilst at Action Stations, the radiated noise levels of an SSK increase whilst
              snorting. <figure id="figure_state_management">
                <title>Illustration of state management within Helo</title>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="figures/helo_state_transitions.gif" width="100%" scalefit="1"/>
                  </imageobject>
                </mediaobject>
              </figure></para>
          </sect3>
        </sect2>
        <sect2>
          <title>Detection</title>
          <para>Within the detection step the model steps through each of the sensors on the current
            vessel. After checking whether the sensor is enabled, the model then examines each
            scenario participant to see if it is detectable on the medium detected by that sensor.
            If the vessel is detectable ASSET uses the sensor model to determine if a detection is
            produced. Detections obtained are added to a list, to be passed in turn to the decision
            step.</para>
        </sect2>
        <sect2>
          <title>Decision</title>
          <para>The decision step passes the current vessel status, demanded vessel status and the
            current list of detections to the high level decision model for the vessel. Typically
            this will be a Waterfall model, but any may be used. The Waterfall model then performs
            its processing, finally returning a demanded status - for use by the movement step in
            the next time cycle.</para>
        </sect2>
      </sect1>
      <sect1 id="mod_participant_characteristics">
        <title>Characteristics</title>
        <sect2 id="mod_category">
          <title>Category</title>
          <para>Categorisation of participants allows a level of abstraction within
              <application>ASSET</application> - it is through categories that <link
              linkend="mod_behaviours">behaviours</link> are able to refer to <emphasis>Red
              Submarines</emphasis> instead of having to refer to specific submarine instance.
            Participants define a single field within each of the types defined for categories,
            Force, Environment, and Type. </para>
          <sect3>
            <title>Force</title>
            <para>
              <variablelist>
                <varlistentry>
                  <term>Red</term>
                  <listitem>
                    <para>The opposing force used within <application>ASSET</application>
                      simulations, as described in the <link linkend="G_RED_FORCE">Glossary</link>
                    </para>
                  </listitem>
                </varlistentry>
                <varlistentry>
                  <term>Blue</term>
                  <listitem>
                    <para>The friendly naval <application>ASSET</application>s, as described in the
                        <link linkend="G_BLUE_FORCE">Glossary</link>. </para>
                  </listitem>
                </varlistentry>
                <varlistentry>
                  <term>Green</term>
                  <listitem>
                    <para>The neutral <application>ASSET</application>s, as described in the <link
                        linkend="G_GREEN_FORCE">Glossary</link>. </para>
                  </listitem>
                </varlistentry>
              </variablelist>
            </para>
          </sect3>
          <sect3>
            <title>Environment</title>
            <para>
              <variablelist>
                <varlistentry>
                  <term>Surface</term>
                  <listitem>
                    <para>Surface vessels; typically surface ships</para>
                  </listitem>
                </varlistentry>
                <varlistentry>
                  <term>Airborne</term>
                  <listitem>
                    <para>Airborne vessels; typically aircraft and missiles</para>
                  </listitem>
                </varlistentry>
                <varlistentry>
                  <term>Subsurface</term>
                  <listitem>
                    <para>Subsurface vessels; typically submarines and torpedoes</para>
                  </listitem>
                </varlistentry>
              </variablelist>
            </para>
          </sect3>
          <sect3>
            <title>Type</title>
            <para>
              <variablelist>
                <varlistentry>
                  <term>SUBMARINE</term>
                  <listitem>
                    <para>A conventional or nuclear submarine</para>
                  </listitem>
                </varlistentry>
              </variablelist>
              <variablelist>
                <varlistentry>
                  <term>MINISUB</term>
                  <listitem>
                    <para>A minisubmarine, typically of less than 1000 tonnes</para>
                  </listitem>
                </varlistentry>
                <varlistentry>
                  <term>CARRIER</term>
                  <listitem>
                    <para>An aircraft carrier</para>
                  </listitem>
                </varlistentry>
                <varlistentry>
                  <term>FRIGATE</term>
                  <listitem>
                    <para>A frigate</para>
                  </listitem>
                </varlistentry>
                <varlistentry>
                  <term>DESTROYER</term>
                  <listitem>
                    <para>A destroyer</para>
                  </listitem>
                </varlistentry>
                <varlistentry>
                  <term>TROOP_CARRIER</term>
                  <listitem>
                    <para>A troop carrier</para>
                  </listitem>
                </varlistentry>
                <varlistentry>
                  <term>OILER</term>
                  <listitem>
                    <para>A replenishment oiler</para>
                  </listitem>
                </varlistentry>
                <varlistentry>
                  <term>HELICOPTER</term>
                  <listitem>
                    <para>A helicopter</para>
                  </listitem>
                </varlistentry>
                <varlistentry>
                  <term>MPA</term>
                  <listitem>
                    <para>A maritime patrol aircraft</para>
                  </listitem>
                </varlistentry>
                <varlistentry>
                  <term>AV_MISSILE</term>
                  <listitem>
                    <para>An airborne missile</para>
                  </listitem>
                </varlistentry>
                <varlistentry>
                  <term>TORPEDO</term>
                  <listitem>
                    <para>A torpedo, possibly having an airborne state (air-dropped), but
                      predominantly underwater</para>
                  </listitem>
                </varlistentry>
              </variablelist>
            </para>
          </sect3>
        </sect2>
        <sect2 id="mod_movement">
          <title id="movement_chars">Movement</title>
          <para>All participants have movement characteristics such as minimum/maximum speed,
            acceleration rate and turning circle. Participants capable of movement in 3 dimensions
            also have rates of climb/descent. <variablelist>
              <varlistentry>
                <term>Name</term>
                <listitem>
                  <para>The name of this set of manoeuvering characteristics</para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term>AccelerationRate</term>
                <listitem>
                  <para> The rate at which this vehicle accelerates (kt/sec)</para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term>DepthChangeRate</term>
                <listitem>
                  <para>The rate at which this vehicle change depth (m/sec)</para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term>FuelUsageRate</term>
                <listitem>
                  <para>The rate at which this vehicle consumes fuel (%/sec/kt) - modelled as a
                      <link linkend="mod_fuel_usage">percentage of capacity</link>
                  </para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term>MaxDepth</term>
                <listitem>
                  <para>The maximum depth of this vehicle (m)</para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term>MaxSpeed</term>
                <listitem>
                  <para>The maximum speed of this vehicle (kt)</para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term>TurningCircle</term>
                <listitem>
                  <para>The turning circle of this vehicle (m)</para>
                </listitem>
              </varlistentry>
            </variablelist></para>
          <note id="RECHARGE_NOTE">
            <para>Note that SSK's use a modified Movement model, which includes a recharge rate -
              this is the rate at which batteries are charged when on the surface. <variablelist>
                <varlistentry>
                  <term>ChargeRate</term>
                  <listitem>
                    <para>Rate at which batteries are charged (%/sec)</para>
                  </listitem>
                </varlistentry>
              </variablelist></para>
          </note>
        </sect2>
        <sect2 id="mod_fuel_usage">
          <title>Fuel usage</title>
          <para>All participants within <application>ASSET</application> consume fuel. The fuel
            usage rate may be dominant in the behaviour/performance of an participant (such as
            helicopters &amp; conventional submarines), and is normally a function of speed. Fuel is
            modelled as a %age of total capacity - this when a vehicle has full tanks its fuel level
            is at 100%, and the tanks are empty at zero %. </para>
          <para>The fuel usage rate described in <xref linkend="mod_movement"/> is in %/sec/kt.
            These units represent the %age of fuel used per second for a given speed in knots. <note>
              <para>Fuel usage is not considered for Nuclear Submarines</para>
            </note></para>
        </sect2>
        <sect2 id="mod_radiated_noise">
          <title>Radiated Noise</title>
          <para>Participants have a list of mediums under which they may be detected. Most radiated
            noise mediums contain a noise level, and some contain directional and/or speed related
            factors.</para>
          <sect3 id="mod_acoustic_rad">
            <title>Acoustic Radiation</title>
            <para>Acoustic radiated noise is the major detectable medium for underwater vehicles,
              and great efforts have been invested in both its reduction and detection. The
              dissipation of radiated noise through the water is covered in <xref
                linkend="mod_acoustic_loss"/>
            </para>
            <para>Typically vehicles have a base level of radiated noise at stationary which
              increases with speed. The radiated noise level may also be affected by machinery
              line-up or operating posture (such as an SSK snort). Radiated noise is the sum of
                <emphasis>Machinery Noise <footnote>
                  <para>That part of the total noise of the vessel caused by the ship's
                    machinery</para>
                </footnote>, Propellor Noise <footnote>
                  <para>a hybrid form of noise having features and an origin common to both
                    machinery and hydrodynamic noise</para>
                </footnote>
              </emphasis> and <emphasis>Hydrodynamic Noise <footnote>
                  <para>radiated noise originating in the irregular flow of water past the vessel
                    moving through it and causing noise by a variety of hydrodynamic
                    processes</para>
                </footnote>
              </emphasis>
            </para>
            <para>Radiated acoustic noise is modelled in two ways, the first just takes a base-level
              and applies a speed-dependent offset to it. The second way takes a set of sample data
              values and interpolates the required data from it. Obviously the second method
              requires a greater investment in data entry but provides more accurate results <orderedlist>
                <listitem>
                  <para>Base-level method. A single base noise level is provided for the indicated
                    medium. This value is used as the <emphasis>stationary</emphasis> radiated
                    noise. <variablelist>
                      <varlistentry>
                        <term>Base Noise Level</term>
                        <listitem>
                          <para>The stationary radiated noise for this vehicle (dB)</para>
                        </listitem>
                      </varlistentry>
                    </variablelist></para>
                  <para>The base noise is increased by a speed-dependent factor, initally following
                    the following equation:
                    <screen>0.0000252 * Speed ^ 5 - 0.001456 * Speed ^ 4 +
							 0.02165 * Speed ^ 3 + 0.04 * Speed ^ 2 - 0.66 * Speed</screen></para>
                  <para> This equation has been produced by taking the BB radiated noise of WWII
                    submarines (recorded in p337 of <xref linkend="Urick"/>) and stretching the
                    curve to fill a 0-36 knot range. </para>
                </listitem>
                <listitem>
                  <para>Sample data method. A set of data samples are provided, each sample
                    including radiated noise, speed, and bearing <variablelist>
                      <varlistentry>
                        <term>Radiated noise</term>
                        <listitem>
                          <para>The radiated noise level at indicated speed/direction (dB).</para>
                        </listitem>
                      </varlistentry>
                      <varlistentry>
                        <term>Speed</term>
                        <listitem>
                          <para>The vessel speed at which this noise level was recorded (kts)</para>
                        </listitem>
                      </varlistentry>
                      <varlistentry>
                        <term>Direction</term>
                        <listitem>
                          <para>The direction which on which this noise level was recorded (degs
                            +/-180)</para>
                        </listitem>
                      </varlistentry>
                    </variablelist></para>
                  <para>A modified linear interpolation method is used. The user supplies a series
                    of measured values of radiated noise versus speed, versus relative angle. The
                    following sequence of steps is follows: <orderedlist>
                      <listitem>
                        <para>First examine the relative angle for which the radiated noise is
                          required. Take the set of radiated noise values for the nearest relative
                          angle.</para>
                      </listitem>
                      <listitem>
                        <para>At the requested speed, determine if this speed falls between the
                          values provided (in which case conduct a linear interpolation to determine
                          the radiated noise), else take the value of the lowest or highest radiated
                          noise value (according to whether the requested speed falls below of above
                          the set of values provided, resp).</para>
                      </listitem>
                    </orderedlist></para>
                </listitem>
              </orderedlist></para>
            <para>
              <mediaobject id="interpolation_graph">
                <imageobject>
                  <imagedata fileref="figures/interp_noise.gif" format="GIF" align="center"
                    width="100%"/>
                </imageobject>
                <textobject>
                  <phrase>Graph showing provided and interpolated values.</phrase>
                </textobject>
                <caption>
                  <para>Example of interpolation method used</para>
                </caption>
              </mediaobject>
            </para>
            <para>The interpolation graph shows that if radiated noise was supplied at 4, 8, 12, and
              24 knots, the radiated noise at a speed of 10 knots would be around124dB, whilst the
              radiated noise at 2 knots would be 90dB and the noise at 27 knots would be
              170dB.</para>
            <para>The data supplied for the sample data method the following guidelines should be
              observed: <itemizedlist>
                <listitem>
                  <para>For each relative bearing a full range of speed values should be provided,
                    however sparse the samples are.</para>
                </listitem>
                <listitem>
                  <para>[TBD]</para>
                </listitem>
              </itemizedlist></para>
          </sect3>
        </sect2>
        <sect2 id="mod_self_noise">
          <title>Self Noise</title>
          <para>Urick defines self-noise as: <quote>Self noise differs from raditaed noise in that
              the measurement hydrophone is located on board the noise-making vessel and travels
              with it, instead of being fixed in the sea at a location some distance away. Although
              the fundamental causes of noise are the same, the relative importance of the various
              noise sources is different. Moreover, in self-noise, the paths by which the noise
              reaches the hydrophone are many and varied and play a dominant role in affecting the
              magnitude and kind of noise received by the hydrophone on the moving vessel</quote>. </para>
          <para>The same modelling options are provided for self-noise as are used for Radiated
            Noise ( <xref linkend="mod_radiated_noise"/>). </para>
        </sect2>
      </sect1>
      <sect1 id="mod_platforms">
        <title>Platform Types</title>
        <para/>
        <sect2>
          <title>Airborne</title>
          <para>Airborne participants include helos, aircraft and airborne missiles. <note>
              <para>Airborne <application>ASSET</application>s typically travel much more quickly
                than their surface or subsurface counterparts, and short <link
                  linkend="scenario_time_step">scenario time steps</link> should be used. </para>
            </note></para>
          <sect3>
            <title>Aircraft</title>
            <para/>
            <sect4>
              <title>Vessel states</title>
              <para/>
            </sect4>
          </sect3>
          <sect3>
            <title>Helicopters</title>
            <para/>
          </sect3>
          <sect3>
            <title>Airborne Missiles</title>
            <para/>
          </sect3>
          <sect3>
            <title>Typical behaviours</title>
            <para>An aircraft typically adopts one of two roles, it will either escort another
              participant (such as an surface HVU), or will conduct a search about a barrier or
              area. On detection of a potential target, the airborne
                <application>ASSET</application> will normally communicate this detection then close
              to <link linkend="prosecute_behaviour">prosecute</link> it. </para>
            <para>The <link linkend="escort_behaviour">Escort</link> behaviour is used to instruct
              an airborne <application>ASSET</application> to escort another participant, with the
              aircraft loosely stationed at a relatively long range. </para>
            <para>One of the <link linkend="transit_behaviours">Transit</link> behaviours is used to
              put the aircraft in a search pattern, possibly involving a <link linkend="mod_transit"
                >Transit</link> to place it on station. </para>
          </sect3>
        </sect2>
        <sect2>
          <title>Submarine</title>
          <para>Submarine platforms, by definition, travel in 3-dimensions, and typically favour use
            of their acoustic sensor.</para>
          <sect3>
            <title>Conventional Submarine</title>
            <para>Within the Royal Naval use of <application>ASSET</application> the conventional
              submarine is, and probably will continue to be, the predominant <glossterm
                linkend="G_RED_FORCE">red force</glossterm>. </para>
          </sect3>
          <sect3>
            <title>Nuclear Submarine</title>
            <para/>
          </sect3>
          <sect3>
            <title>Torpedo</title>
            <para>Torpedoes modelled within <application>ASSET</application> may be air, surface or
              submarine launched. Sonar is their main sensor, and they are fuel-limited. The actual
              logic used by most submarines is beyond that which may be modelled - but within
                <application>ASSET</application> it typically follows the following pattern: <orderedlist>
                <listitem>
                  <para>Follow a bearing</para>
                </listitem>
                <listitem>
                  <para>Search for a particular target type</para>
                </listitem>
                <listitem>
                  <para>Collide with the target (triggering the warhead)</para>
                </listitem>
              </orderedlist></para>
          </sect3>
          <sect3>
            <title>Countermeasure</title>
            <para/>
          </sect3>
        </sect2>
        <sect2>
          <title>Surface</title>
          <para>A surface platform is essentially a submarine platform which is constrained to
            travel at zero depth.</para>
        </sect2>
      </sect1>
      <sect1 id="mod_vessel_movement_chap">
        <title>Vessel Movement</title>
        <para>Vessel movement is managed within <application>ASSET</application> at two levels,
          firstly there is <link linkend="mod_turn_algorithm">low level modelling</link> where a
          participant makes a transition to a new course and speed using the correct
          acceleration/turn rates. Secondly a <link linkend="mod_waypoint_transition">higher level
            modelling</link> manages a participant's movement through a series of waypoints.
          Information is passed between the movement algorithms using the <link
            linkend="G_CURRENT_STATE">Current Status</link>, the <link linkend="G_DEMANDED_STATE"
            >Demanded Status</link>, and the set of vessel <link linkend="mod_movement">manoeuvering
            characteristics,</link> as shown in the following diagram: <figure>
            <title>Overview of vessel maneouvering</title>
            <mediaobject>
              <imageobject>
                <imagedata fileref="figures/HighLevelMovement.gif" format="GIF" align="center"   width="100%" scalefit="1"/>
              </imageobject>
            </mediaobject>
          </figure></para>
        <sect2 id="mod_turn_algorithm">
          <title>Turn Algorithm</title>
          <sect3>
            <title>Introduction</title>
            <para>This low level algorithm was first created in the days of MWDC whilst
              investigating submarine TMA, and has been used many times since in the solution of ad
              hoc modelling problems.</para>
          </sect3>
          <sect3>
            <title>Author</title>
            <para>Ian Mayo coded the current implementation. If I remember correctly the original
              strategy for the algorithm was devised by Iain McKenna, c++ implementation by me, with
              review by Steve Little then John Golding back in around 1996 then 2000 resp.</para>
          </sect3>
          <sect3>
            <title>Description</title>
            <para>The Turn Algorithm is the low-level model which moves a vessel along a course and
              speed, and handles the transition from current course/speed/depth to demanded
              course/speed/depth within that platform's <link linkend="mod_movement">manoevering
                characteristics</link>. </para>
          </sect3>
          <sect3>
            <title>Inputs</title>
            <para>Vessel <link linkend="mod_movement">manoevering characteristics</link> (units
              described in source section) </para>
          </sect3>
          <sect3>
            <title>Algorithm</title>
            <para>The algorithm updates a vessel's course/speed/location according to the demanded
              course/speed/depth passed in and that vessel's set of <link linkend="mod_movement"
                >manoevering characteristics</link>. That is, the vessel will tend towards the
              demanded status within that platform's constraints. </para>
            <para>Of significance within the algorithm is the decision regarding which of the course
              &amp; speed change will take longer. Processing the first part of the manoeuvre (where
              both course and speed are changing), followed by the second part of the manoeuvre
              (where only one is changing) simplifies the calculation of mean speed (and this
              distance travelled) during each period. The algorithm is implemented as
              follows:</para>
            <para>
              <figure>
                <title>Flowchart showing turn algorithm</title>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="figures/TurnAlgorithm.gif" width="100%" scalefit="1" format="GIF" align="center"/>
                  </imageobject>
                </mediaobject>
              </figure>
            </para>
          </sect3>
          <sect3>
            <title>Source</title>
            <para>Original invention by Submarine Division, MWDC circa 1995.</para>
          </sect3>
          <sect3>
            <title>Test case</title>
            <para>to be determined... Something like the following set: <orderedlist>
                <listitem>
                  <para>Check vessel moves correct distance in correct direction on steady
                    course/speed at different step sizes</para>
                </listitem>
                <listitem>
                  <para>Check vessel accelerates &amp; decelerates at indicated rates, within
                    indicated limits</para>
                </listitem>
                <listitem>
                  <para>Check vessel turns at set turning circle for different speeds, maintaining
                    straight heading between</para>
                </listitem>
                <listitem>
                  <para>Check combination of course &amp; speed changes, check that individual
                    changes complete at correct point</para>
                </listitem>
              </orderedlist></para>
          </sect3>
          <sect3>
            <title>Modelling guidance</title>
            <para>ASSET users have no direct control over this algorithm - vessel movement is
              controlled via the vessel manoeuvering characteristics. The vehicle dynamics modelled
              within this algorithm are environment-independent, and may be seen to reflect the
              movement of submarines, aircraft or surface vessels. Higher level modelling algorithms
              (such as <link linkend="mod_waypoint_transition">waypoint transition</link>) are used
              to translate demanded location into demanded course and depth - including where
              platforms travel near to but do not actually visit a location. </para>
            <para>The turn algorithm works at most sizes of time interval, though because of an
              smoothing function (when speed delta is less than 0.001 m/sec or course delta is less
              than 0.01 degrees just assume on speed/course) time intervals of the order of several
              milliseconds may not work.</para>
          </sect3>
          <sect3>
            <title>Incorporation</title>
            <para>July 2003</para>
          </sect3>
        </sect2>
        <sect2 id="mod_waypoint_transition">
          <title>Waypoint transition</title>
          <para>At a higher level, there is a requirement for modelling functionality to fill the
            void between the decision model requesting a particular action and the demanded course
            and speed required for the turn algorithm. An example of this is where a decision model
            requires that a participant pass through a particular waypoint and leave that waypoint
            already on a particular course (passing through a Directed On Top). The
              <emphasis>old</emphasis> way of modelling waypoints within
              <application>ASSET</application> was for the participant to just keep heading towards
            a waypoint until within a set minimum threshold of it, then assume the new course -
            which isn't sufficiently complex to handle waypoint transitions. </para>
          <para>Where necessary the waypoint transition algorithm can break a single time step down
            into a number of discrete course/speed/depth changes, calling the <link
              linkend="mod_turn_algorithm">Turn Algorithm</link> repeatedly as required. </para>
          <para>The waypoint transition algorithm provides support for a variety of styles of
            visiting waypoints: <variablelist>
              <varlistentry>
                <term>On Top Waypoint</term>
                <listitem>
                  <para>The participant must travel directly to the waypoint, passing over it</para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term>Directed On Top Waypoint</term>
                <listitem>
                  <para>The participant must travel over the waypoint in such a fashion that it
                    leaves the waypoint on a requested heading (or towards the next waypoint)</para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term>Make Waypoint</term>
                <listitem>
                  <para>The participant must travel towards a waypoint but make a turn to head
                    towards the next waypoint at the last possible moment (the track of the aircraft
                    will describe an arc which is the internal tangent to both the inbound and
                    outbound tracks)</para>
                </listitem>
              </varlistentry>
            </variablelist></para>
          <para>In general terms the algorithm first inspects the transition style, then performs
            processing dependent on the style requested.</para>
          <sect3>
            <title>On Top Waypoint</title>
            <sect4>
              <title>Author</title>
              <para>Jon Walters, Merlin C OA. Flowchart drawn up by Ian Mayo</para>
            </sect4>
            <sect4>
              <title>Description</title>
              <para>An aircraft is required to reach a point in 3D space in the quickest way while
                maintaining a current speed.</para>
            </sect4>
            <sect4>
              <title>Inputs</title>
              <para>INPUT - waypoint x,y,z.</para>
              <para> OUTPUT - state 'captured' or 'missed' </para>
            </sect4>
            <sect4>
              <title>Algorithm</title>
              <para>Calculate intercept course and height difference. Turn onto course and
                simultaneously Climb or Dive as necessary. Refine intercept course and Turn again if
                necessary. When within 50 m laterally and 100 ft vertically (capture criteria) of
                waypoint declare waypoint is 'captured' - continue on current course and set height
                to waypoint height. If aircraft never within 50 m or 100ft of waypoint then declare
                waypoint 'missed' and execute a Recapture Waypoint. </para>
              <para><figure>
                  <title>Flowchart showing On Top Waypoint algorithm</title>
                  <mediaobject>
                    <imageobject>
                      <imagedata fileref="figures/OnTopWaypoint.gif" format="GIF" align="center"/>
                    </imageobject>
                  </mediaobject>
                </figure>The following diagram illustrates the manner in which the algorithm decides
                whether a waypoint is attainable. If the waypoint is within either of the
                  <emphasis>unattainable</emphasis> circles the participant cannot get to it by
                merely selecting the direct course as demanded course and sailing down it. If the
                waypoint is within one of the unattainable circles then the vessel must first turn
                away before heading towards the target location. <figure float="0">
                  <title>Unattainable waypoints</title>
                  <mediaobject>
                    <imageobject>
                      <imagedata fileref="figures/unattainable_waypoints.gif"  width="100%" scalefit="1"/>
                    </imageobject>
                  </mediaobject>
                </figure></para>
            </sect4>
            <sect4>
              <title>Source</title>
              <para>Merlin Flying Guide</para>
            </sect4>
            <sect4>
              <title>Test Case</title>
              <para>Start at (0,0,200) heading 000 speed 60 m/s and make waypoint at (10000, 10000,
                1000) in a time of xxxx (calculate). Return 'captured' as a result. Start at
                (0,0,1000) heading 090 speed 70 m/s and attempt to make waypoint (-500,0,100).
                Ensure 'missed' is returned at that the aircraft ends up at 1000 ft. </para>
            </sect4>
            <sect4>
              <title>Modelling Guidance</title>
              <para>Element of aircraft maneuver. The criteria of being within 50m and 100ft is
                called 'capturing' the waypoint. In practice there are just going to be some
                position, course and speeds (PCS) of the aircraft from where it just cannot capture
                a waypoint.</para>
            </sect4>
            <sect4>
              <title>Incorporation</title>
              <para>tbd</para>
            </sect4>
          </sect3>
          <sect3>
            <title>Directed On Top Waypoint</title>
            <para/>
          </sect3>
          <sect3>
            <title>Make Waypoint</title>
            <formalpara>
              <title>Author</title>
              <para>Jon Walters</para>
            </formalpara>
            <formalpara>
              <title>Description</title>
              <para>An aircraft is required turn onto the next leg of a route without passing
                through the waypoint that marks the junction of its current leg with the next
              </para>
            </formalpara>
            <formalpara>
              <title>Inputs</title>
              <para> inbound leg track, out bound leg track, rate of turn</para>
            </formalpara>
            <formalpara>
              <title>Algorithm</title>
              <para>Assumption aircraft established on course of inbound leg. Commence a turn at the
                designated ROT and current speed that will make the aircraft describe an arc which
                is the internal tangent to both the inbound and outbound tracks. If this is
                geometrically impossible due to the length of the legs being shorter than radius of
                the turn, then carry out an On-Top WP behaviour instead.<!----><figure float="0">
                  <title>Make Waypoint algorithm</title>
                  <mediaobject>
                    <imageobject>
                      <imagedata fileref="figures/MakeWaypoint.gif"  width="100%" scalefit="1"/>
                    </imageobject>
                  </mediaobject>
                </figure></para>
            </formalpara>
            <formalpara>
              <title>Source</title>
              <para>Merlin Flying Guide</para>
            </formalpara>
            <formalpara>
              <title>Test case</title>
              <para>
                <itemizedlist>
                  <listitem>
                    <para>Establish leg between start (0,0,1000) and end (20000,20000,1000) transit
                      height 1000 ft. Place aircraft on leg with 5000 m to run. Outbound leg is from
                      (20000,20000,1000) to (20000,0,1000). Check aircraft turn right through 45
                      degrees, starting with xxxx m to run to (20000, 20000, 1000) and joining the
                      new track xxxx m down leg from (20000,20000,1000) </para>
                  </listitem>
                  <listitem>
                    <para>Establish leg between start (0,0,1000) and end (1000,1000,1000) transit
                      height 1000 ft. Place aircraft on leg with 800 m to run at speed 70 m/s, Rate
                      of turn set to 1 deg/sec. Outbound leg is from (1000,1000,1000) to
                      (1000,0,1000). Check aircraft reverts to On-Top WP behaviour and successfully
                      arrives at the final waypoint (1000,0,1000) </para>
                  </listitem>
                </itemizedlist>
              </para>
            </formalpara>
            <formalpara>
              <title>Modelling guidance</title>
              <para>Element of aircraft maneuver.</para>
            </formalpara>
            <formalpara>
              <title>Incorporation</title>
              <para>Sep 03</para>
            </formalpara>
          </sect3>
        </sect2>
      </sect1>
    </chapter>
    <chapter id="mod_sensors">
      <title>Sensors</title>
      <sect1 id="mod_lookup_model">
        <title>Lookup Sensor Model</title>
        <para>In Autumn 2003 an improved above-water sensor model was defined within MWC.</para>
        <para>This model covers all non-acoustic detection sensors used by aircraft. The following
          criteria were used in its formulation: <orderedlist>
            <listitem>
              <para>Must be simple, both in execution and in principle</para>
            </listitem>
            <listitem>
              <para>Must be transparent, with all assumptions made obvious</para>
            </listitem>
            <listitem>
              <para>Must be simple</para>
            </listitem>
            <listitem>
              <para>Must be tweakable, with constants included that allowing tuning to the real life
                (RL@copy;) world expected performance</para>
            </listitem>
            <listitem>
              <para>Must be simple</para>
            </listitem>
            <listitem>
              <para>Must capture the vital parameters that most affect performance in RL@copy;
              </para>
            </listitem>
            <listitem>
              <para>Must be simple</para>
            </listitem>
          </orderedlist></para>
        <sect2 id="lookup_basics">
          <title>Basics of model</title>
          <para>A modified "cookie-cutter" approach is proposed. Each entity will be in one of 4
            states with respect to the sensor - UNDETECTED, DETECTED, CLASSIFIED and IDENTIFIED. </para>
          <para>Each sensor will have a predicted range RP, which will be calculated for each
            combination of sensor and target and depend on (inter alia) target, target aspect,
            weather conditions. In addition each sensor will have a time between detection
            opportunities (TBDO in seconds) and variability in detection range - VDR (between 0 and
            1.0). Every time an RP is generated a random element is applied to produce an
            instantaneous range (RI). For each completed TBDO there will be one possible detection
            opportunity, with the RI compared to the actual range (RA). If RA &lt;= RI then the
            target will be in state DETECTED. Transition to CLASSIFIED will take place when range
            has reduced to a certain percentage of R <emphasis>and</emphasis> the contact has been
            DETECTED for a certain number of seconds - transition to IDENTIFIED will then take place
            in a similar manner. The parameters for these transitions will be specified for each
            sensor. If at any time the contact goes outside a maximum tracking range then it will
            revert to UNDETECTED status. </para>
          <para>The sensor model will thus have the following parameters: </para>
          <para>
            <variablelist>
              <varlistentry>
                <term>Predicted Range (RP)</term>
                <listitem>
                  <para>Range at which there is a chance of making an initial detection - calculated
                    for each sensor/target combination either by formula or through lookup
                    table</para>
                </listitem>
              </varlistentry>
            </variablelist>
            <variablelist>
              <varlistentry>
                <term>Instantaneous detection range (RI)</term>
                <listitem>
                  <para>The actual range determined for each combination of target and sensor
                    obtained by adding a variable number to the RP</para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term>Variability in detection range (VDR)</term>
                <listitem>
                  <para>A number by which RP is multiplied to obtain the standard deviation of the
                    normal distribution of the instantaneous detection range</para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term>Time between detection opportunities (TBDO)</term>
                <listitem>
                  <para>The time in seconds after which a detection chance occurs</para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term>Max Range Factor (MRF)</term>
                <listitem>
                  <para>The number that RP must be multiplied by to obtain the maximum tracking
                    range</para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term>Classification range factor (CRF)</term>
                <listitem>
                  <para>The number the RP must be multiplied by to obtain the range at which
                    CLASSIFICATION occurs</para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term>Classification time period (CTP)</term>
                <listitem>
                  <para>The time after which a contact automatically goes from from DETECTED to
                    CLASSIFIED</para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term>Identification range factor (IRF)</term>
                <listitem>
                  <para>The number the RP must be multiplied by to obtain the range at which
                    IDENTIFICATION occurs</para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term>Identification time period (ITP)</term>
                <listitem>
                  <para>The time after which a contact automatically goes from from CLASSIFIED to
                    IDENTIFIED</para>
                </listitem>
              </varlistentry>
            </variablelist>
          </para>
          <para><?xm-replace_text {para}?></para>
        </sect2>
        <sect2 id="lookup_definitions">
          <title>Definitions</title>
          <para>
            <variablelist>
              <varlistentry>
                <term>Range</term>
                <listitem>
                  <para>The instantaneous <emphasis>slant</emphasis> range between sensor and target
                  </para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term>Undetected</term>
                <listitem>
                  <para>completely unknown to the sensor</para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term>Detected</term>
                <listitem>
                  <para>position known but no knowledge of type or identity</para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term>Classified</term>
                <listitem>
                  <para>target known as a broad target type, ie ENEMY FRIGATE or FRIENDLY
                    PERISCOPE</para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term>Identified</term>
                <listitem>
                  <para>target known by name and class</para>
                </listitem>
              </varlistentry>
            </variablelist>
          </para>
        </sect2>
        <sect2>
          <title>Method of calculating RI</title>
          <para>RI is obtained by multiplying RP by a random number generated on the normal
            distribution. Generate a random number (n) from the normal distribution with a mean of
            zero and a standard deviation equal to VDR. Obtain the RI from the following equation:
              <computeroutput>RI = RP * (1 + n)</computeroutput>
          </para>
          <para>If RI is less than zero then set RI to zero. </para>
          <para>This RI is generated once for every combination of target and sensor - that is every
            time an RP is generated the random element is applied to produce an RI. </para>
        </sect2>
        <sect2 id="mod_lookup_radar">
          <title>Radar Model (for Merlin radar)</title>
          <para>
            <variablelist>
              <varlistentry>
                <term>RP</term>
                <listitem>
                  <para>This is derived from the single transmission radar range equation with only
                    target radar crosssectional area as a variable. RP is given by either
                      <computeroutput>sqrt(2*R*ownship_ht/B)+sqrt(2*R*tgt_ht/B) [RADAR HORIZON range
                      RH]</computeroutput> or <computeroutput>K * (sigma * seastate
                      )^(1/4)</computeroutput>, whichever is less. R is the radius of the Earth
                    (6370950m), and B is the fudge factor, 0.7366 for radar (back-calculated from
                    the radar horizon formula in the Merlin Tacman. Sigma is the notional radar
                    cross section in square metres, K is a constant dependent on the radar and
                    seastate is factor dependent on sea state. Sigma is obtained from a lookup up
                    table of target type and aspect of target - seastate from a lookup table on type
                    of target and actual sea state. </para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term>VDR</term>
                <listitem>
                  <para>0.02</para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term>TBDO</term>
                <listitem>
                  <para>2</para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term>MRF</term>
                <listitem>
                  <para>1.2 (if &gt; RH then equal to RH)</para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term>CRF</term>
                <listitem>
                  <para>0</para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term>CTP</term>
                <listitem>
                  <para>0</para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term>IRF</term>
                <listitem>
                  <para>0</para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term>ITP</term>
                <listitem>
                  <para>0</para>
                </listitem>
              </varlistentry>
            </variablelist>
          </para>
          <para>Examples of lookup tables for radar sensor: <table id="LOOKUP_SIGMA_TABLE">
              <title>Sigma</title>
              <tgroup cols="6">
                <colspec colname="col1" colnum="1" colwidth="1*"/>
                <colspec colname="col2" colnum="2" colwidth="2.00*"/>
                <colspec colname="col3" colnum="3" colwidth="2.00*"/>
                <colspec colname="col4" colnum="4" colwidth="2.00*"/>
                <colspec colname="col5" colnum="5" colwidth="2.00*"/>
                <colspec colname="col6" colnum="6" colwidth="2.00*"/>
                <colspec colname="col7" colnum="7" colwidth="2.00*"/>
                <thead>
                  <row>
                    <entry> </entry>
                    <entry>Dead ahead</entry>
                    <entry>Bow</entry>
                    <entry>Beam</entry>
                    <entry>Quarter</entry>
                    <entry>Astern</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>Frigate</entry>
                    <entry>1000</entry>
                    <entry>3000</entry>
                    <entry>4000</entry>
                    <entry>3000</entry>
                    <entry>1000</entry>
                  </row>
                  <row>
                    <entry>CVS</entry>
                    <entry>2000</entry>
                    <entry>8000</entry>
                    <entry>10000</entry>
                    <entry>8000</entry>
                    <entry>2000</entry>
                  </row>
                  <row>
                    <entry>Periscope</entry>
                    <entry>0.5</entry>
                    <entry>0.5</entry>
                    <entry>0.5</entry>
                    <entry>0.5</entry>
                    <entry>0.5</entry>
                  </row>
                  <row>
                    <entry>Fishing boat</entry>
                    <entry>5</entry>
                    <entry>8</entry>
                    <entry>10</entry>
                    <entry>8</entry>
                    <entry>5</entry>
                  </row>
                </tbody>
              </tgroup>
            </table><table id="LOOKUP_SEA_STATE_TABLE">
              <title>Sea State</title>
              <tgroup cols="7">
                <thead>
                  <row>
                    <entry> </entry>
                    <entry>0-1</entry>
                    <entry>2</entry>
                    <entry>3</entry>
                    <entry>4</entry>
                    <entry>5</entry>
                    <entry>6</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>Frigate</entry>
                    <entry>1</entry>
                    <entry>1</entry>
                    <entry>1</entry>
                    <entry>1</entry>
                    <entry>0.95</entry>
                    <entry>0.9</entry>
                  </row>
                  <row>
                    <entry>CVS</entry>
                    <entry>1</entry>
                    <entry>1</entry>
                    <entry>1</entry>
                    <entry>1</entry>
                    <entry>1</entry>
                    <entry>0.95</entry>
                  </row>
                  <row>
                    <entry>Periscope</entry>
                    <entry>1</entry>
                    <entry>0.8</entry>
                    <entry>0.75</entry>
                    <entry>0.7</entry>
                    <entry>0.5</entry>
                    <entry>0.3</entry>
                  </row>
                  <row>
                    <entry>Fishing boat</entry>
                    <entry>1</entry>
                    <entry>0.9</entry>
                    <entry>0.8</entry>
                    <entry>0.75</entry>
                    <entry>0.7</entry>
                    <entry>0.5</entry>
                  </row>
                </tbody>
              </tgroup>
            </table></para>
        </sect2>
        <sect2 id="mod_lookup_eyesight">
          <title>Eyesight</title>
          <para>
            <variablelist>
              <varlistentry>
                <term>RP</term>
                <listitem>
                  <para>RP is derived from Beer's law, adjusted for sea state and with the contrast
                    abstracted out to a target visibility factor.</para>
                  <para>
                    <computeroutput>RP = -1/Atten * ln (V * seastate) * light</computeroutput>
                    <emphasis>or</emphasis>
                    <computeroutput>visual horizon (VH) = sqrt(2*R*ownship_ht/B)+sqrt(2*R*tgt_ht/B)
                      [RADAR HORIZON range RH]</computeroutput>, whichever is less </para>
                  <para>Where: <variablelist>
                      <varlistentry>
                        <term>Atten</term>
                        <listitem>
                          <para>is an atmospheric attenuation factor (mist, fog, clear day, haze, et
                            al) obtained from a lookup table</para>
                        </listitem>
                      </varlistentry>
                      <varlistentry>
                        <term>V</term>
                        <listitem>
                          <para>is a target visibility value based obtained from a lookup table
                          </para>
                        </listitem>
                      </varlistentry>
                      <varlistentry>
                        <term>Sea State</term>
                        <listitem>
                          <para>is a modifier for sea state found via a lookup table from target
                            type and sea state.</para>
                        </listitem>
                      </varlistentry>
                      <varlistentry>
                        <term>Light</term>
                        <listitem>
                          <para>is a factor allowing for darkness or the lack thereof</para>
                        </listitem>
                      </varlistentry>
                      <varlistentry>
                        <term>R</term>
                        <listitem>
                          <para>Radius of the Earth (6370950m)</para>
                        </listitem>
                      </varlistentry>
                      <varlistentry>
                        <term>Factor</term>
                        <listitem>
                          <para>0.8279 (taken from Bowditch, the Practical Navigator, 1995, Table
                            12).</para>
                        </listitem>
                      </varlistentry>
                    </variablelist></para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term>VDR</term>
                <listitem>
                  <para>0.05</para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term>TBDO</term>
                <listitem>
                  <para>10</para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term>MRF</term>
                <listitem>
                  <para>1.05 (if &gt; VH then equal to VH)</para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term>CRF</term>
                <listitem>
                  <para>0.8</para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term>CTP</term>
                <listitem>
                  <para>20</para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term>IRF</term>
                <listitem>
                  <para>0.2</para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term>ITP</term>
                <listitem>
                  <para>30</para>
                </listitem>
              </varlistentry>
            </variablelist>
          </para>
          <para>Examples of lookup tables for Eyesight sensor: <table id="optic_attenuation">
              <title>Attenuation</title>
              <tgroup cols="7">
                <thead>
                  <row>
                    <entry> </entry>
                    <entry>Very clear</entry>
                    <entry>Clear</entry>
                    <entry>Light Haze</entry>
                    <entry>Haze</entry>
                    <entry>Mist</entry>
                    <entry>Fog</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>Atten</entry>
                    <entry>8e-5</entry>
                    <entry>2e-4</entry>
                    <entry>5e-4</entry>
                    <entry>1e-3</entry>
                    <entry>2e-3</entry>
                    <entry>4e-3</entry>
                  </row>
                </tbody>
              </tgroup>
            </table><table id="optic_v">
              <title>V</title>
              <tgroup cols="5">
                <colspec colname="col1" colnum="1" colwidth="1*"/>
                <colspec colname="col2" colnum="2" colwidth="2.00*"/>
                <colspec colname="col3" colnum="3" colwidth="2.00*"/>
                <colspec colname="col4" colnum="4" colwidth="2.00*"/>
                <colspec colname="col5" colnum="5" colwidth="2.00*"/>
                <colspec colname="col7" colnum="6" colwidth="2.00*"/>
                <thead>
                  <row>
                    <entry> </entry>
                    <entry>CVS</entry>
                    <entry>Frigate</entry>
                    <entry>Periscope</entry>
                    <entry>Fishing Boat</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>V</entry>
                    <entry>0.2</entry>
                    <entry>0.2</entry>
                    <entry>0.12</entry>
                    <entry>0.16</entry>
                  </row>
                </tbody>
              </tgroup>
            </table><table id="optic_sea_state">
              <title>Sea State</title>
              <tgroup cols="7">
                <thead>
                  <row>
                    <entry> </entry>
                    <entry>0-1</entry>
                    <entry>2</entry>
                    <entry>3</entry>
                    <entry>4</entry>
                    <entry>5</entry>
                    <entry>6</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>Frigate</entry>
                    <entry>1</entry>
                    <entry>1</entry>
                    <entry>1</entry>
                    <entry>1</entry>
                    <entry>0.95</entry>
                    <entry>0.9</entry>
                  </row>
                  <row>
                    <entry>CVS</entry>
                    <entry>1</entry>
                    <entry>1</entry>
                    <entry>1</entry>
                    <entry>1</entry>
                    <entry>1</entry>
                    <entry>0.95</entry>
                  </row>
                  <row>
                    <entry>Periscope</entry>
                    <entry>1</entry>
                    <entry>0.8</entry>
                    <entry>0.75</entry>
                    <entry>0.7</entry>
                    <entry>0.5</entry>
                    <entry>0.3</entry>
                  </row>
                  <row>
                    <entry>Fishing boat</entry>
                    <entry>1</entry>
                    <entry>0.9</entry>
                    <entry>0.8</entry>
                    <entry>0.75</entry>
                    <entry>0.7</entry>
                    <entry>0.5</entry>
                  </row>
                </tbody>
              </tgroup>
            </table><table id="optic_light">
              <title>Light</title>
              <tgroup cols="5">
                <colspec colname="col1" colnum="1" colwidth="1*"/>
                <colspec colname="col2" colnum="2" colwidth="2.00*"/>
                <colspec colname="col3" colnum="3" colwidth="2.00*"/>
                <colspec colname="col4" colnum="4" colwidth="2.00*"/>
                <colspec colname="col5" colnum="5" colwidth="2.00*"/>
                <colspec colname="col7" colnum="6" colwidth="2.00*"/>
                <thead>
                  <row>
                    <entry> </entry>
                    <entry>Daylight</entry>
                    <entry>Dusk</entry>
                    <entry>Moonlit Night</entry>
                    <entry>Dark Night</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>Light</entry>
                    <entry>1</entry>
                    <entry>0.4</entry>
                    <entry>0.3</entry>
                    <entry>0.05</entry>
                  </row>
                </tbody>
              </tgroup>
            </table></para>
        </sect2>
        <sect2 id="LookupMADSensor">
          <title>MAD</title>
          <para>
            <variablelist>
              <varlistentry>
                <term>RP</term>
                <listitem>
                  <para>RP is a simple lookup table based on target size (see below for unrealistic
                    figures). </para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term>VDR</term>
                <listitem>
                  <para>0.05</para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term>TBDO</term>
                <listitem>
                  <para>1</para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term>MRF</term>
                <listitem>
                  <para>1.0</para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term>CRF</term>
                <listitem>
                  <para>0.6</para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term>CTP</term>
                <listitem>
                  <para>1</para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term>IRF</term>
                <listitem>
                  <para>0</para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term>ITP</term>
                <listitem>
                  <para>0</para>
                </listitem>
              </varlistentry>
            </variablelist>
          </para>
          <para>
            <table id="LOOKUP_PREDICTED_RANGE_TABLE_MAD">
              <title>Predicted Range</title>
              <tgroup cols="2">
                <thead>
                  <row>
                    <entry> </entry>
                    <entry>Range</entry>
                  </row>
                </thead>
                <tbody>
                  <row>
                    <entry>Frigate</entry>
                    <entry>2000</entry>
                  </row>
                  <row>
                    <entry>CVS</entry>
                    <entry>3000</entry>
                  </row>
                  <row>
                    <entry>Submarine</entry>
                    <entry>1200</entry>
                  </row>
                  <row>
                    <entry>Fishing boat</entry>
                    <entry>400</entry>
                  </row>
                </tbody>
              </tgroup>
            </table>
          </para>
        </sect2>
        <sect2>
          <title>ESM (Generic RWR)</title>
          <para>This model will have to take into account whether the transmitter is on or off. At
            the moment of switching on the first detection possibility takes place, then additional
            detection opportunities spaced at TBDO intervels. We would simulate the single sweep of
            a submarine radar by switching off again within the TBDO of the radar. <variablelist>
              <varlistentry>
                <term>RP</term>
                <listitem>
                  <para>is a simple, but large, lookup table based on target emitter. In principle
                    this might be replaced by some form of equation, but that will require a lot of
                    knowledge of receiver and transmitter properties.</para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term>VDR</term>
                <listitem>
                  <para>0.1</para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term>TBDO</term>
                <listitem>
                  <para>Based on scan rate of emitter, obtained from lookup table</para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term>MRF</term>
                <listitem>
                  <para>1.0</para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term>CRF</term>
                <listitem>
                  <para>1.0</para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term>CTP</term>
                <listitem>
                  <para>10</para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term>IRF</term>
                <listitem>
                  <para>1.0</para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term>ITP</term>
                <listitem>
                  <para>15</para>
                </listitem>
              </varlistentry>
            </variablelist></para>
        </sect2>
        <sect2>
          <title>Electro-optics</title>
          <para>Same as eyesight but with tweaked parameters depending on the type of sensor.</para>
        </sect2>
        <sect2>
          <title>History</title>
          <para>
            <variablelist>
              <varlistentry>
                <term>Version 1</term>
                <listitem>
                  <para>Initial formulation of algorithms</para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term>Version 2</term>
                <listitem>
                  <para>Incorporates modifications suggested by Iain Mckenna. These remove the
                    probability of detection variable and replace it be a variable detection range
                    at each scan, which is now renamed a detection opportunity. Also a small tweak
                    to the ESM model requiring a variable TBDO found from a lookup table and
                    dependent on the type of emitter.</para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term>Version 2.1</term>
                <listitem>
                  <para>Modified the variable element so that it applies to each combination of
                    target and sensor only once, and is not recalculated at each detection
                    opportunity</para>
                </listitem>
              </varlistentry>
            </variablelist>
          </para>
        </sect2>
      </sect1>
    </chapter>
    <chapter id="mod_interaction">
      <title>Interaction</title>
      <sect1 id="mod_detection">
        <title>Detection</title>
        <para>The Passive and Active sonar equations from the Sonar Modelling Handbook are used to
          model detections. With a negative signal excess no detection will occur, with increasing
          positive signal excess a detection is more likely to occur.</para>
        <para>This section records the modelling of sensors. Inevitably sensors are described
          accordingy to the medium which they detect, but the following general equation is followed
          within all mediums: <screen>SE = (TN - (ON - DI) - RD - BN) - PL</screen>In the following
          sections, the mechanism for detections in particular mediums is described, including how
          the components of the detection diverge form the common meanings listed above. </para>
        <sect2 id="mod_acoustic_detection">
          <title>Passive Acoustic Detections</title>
          <para>As expected, in acoustic detections the passive and active sonar equations are used
            unchanged. The components of the passive equation <ulink
              url="../smh/volume1/1-3.pdf#page=4">(here)</ulink>are derived as follows: <variablelist>
              <varlistentry>
                <term>SE</term>
                <listitem>
                  <para>The resultant energy arriving at the sensor, a positive signal excess
                    producing a valid detection.</para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term>TN</term>
                <listitem>
                  <para>The radiated noise of the participant carrying the sensor, normally speed
                    and aspect dependent</para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term>TN</term>
                <listitem>
                  <para>The radiated noise of the target participant, normally speed and aspect
                    dependent</para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term>DI</term>
                <listitem>
                  <para>Directivity Index of the current sensor. For sensors which do not provide
                    360 degree coverage the DI is used to "blank-out" areas without coverage</para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term>RD</term>
                <listitem>
                  <para>The factor applied to components of the sonar equation to compensate for
                    errors in observed and predicted sonar performance</para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term>PL</term>
                <listitem>
                  <para>The acoustic energy dissipated between target (source) and sensor, as
                    illustrated in the earlier graph ( <xref linkend="mod_medium_bb"/>) </para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term>BN</term>
                <listitem>
                  <para>Background Noise in the direction of the source from the sensor</para>
                </listitem>
              </varlistentry>
            </variablelist></para>
        </sect2>
        <sect2 id="mod_active_acoustic">
          <title>Active Acoustic Detections</title>
          <para>Some of the components used in the Passive Sonar equation <ulink
              url="../smh/volume1/1-5.pdf#page=3">(here)</ulink> are modified for use in active
            detections: <variablelist>
              <varlistentry>
                <term>SL</term>
                <listitem>
                  <para>The source level of the active sonar</para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term>PL</term>
                <listitem>
                  <para>Twice the acoustic energy dissipated between target (source) and sensor, as
                    illustrated in the earlier graph ( <xref linkend="mod_medium_bb"/>) </para>
                </listitem>
              </varlistentry>
            </variablelist></para>
        </sect2>
        <sect2 id="mod_NB_acoustic_detection">
          <title>Passive Narrowband Detections</title>
          <para>The equation components used in Narrowband detection have the same meaning as those
            in the Broadband Passive detection shown <link linkend="mod_acoustic_detection"
              >above</link> (though they will inevitable take diferent values). </para>
          <sect3>
            <title>Towed Arrays</title>
            <para>The towed array is the traditional sensor used for passive narrowband detection. A
              significant characteristic of the towed array is the fact that it is only able to
              produce valid data when in a roughly straight line. Whilst a number of algorithms
              exist to aid in the prediction of array steady time, <application>ASSET</application>
              uses a fixed steady time, configurable for each towed array sensor. </para>
          </sect3>
        </sect2>
      </sect1>
      <sect1 id="mod_comms">
        <title>Communications</title>
        <para>Communications within <application>ASSET</application> is implemented similar to
          detections. A transmitter is treated similarly to an active sensor, and a receiver is
          treated similarly to a passive receiver. </para>
        <sect2>
          <title>Message Type</title>
          <para>The following tree of message types are supported: <orderedlist>
              <listitem>
                <para>Tactical <orderedlist>
                    <listitem>
                      <para>Detection <itemizedlist>
                          <listitem>
                            <para>Target Type</para>
                          </listitem>
                          <listitem>
                            <para>Target Strength</para>
                          </listitem>
                          <listitem>
                            <para>Target course, speed, depth (where known)</para>
                          </listitem>
                        </itemizedlist></para>
                    </listitem>
                  </orderedlist></para>
              </listitem>
            </orderedlist></para>
          <para>In addition, all messages contain ownship position and the current DTG.</para>
        </sect2>
        <sect2>
          <title>Lifetime</title>
          <para/>
        </sect2>
      </sect1>
    </chapter>
    <chapter id="mod_behaviours">
      <title>Behaviours</title>
      <sect1 id="mod_behaviours_intro">
        <title>Introduction</title>
        <para>Many objects in <application>ASSET</application> possess their own behaviour,
          implemented through a form of artificial intelligence. The provision of behaviours
          prevents the need for a dedicated driver for each vessel, and allows agreed behaviours to
          be distributed throughout an organisation - so that all analysts are trialling tactics
          against the same target for example. </para>
        <para>The behaviour model also allows a particular set of Rules of Engagement (
            <acronym>ROE</acronym>) to be defined for a vessel or group of vessels to give them a
          repeatable behaviour. </para>
        <para>Each behaviour receives the current vessel <glossterm linkend="G_CURRENT_STATE"
            >status</glossterm> (course, speed, depth), the current list of <glossterm
            linkend="G_DETECTION">detections</glossterm>, and a <glossterm
            linkend="G_SCENARIO_MONITOR">scenario activity monitor</glossterm>, returning a
            <glossterm linkend="G_DEMANDED_STATE">demanded status</glossterm> (course/speed). If the
          particular behaviour does currently apply, then a null <glossterm
            linkend="G_DEMANDED_STATE">demanded status</glossterm> is returned. When a participant
          receives a null <glossterm linkend="G_DEMANDED_STATE">demanded status</glossterm> it
          continues travelling on its current course and slows down to it's minimum speed. </para>
        <para>Structural behaviours allow the combination of "real" behaviours - providing a complex
          behaviour pattern without actually making any tactical decision themselves. Structural
          behaviours control how their child behaviours are used/called. Some behaviours (such as
            <link linkend="behaviour_Waterfall">Waterfall</link>) allow the processing of one
          behaviour to be interrupted by a higher priority behaviour. When this happens the
          lower-level behaviour receives a message to inform it that it's processing was
          interrupted. Most behaviours will not make use of this message. Some <link
            linkend="transit_behaviours">transitting</link> and <link linkend="tactical_behaviours"
            >tactical</link> ones do though. The Ladder-Search, for example takes the participant
          back to it's last point on the search track prior to being interrupted. </para>
        <para>All behaviours share some of the same attributes <variablelist>
            <varlistentry id="attribute_name">
              <term>Name</term>
              <listitem>
                <para>The name given to this instance of this behaviour. In one participant we may
                  use the same type of behaviour (such as Move) a number of times, each should be
                  given a unique name </para>
              </listitem>
            </varlistentry>
            <varlistentry id="attribute_isAlive">
              <term>IsAlive</term>
              <listitem>
                <para>Some behaviours may be defined in the scenario file, but to aid analysis you
                  may choose to not make them active. They are still loaded into
                    <application>ASSET</application>, but they are never used by their parent
                  participant. </para>
              </listitem>
            </varlistentry>
          </variablelist></para>
      </sect1>
      <sect1 id="structural_behaviours">
        <title>State behaviours</title>
        <para>This set of behaviours manages the transition between vessel states - either a
          condition depending upon a state or the request that a vessel make the transition to a new
          state.</para>
        <sect2>
          <title>New State Request</title>
          <formalpara>
            <title>Author</title>
            <para>Ian Mayo</para>
          </formalpara>
          <formalpara>
            <title>Description</title>
            <para>Request that a participant make the transition to an new state - and keep on
              requesting until we reach that point,</para>
          </formalpara>
          <formalpara>
            <title>Inputs</title>
            <para>Status and demanded status - so we can check if we are already in the state, or
              already requesting the transition to the new state.</para>
          </formalpara>
          <formalpara>
            <title>Algorithm</title>
            <para>See if the status object already carries this state. If it does return null, if it
              doesn't then extend the current demanded status to incorporate the new state request
              and return that.</para>
          </formalpara>
          <formalpara>
            <title>Source</title>
            <para>Original invention</para>
          </formalpara>
          <formalpara>
            <title>Test case</title>
            <para>In test harness test that demanded status is produced when not already in that
              state, and not produced when that state achieved.</para>
          </formalpara>
          <formalpara>
            <title>Modelling guidance</title>
            <para>None so far.</para>
          </formalpara>
          <formalpara>
            <title>Incorporation</title>
            <para>August 03</para>
          </formalpara>
        </sect2>
      </sect1>
      <sect1 id="mod_struct_behaviours">
        <title>Structural Behaviours</title>
        <para>Typically the overall behaviour of a vessel will comprise a number of discrete
          behaviors. The overall behaviour is constructed using these structural behaviours. In them
          selves they do not cause a vessel to move or change state, but they do control which
          actual discrete behaviour is triggered </para>
        <sect2 id="behaviour_sequence">
          <title>Sequence</title>
          <sect3>
            <title>Category</title>
            <para>Behaviour/structural</para>
          </sect3>
          <sect3>
            <title>Description</title>
            <para>A sequence of behaviours, each of which is fired once</para>
          </sect3>
          <sect3>
            <title>Behaviour parameters</title>
            <itemizedlist>
              <listitem>
                <para>Series of behaviours</para>
              </listitem>
              <listitem>
                <para>Whether to restart on completion</para>
              </listitem>
              <listitem>
                <para>Current behaviour (default value of first)</para>
              </listitem>
            </itemizedlist>
          </sect3>
          <sect3>
            <title>Algorithm</title>
            <orderedlist>
              <listitem>
                <para>Fire current behaviour</para>
              </listitem>
              <listitem>
                <para>Is the next behaviour at the end of the list?</para>
                <orderedlist>
                  <listitem>
                    <para>If no, fire the next behaviour, remember that one as the
                        <emphasis>current</emphasis>
                    </para>
                  </listitem>
                  <listitem>
                    <para>If yes, are we set to restart? <orderedlist>
                        <listitem>
                          <para>If yes, move the first behaviour</para>
                        </listitem>
                        <listitem>
                          <para>If no, return null</para>
                        </listitem>
                      </orderedlist></para>
                  </listitem>
                </orderedlist>
              </listitem>
            </orderedlist>
          </sect3>
          <sect3>
            <title>Source</title>
            <para>Original invention</para>
          </sect3>
          <sect3>
            <title>Test Case</title>
            <orderedlist>
              <listitem>
                <para>Create non-repeating behaviour using sequence of behaviours, check they are
                  fired in correct order, returning null on completion.</para>
              </listitem>
              <listitem>
                <para>Create repeating behaviour using sequence of behaviours, check they are fired
                  in correct order, firing first again on completion.</para>
              </listitem>
            </orderedlist>
          </sect3>
          <sect3>
            <title>Modelling Guidance</title>
            <para>This is a way of producing a behaviour representing a complex set of steps, such
              as transiting to a specified point before conducting a specific search at that
              point</para>
          </sect3>
        </sect2>
        <sect2 id="behaviour_Waterfall">
          <title>Waterfall</title>
          <para>A series of behaviours in descending order, where if the highest priority behavior
            is not applicable control falls to the next highest priority, and so on. The normal
            implementation of a Waterfall behaviour contains a lowest-priority behaviour which is
            always valid (wander, return home, etc). Where the lowest priority behavious contains a
            test, if it fails no demanded state is produced and the vessel remains on steady
            course/speed.</para>
          <sect3>
            <title>Description</title>
            <para>A prioritised list of behaviours</para>
          </sect3>
          <sect3>
            <title>Behaviour parameters</title>
            <variablelist>
              <varlistentry>
                <term>Series of behaviours</term>
                <listitem>
                  <para>Series of behaviours to be executed in descending order of priority</para>
                </listitem>
              </varlistentry>
            </variablelist>
            <itemizedlist>
              <listitem>
                <para/>
              </listitem>
              <listitem>
                <para>Stay Alive</para>
              </listitem>
            </itemizedlist>
          </sect3>
          <sect3>
            <title>Algorithm</title>
            <orderedlist>
              <listitem>
                <para>Fire behaviour at head of Waterfall</para>
              </listitem>
              <listitem>
                <para>Did it return a demanded status?</para>
                <orderedlist>
                  <listitem>
                    <para>If yes, return this demanded status</para>
                  </listitem>
                  <listitem>
                    <para>If no, descend through other behaviours until one returns a demanded
                      status</para>
                  </listitem>
                </orderedlist>
              </listitem>
              <listitem>
                <para>If none return demanded status, return null</para>
              </listitem>
            </orderedlist>
          </sect3>
          <sect3>
            <title>Source</title>
            <para>Original invention</para>
          </sect3>
          <sect3>
            <title>Test Case</title>
            <para>Create behaviour for vessel where high level behaviours aren&apos;t always valid.
              Check that control falls to lower level behaviours when high level ones aren&apos;t
              valid, and that lower level ones are triggered when higher one(s) are valid.</para>
          </sect3>
          <sect3>
            <title>Modelling Guidance</title>
            <para>This is a fundamental behaviour component within ASSET, capable of producing a
              wide range of behaviours. Frequently the lowest-level behaviour will not have a
              condition - it will always return a result: such as <link linkend="mod_wander"
                >wander</link> - so that the participant is never 'uncontrolled'. </para>
          </sect3>
          <sect3>
            <title>See Also</title>
            <para>Also see the <link linkend="mod_wander">Wander</link> behaviour </para>
          </sect3>
        </sect2>
        <sect2 id="behaviour_switch">
          <title>Switch</title>
          <para>This structural behaviour allows different participant behaviours to be defined -
            only one of which is actually adopted within a scenario run. The multiple behaviour
            definitions allow a quick change in participant behaviour whilst in an interactive
            (Workbench) run, or for a range of target behaviours to be recorded when in a batch
            modelling (Monte Carlo) run. </para>
          <sect3>
            <title>Description</title>
            <para>A range of behaviours, only one of which is active</para>
          </sect3>
          <sect3>
            <title>Behaviour parameters</title>
            <itemizedlist>
              <listitem>
                <para>Series of behaviours</para>
              </listitem>
              <listitem>
                <para>The index of the active behaviour</para>
              </listitem>
            </itemizedlist>
          </sect3>
          <sect3>
            <title>Algorithm</title>
            <para>Actuate the indicated behaviour</para>
          </sect3>
          <sect3>
            <title>Source</title>
            <para>Original invention</para>
          </sect3>
          <sect3>
            <title>Test Case</title>
            <para>Define a series of behaviours, with an index indicating the active behaviour.
              Execute the Switch, ensuring that only the indicated behaviour is active.</para>
          </sect3>
          <sect3>
            <title>Modelling Guidance</title>
            <para>Frequently there are occasions when a participant could execute one of a number of
              behaviours. This could be represented within the scenario as definitions of multiple
              vessels - but since all vessel properties (other than the behaviour) are identical
              this incurs a maintenance/configuration cost. Use of the switch allows a single
              participant to be defined, with it's behaviour controlled at run-time. When performing
              Monte Carlo simulation use of the Switch allows the target population to randomly
              employ one of the predetermined behaviours (Aggressive vs Evasive for example).</para>
          </sect3>
          <sect3>
            <title>See Also</title>
            <para>In Monte Carlo generation the <link linkend="mod_gen_choice">Choice</link>
              scenario variance can be used to randomly vary the Switch index attribute - producing
              targets with random behaviour. </para>
          </sect3>
        </sect2>
        <sect2 id="mod_composite">
          <title>Composite</title>
          <para/>
          <sect3 id="behaviour_condition">
            <title>Description</title>
            <para>A traditional condition/response structure allowing complex behaviors to be
              defined. Thus, if the condition is successul, the response is followed.</para>
          </sect3>
          <sect3>
            <title>Behaviour parameters</title>
            <itemizedlist>
              <listitem>
                <para>Condition behaviour</para>
              </listitem>
              <listitem>
                <para>Response behaviour</para>
              </listitem>
            </itemizedlist>
          </sect3>
          <sect3>
            <title>Algorithm</title>
            <orderedlist>
              <listitem>
                <para>Perform the condition test.</para>
              </listitem>
              <listitem>
                <para>Was a value returned?</para>
                <orderedlist>
                  <listitem>
                    <para>If yes, pass value to the response behaviour, then return the demanded
                      status</para>
                  </listitem>
                  <listitem>
                    <para>If no, return null</para>
                  </listitem>
                </orderedlist>
              </listitem>
            </orderedlist>
          </sect3>
          <sect3>
            <title>Source</title>
            <para>Original invention</para>
          </sect3>
          <sect3>
            <title>Test Case</title>
            <para>Create behaviour for vessel where high level behaviours aren&apos;t always valid.
              Check that control falls to lower level behaviours when high level ones aren&apos;t
              valid, and that lower level ones are triggered when higher one(s) are valid.</para>
          </sect3>
          <sect3>
            <title>Modelling Guidance</title>
            <para>The versatility provided by this architectural behaviour lends it to being used in
              a wide variety of behaviours, though the results value passed between the condition
              and response needs to be compatible with both</para>
          </sect3>
          <sect3>
            <title>See Also</title>
            <para>See also the <link linkend="condition_behaviour">Condition</link> and <link
                linkend="response_behaviour">Response</link> groups of behaviours </para>
          </sect3>
        </sect2>
        <sect2 id="mod_conditions">
          <title>Conditions</title>
          <para/>
          <sect3>
            <title>Detection</title>
            <para>This condition is triggered on detection of another participant, though a
              target-type structure allows for the categories ( <xref linkend="mod_category"/>) of
              target detected to be filtered. For example, an ASW detection behaviour is only
              normally to be triggered on detection of a sub-surface target. </para>
            <para>Additional parameters allow for the signal strength, maximum/minimum range, and
              relative bearing thresholds to be specified, applicable where the detecting sensor is
              capable of producing such data.</para>
          </sect3>
          <sect3>
            <title>Location</title>
            <para>This condition is triggered when the participant achieves a position relative to
              the location provided. The condition may be triggered if the participant either
              exceeds a set range from the location, or when the participant is less than a set
              range from the location, according to the setting of the SucceedIfCloser flag.</para>
          </sect3>
          <sect3>
            <title>TimePoint</title>
            <para>This condition is triggered once a specified time has been reached (so this
              condition will be successful at or after the indicated time)</para>
          </sect3>
        </sect2>
        <sect2 id="mod_responses">
          <title>Responses</title>
          <para/>
          <sect3>
            <title>Manoeuvre to course</title>
            <para>This response directs the participant to steer a particular course, depth, and
              speed - with these values optionally being relative to the detected target (where
              course, speed, depth available - else current course, speed, depth retained).</para>
          </sect3>
          <sect3>
            <title>Manoeuvre to Location</title>
            <para>This response directs the participant to steer a course to a particular location,
              optionally including values for speed and depth. Where speed or depth are not provided
              the existing values are continued.</para>
          </sect3>
          <sect3>
            <title>Launch Weapon</title>
            <para>This response launches a weapon (read in from the indicated file). The response is
              normally triggered by a detection condition, from which it determines the bearing (and
              possibly range) to the target.</para>
          </sect3>
          <sect3>
            <title>Denonate</title>
            <para>This response is normally part of the behaviour of a weapon (torpedo or missile)
              and happens at a particular proximity to a specified type of target.</para>
          </sect3>
          <sect3>
            <title>Transmit Signal</title>
            <para>This response allows a participant to send a specific signal, typically reporting
              a detection. A signal reporting a detection may include absolute or relative
              directions to the target.</para>
          </sect3>
        </sect2>
      </sect1>
      <sect1 id="transit_behaviours">
        <title>Transiting Behaviours</title>
        <para>This section describes the set of behaviours which describe how a participant moves
          through the scenario space. The low-level movement of participants is not part of the
          behaviour-model, but is represented as the <link linkend="mod_turn_algorithm">core
            maneuvering model</link>. This allows the user-controlled movement behaviors to be
          implemented at a higher level. </para>
        <sect2 id="mod_wander">
          <title>Wander</title>
          <formalpara>
            <title>Author</title>
            <para>Ian Mayo</para>
          </formalpara>
          <formalpara>
            <title>Description</title>
            <para>Vessel travels within a region, turning back towards origin once range limit
              exceeded</para>
          </formalpara>
          <formalpara>
            <title>Inputs</title>
            <para>
              <itemizedlist>
                <listitem>
                  <para>Origin point (lat/long)</para>
                </listitem>
                <listitem>
                  <para>Maximum range to wander out to</para>
                </listitem>
                <listitem>
                  <para>(Optional) speed to travel at</para>
                </listitem>
                <listitem>
                  <para>(Optional) depth to travel at</para>
                </listitem>
              </itemizedlist>
            </para>
          </formalpara>
          <formalpara>
            <title>Algorithm</title>
            <para>
              <orderedlist>
                <listitem>
                  <para>If speed and depth are provided, and the vessel isn&apos;t at that course
                    and depth set demanded course and depth.</para>
                </listitem>
                <listitem>
                  <para>Measure range from origin. <orderedlist>
                      <listitem>
                        <para>If range greater than threshold, calculate course to origin. Add a
                          random offset to this (0 to 120 degrees port or starboard). Set this
                          demanded course </para>
                      </listitem>
                    </orderedlist></para>
                </listitem>
              </orderedlist>
            </para>
          </formalpara>
          <formalpara>
            <title>Source</title>
            <para>Original invention</para>
          </formalpara>
          <formalpara>
            <title>Test Case</title>
            <para>
              <orderedlist>
                <listitem>
                  <para>Origin, demanded course and demanded speed provided. Vessel is near origin
                    within range of the threshold - but not at (achievable) demanded depth and
                    speed. Vessel should adopt that course and speed - then when at range threshold
                    check that new demanded course requested</para>
                </listitem>
                <listitem>
                  <para>Only origin provided. Vessel is near origin within range of the threshold.
                    Vessel should continue at current course and speed - then when at range
                    threshold check that new demanded course requested</para>
                </listitem>
              </orderedlist>
            </para>
          </formalpara>
          <formalpara>
            <title>Modelling Guidance</title>
            <para>
              <itemizedlist>
                <listitem>
                  <para>This behaviour may be used as a "fallback" behaviour used to keep a vessel
                    in an operations area when no higher priority waterfall behaviours are
                    operative.</para>
                </listitem>
                <listitem>
                  <para>The vessel will not be expected to travel directly through the origin - even
                    if a random offset wasn&apos;t applied. The vessel is given the demanded course
                    when reaching the outer perimeter of the wander area, but following the course
                    change it will no longer be heading directly for the origin (assuming it has a
                    non-zero turning circle). </para>
                </listitem>
              </itemizedlist>
            </para>
          </formalpara>
          <formalpara>
            <title>Incorporation</title>
            <para>Jul 03</para>
          </formalpara>
          <formalpara>
            <title>See Also</title>
            <para>
              <ulink url="http://intranet2/coag/asset/help/schemas/ASSET.xsd.html#type_WanderType"
                >Online</ulink> schema definition </para>
          </formalpara>
          <note id="mod_rectangle_wander">
            <para>Note that the Rectangle Wander behaviour is a slightly modified wander behaviour
              where instead of travelling up to the indicated range from the origin the participant
              wanders around a rectangular area. Other aspects remain as the wander
              behaviour.</para>
          </note>
        </sect2>
        <sect2 id="mod_transit">
          <title>Transit</title>
          <formalpara>
            <title>Author</title>
            <para>Ian Mayo</para>
          </formalpara>
          <formalpara>
            <title>Description</title>
            <para>Vessel travels between two or more way-points in a straight line - possibly
              travelling back through the points in reverse or starting again from the start</para>
          </formalpara>
          <formalpara>
            <title>Inputs</title>
            <para>
              <itemizedlist>
                <listitem>
                  <para>Set of way-points, each containing lat./long./depth.</para>
                </listitem>
                <listitem>
                  <para>Transit speed (optional)</para>
                </listitem>
                <listitem>
                  <para>Three-way flag indicating what to do on completion: quit, cycle again
                    through way-points from start, or cycle back through way-points in
                    reverse</para>
                </listitem>
                <listitem>
                  <para>Threshold for how close vessel travels to way-point (large threshold needed
                    for large time steps)</para>
                </listitem>
              </itemizedlist>
            </para>
          </formalpara>
          <formalpara>
            <title>Algorithm</title>
            <para>
              <orderedlist>
                <listitem>
                  <para>Determine if we have passed next way-point (are we within threshold of
                    way-point location) <orderedlist>
                      <listitem>
                        <para>If we have passed next way-point, determine if that was last way-point <orderedlist>
                            <listitem>
                              <para>If not, retrieve location of next way-point</para>
                            </listitem>
                            <listitem>
                              <para>If we&apos;ve passed last way-point determine if we are set to
                                travel back in reverse or from start <orderedlist>
                                  <listitem>
                                    <para>If travelling back in reverse or from start, determine
                                      next way-point (point before last if backward, point after
                                      first if forward)</para>
                                  </listitem>
                                  <listitem>
                                    <para>If not, return NULL</para>
                                  </listitem>
                                </orderedlist></para>
                            </listitem>
                          </orderedlist></para>
                      </listitem>
                      <listitem>
                        <para>If not, retrieve location of next waypoint</para>
                      </listitem>
                    </orderedlist></para>
                </listitem>
                <listitem>
                  <para>Remember id of next way-point</para>
                </listitem>
                <listitem>
                  <para>Determine course to next way-point</para>
                </listitem>
                <listitem>
                  <para>Return demanded course and maintain speed to next way-point</para>
                </listitem>
              </orderedlist>
            </para>
          </formalpara>
          <formalpara>
            <title>Source</title>
            <para>Original invention</para>
          </formalpara>
          <formalpara>
            <title>Test Case</title>
            <para>
              <orderedlist>
                <listitem>
                  <para>Supply vessel at (0,0) with 3 way points (0,1), (1,1), (1,0). Request vessel
                    transits through them at 12 kts, quitting on completion. Vessel should travel
                    though way-points in ascending order, return null demanded status on
                    completion.</para>
                </listitem>
                <listitem>
                  <para>Supply vessel at (1,1) with 3 way points (0,1), (0,0), (1,0). Request vessel
                    transits through them at 12 kts, reversing back through on completion. Vessel
                    should travel though way-points in ascending order, cycle back through to first,
                    then travel forwards again. Test completes as vessel starts moving forwards
                    through points second time.</para>
                </listitem>
                <listitem>
                  <para>Supply vessel at (1,1) with 3 way points (0,1), (0,0), (1,0). Request vessel
                    transits through them at 12 kts, travelling through forwards again on
                    completion. Vessel should travel though way-points in ascending order, travel
                    directly back to first, then travel forwards again. Test completes as vessel
                    starts moving forwards through points second time.</para>
                </listitem>
              </orderedlist>
            </para>
          </formalpara>
          <formalpara>
            <title>Modelling Guidance</title>
            <para>
              <orderedlist>
                <listitem>
                  <para>The range threshold for deciding if the vessel has passed the way-point is
                    fundamental to this behavior - the range must be achievable within this time
                    step for a vessel at this speed, otherwise vessel will &apos;step-over&apos;
                    way-point, turn back, head for same way-point again, and so on continuously.
                    Using a particularly large threshold however may result in the vessel changing
                    &apos;target&apos; to the next way-point before actually visiting this
                    one.</para>
                </listitem>
                <listitem>
                  <para>An alternative to the use of the Range-threshold would be to identify
                    passing the way-point by it appearing in the stern-arcs: as soon as this occurs
                    the way-point is met and we move on to the next one. <emphasis>This choice needs
                      further discussion.</emphasis>
                  </para>
                </listitem>
                <listitem>
                  <para>This behavior may be used for a traditional transit/long journey, but may
                    also be used as a component in a composite behavior such as prosecuting target
                    at datum: following the detection a single-point transit is created which
                    enables the vessel to travel from where-ever it is to the target point, then
                    drop-out for the next behavior to be used: such as dropping weapon.</para>
                </listitem>
              </orderedlist>
            </para>
          </formalpara>
          <formalpara>
            <title>Incorporation</title>
            <para>Jul 03</para>
          </formalpara>
          <para/>
        </sect2>
        <sect2 id="mod_transit_waypoint">
          <title>Transit Waypoint</title>
          <formalpara>
            <title>Author</title>
            <para>Ian Mayo</para>
          </formalpara>
          <formalpara>
            <title>Description</title>
            <para>This extension of the <link linkend="mod_transit">Transit</link> behaviour allows
              the specification of how the vessel should navigate the waypoints within the route-
              using one of <link linkend="mod_waypoint_transition">waypoint transition</link> modes.
            </para>
          </formalpara>
          <formalpara>
            <title>Inputs</title>
            <para>
              <itemizedlist>
                <listitem>
                  <para>Route inputs as for <link linkend="mod_transit">Transit</link> behaviour
                  </para>
                </listitem>
                <listitem>
                  <para>Waypoint transition mode (one of On Top Waypoint, Directed On Top Waypoint,
                    Make Waypoint</para>
                </listitem>
              </itemizedlist>
            </para>
          </formalpara>
          <formalpara>
            <title>Algorithm</title>
            <para>As for <link linkend="mod_transit">Transit</link> behaviour, but instead of just
              determing course to next waypoint produce demanded course (possibly following a delay
              period) according to the <link linkend="mod_waypoint_transition">waypoint
                transition</link> mode. </para>
          </formalpara>
          <formalpara>
            <title>Source</title>
            <para>
              <link linkend="mod_transit">Transit</link> behaviour, supplemented by Merlin flying
              guide </para>
          </formalpara>
          <formalpara>
            <title>Test Case</title>
            <para>
              <orderedlist>
                <listitem>
                  <para>Supply vessel at (0,0) with 3 way points (0,1), (1,1), (1,0). Request vessel
                    transits through them at 12 kts, quitting on completion. Vessel should travel
                    though way-points in ascending order, return null demanded status on
                    completion.</para>
                </listitem>
                <listitem>
                  <para>Supply vessel at (1,1) with 3 way points (0,1), (0,0), (1,0). Request vessel
                    transits through them at 12 kts, reversing back through on completion. Vessel
                    should travel though way-points in ascending order, cycle back through to first,
                    then travel forwards again. Test completes as vessel starts moving forwards
                    through points second time.</para>
                </listitem>
                <listitem>
                  <para>Supply vessel at (1,1) with 3 way points (0,1), (0,0), (1,0). Request vessel
                    transits through them at 12 kts, travelling through forwards again on
                    completion. Vessel should travel though way-points in ascending order, travel
                    directly back to first, then travel forwards again. Test completes as vessel
                    starts moving forwards through points second time.</para>
                </listitem>
              </orderedlist>
            </para>
          </formalpara>
          <formalpara>
            <title>Modelling Guidance</title>
            <para>
              <orderedlist>
                <listitem>
                  <para>The range threshold for deciding if the vessel has passed the way-point is
                    fundamental to this behavior - the range must be achievable within this time
                    step for a vessel at this speed, otherwise vessel will &apos;step-over&apos;
                    way-point, turn back, head for same way-point again, and so on continuously.
                    Using a particularly large threshold however may result in the vessel changing
                    &apos;target&apos; to the next way-point before actually visiting this
                    one.</para>
                </listitem>
                <listitem>
                  <para>An alternative to the use of the Range-threshold would be to identify
                    passing the way-point by it appearing in the stern-arcs: as soon as this occurs
                    the way-point is met and we move on to the next one. <emphasis>This choice needs
                      further discussion.</emphasis>
                  </para>
                </listitem>
                <listitem>
                  <para>This behavior may be used for a traditional transit/long journey, but may
                    also be used as a component in a composite behavior such as prosecuting target
                    at datum: following the detection a single-point transit is created which
                    enables the vessel to travel from where-ever it is to the target point, then
                    drop-out for the next behavior to be used: such as dropping weapon.</para>
                </listitem>
              </orderedlist>
            </para>
          </formalpara>
          <formalpara>
            <title>Incorporation</title>
            <para>Jul 03</para>
          </formalpara>
          <para/>
        </sect2>
        <sect2 id="mod_working_transit">
          <title>Working Transit</title>
          <formalpara>
            <title>Author</title>
            <para>Ian Mayo</para>
          </formalpara>
          <formalpara>
            <title>Description</title>
            <para>This extension of the <link linkend="mod_transit">Transit</link> behaviour allows
              the specification of an activity to perform at regular intervals during the transit.
            </para>
          </formalpara>
          <formalpara>
            <title>Inputs</title>
            <para>
              <itemizedlist>
                <listitem>
                  <para>Route inputs as for <link linkend="mod_transit">Transit</link> behaviour
                  </para>
                </listitem>
                <listitem>
                  <para>The number of stops to make (at which points the activity will be
                    conducted)</para>
                </listitem>
                <listitem>
                  <para>The activity to perform at each stop</para>
                </listitem>
              </itemizedlist>
            </para>
          </formalpara>
          <formalpara>
            <title>Algorithm</title>
            <para>As for transit behaviour, with the exception that the activity is performed at
              regular intervals along the route. Note that the behaviour cuts off the corners of the
              transit route, to ensure that turns are only conducted at activity points.</para>
          </formalpara>
          <formalpara>
            <title>Source</title>
            <para> Original definition</para>
          </formalpara>
          <formalpara>
            <title>Test Case</title>
            <para> None yet. </para>
          </formalpara>
          <formalpara>
            <title>Modelling Guidance</title>
            <para> This behaviour has been defined to make complex transits easier to define,
              particularly when the transit involves frequent stops to perform some action such as
              Stern Arc Clearance, taking a submarine broadcase, etc. </para>
          </formalpara>
          <formalpara>
            <title>Incorporation</title>
            <para>Sep 04</para>
          </formalpara>
          <para/>
        </sect2>
        <sect2 id="mod_move">
          <title>Move</title>
          <para>Whilst the other transiting behaviours represent absolute movements, the Move
            behaviour represents an instruction for a participant to perform a relocation relative
            to it&apos;s current location. The relocation is expressed in terms of speed, course,
            and the distance to travel.</para>
          <formalpara>
            <title>Author</title>
            <para>Ian Mayo</para>
          </formalpara>
          <formalpara>
            <title>Description</title>
            <para>Either relocate to another location, or switch to a demanded
              course/speed/depth</para>
          </formalpara>
          <formalpara>
            <title>Inputs</title>
            <para>INPUT - Either target location with speed</para>
          </formalpara>
          <formalpara>
            <title>Algorithm</title>
            <para>Check aircraft is not already on course. Convert the G pulled to the equivalent
              ROT. Choose direction of turn that minimises the angle turned through. Turn in that
              direction at current speed and at a rate of turn ROT until course is as demanded.
              Default ROT is 3 degrees per second, but in may vary between 1 and 10 degrees. If the
              angle of turn is exactly 180 degrees then turn right. This maneuver may be combined
              with the constant speed parts of either a Climb or Dive. </para>
          </formalpara>
          <formalpara>
            <title>Source</title>
            <para>Merlin flying guide</para>
          </formalpara>
          <formalpara>
            <title>Test Case</title>
            <para>
              <itemizedlist>
                <listitem>
                  <para>On a course of 120 and demanded course of 210 ensure that the turn is to the
                    right and takes 30 seconds.</para>
                </listitem>
                <listitem>
                  <para>Repeat using equivalent G to a 3 degree per sec turn. </para>
                </listitem>
              </itemizedlist>
            </para>
          </formalpara>
          <formalpara>
            <title>Modelling Guidance</title>
            <para>Atomic element of aircraft maneuver. The limitation that speed changes cannot
              occur during a turn is chosen to simplify the modelling required.</para>
          </formalpara>
          <formalpara>
            <title>Incorporation</title>
            <para>Aug 03</para>
          </formalpara>
        </sect2>
        <sect2 id="mod_turn">
          <title>Turn</title>
          <formalpara>
            <title>Author</title>
            <para>Jon Walters</para>
          </formalpara>
          <formalpara>
            <title>Description</title>
            <para>An aircraft is required to change its course from one value to another, turning by
              the shortest route</para>
          </formalpara>
          <formalpara>
            <title>Inputs</title>
            <para>INPUT - demanded course, desired rate of turn (ROT) or G pulled.</para>
          </formalpara>
          <formalpara>
            <title>Algorithm</title>
            <para>Check aircraft is not already on course. Convert the G pulled to the equivalent
              ROT. Choose direction of turn that minimises the angle turned through. Turn in that
              direction at current speed and at a rate of turn ROT until course is as demanded.
              Default ROT is 3 degrees per second, but in may vary between 1 and 10 degrees. If the
              angle of turn is exactly 180 degrees then turn right. This maneuver may be combined
              with the constant speed parts of either a Climb or Dive. </para>
          </formalpara>
          <formalpara>
            <title>Source</title>
            <para>Merlin flying guide</para>
          </formalpara>
          <formalpara>
            <title>Test Case</title>
            <para>
              <itemizedlist>
                <listitem>
                  <para>On a course of 120 and demanded course of 210 ensure that the turn is to the
                    right and takes 30 seconds.</para>
                </listitem>
                <listitem>
                  <para>Repeat using equivalent G to a 3 degree per sec turn. </para>
                </listitem>
              </itemizedlist>
            </para>
          </formalpara>
          <formalpara>
            <title>Modelling Guidance</title>
            <para>Atomic element of aircraft maneuver. The limitation that speed changes cannot
              occur during a turn is chosen to simplify the modelling required.</para>
          </formalpara>
          <formalpara>
            <title>Incorporation</title>
            <para>Aug 03</para>
          </formalpara>
        </sect2>
        <sect2 id="mod_long_way_turn">
          <title>Long Way Turn</title>
          <formalpara>
            <title>Author</title>
            <para>Jon Walters</para>
          </formalpara>
          <formalpara>
            <title>Description</title>
            <para>An aircraft is required to change its course from one value to another, turning by
              the longest route</para>
          </formalpara>
          <formalpara>
            <title>Inputs</title>
            <para>INPUT - demanded course, desired rate of turn (ROT) or G pulled</para>
          </formalpara>
          <formalpara>
            <title>Algorithm</title>
            <para> Check aircraft is not already on course. Convert the G pulled to the equivalent
              ROT Choose direction of turn that maximises the angle turned through. Turn in that
              direction at current speed and at a rate of turn ROT until course is as demanded.
              Default ROT is 3 degrees per second, but in may vary between 1 and 10 degrees. If the
              angle of turn is exactly 180 degrees then turn right. This maneuver may be combined
              with constant speed parts of either a Climb or Dive. </para>
          </formalpara>
          <formalpara>
            <title>Source</title>
            <para>Merlin flying guide</para>
          </formalpara>
          <formalpara>
            <title>Test Case</title>
            <para>
              <itemizedlist>
                <listitem>
                  <para>On a course of 240 and demanded course of 270 ensure that the turn is to the
                    left and takes 110 seconds. </para>
                </listitem>
                <listitem>
                  <para>Repeat using equivalent G to a 3 degree per sec turn.</para>
                </listitem>
              </itemizedlist>
            </para>
          </formalpara>
          <formalpara>
            <title>Modelling Guidance</title>
            <para>Atomic element of aircraft maneuver. The limitation that speed changes cannot
              occur during a turn is chosen to simplify the modelling required.</para>
          </formalpara>
          <formalpara>
            <title>Incorporation</title>
            <para><?xm-replace_text {para}?></para>
          </formalpara>
        </sect2>
        <sect2 id="mod_climb">
          <title>Climb</title>
          <formalpara>
            <title>Author</title>
            <para>Jon Walters</para>
          </formalpara>
          <formalpara>
            <title>Description</title>
            <para>Aircraft is to climb to a certain altitude </para>
          </formalpara>
          <formalpara>
            <title>Inputs</title>
            <para>INPUT - demanded altitude, rate-of-climb (ROC) and climb speed (CS)</para>
          </formalpara>
          <formalpara>
            <title>Algorithm</title>
            <para> Check that the aircraft is lower than the demanded altitude. If it is then change
              speed to the CS at the maximum AR or DR allowed then climb at a given ROC at that
              climb speed until demanded altitude is reached. Then change speed back to initial
              speed at maximum AR or DR. Default Merlin ROC is 15 feet/sec and climb speed is 35
              m/sec but both these parameters may vary - other aircraft will have different values.
              The constant speed part of this maneuver may be combined with either a Turn or Long
              Way Turn. <xref linkend="dive_climb_demo"/> demonstrates the use of default climb and
              dive speeds in height alterations. <figure float="0" id="dive_climb_demo">
                <title>Example of aircraft performing dive then climb at default speeds</title>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="figures/ClimbDiveDemo.gif"  width="100%" scalefit="1"/>
                  </imageobject>
                </mediaobject>
              </figure><orderedlist>
                <listitem>
                  <para>At point 1 the aircraft is travelling at a speed of 110m/sec at an altitude
                    of 140m.</para>
                </listitem>
                <listitem>
                  <para>At point 2 the aircraft starts to dive to a demanded height of 80m. The
                    aircraft has a default descend speed of 30m/sec so starts decelerating</para>
                </listitem>
                <listitem>
                  <para>At point 3 the aircraft has dropped to 30m/sec and deceleration stops</para>
                </listitem>
                <listitem>
                  <para>At point 4 the aircraft has reached the demanded altitude of 80m and starts
                    to accelerate back to its original speed</para>
                </listitem>
                <listitem>
                  <para>At point 5 the aircraft starts to climb to a demanded height of 120m, so
                    starts to decelerate to the default climb speed of 20m/sec</para>
                </listitem>
                <listitem>
                  <para>At point 6 the aircraft has dropped to 20m/sec and continues to climb at
                    this speed</para>
                </listitem>
                <listitem>
                  <para>At point 7 the aircraft has finished the climb to 120m, and starts to
                    accelerate back to it&apos;s original speed</para>
                </listitem>
                <listitem>
                  <para>At point 8 the aircraft has resumed its original speed of 110m/sec</para>
                </listitem>
              </orderedlist></para>
          </formalpara>
          <formalpara>
            <title>Source</title>
            <para>Merlin flying guide</para>
          </formalpara>
          <formalpara>
            <title>Test Case</title>
            <para>From an altitude of 200 feet climb straight ahead for 1 minute - end height is
              1100 feet and distance traveled is 2100 m. </para>
          </formalpara>
          <formalpara>
            <title>Modelling Guidance</title>
            <para>Atomic element of aircraft maneuver.</para>
          </formalpara>
          <formalpara>
            <title>Incorporation</title>
            <para><?xm-replace_text {para}?></para>
          </formalpara>
          <para/>
        </sect2>
        <sect2 id="mod_dive">
          <title>Dive</title>
          <formalpara>
            <title>Author</title>
            <para>Jon Walters</para>
          </formalpara>
          <formalpara>
            <title>Description</title>
            <para>Aircraft is to descend to a certain altitude </para>
          </formalpara>
          <formalpara>
            <title>Inputs</title>
            <para>INPUT - demanded altitude, rate-of-descent (ROD) and dive speed (DS)</para>
          </formalpara>
          <formalpara>
            <title>Algorithm</title>
            <para>Check that the aircraft is higher than the demanded altitude. If it is then change
              speed to the DS at the maximum AR or DR allowed then dive at a given ROD at that dive
              speed until demanded altitude is reached. Then change speed back to initial speed at
              maximum AR or DR. Default Merlin ROD is -15 feet/sec and dive speed is 60 m/sec but
              both these parameters may vary - other aircraft will have different values. The
              constant speed part of this may be combined with either a Turn or a Long Way Turn.
            </para>
          </formalpara>
          <formalpara>
            <title>Source</title>
            <para>Merlin flying guide</para>
          </formalpara>
          <formalpara>
            <title>Test Case</title>
            <para>From an altitude of 3000 feet dive straight ahead for 2 minute - end height is
              1800 feet and distance traveled is 7200 m.</para>
          </formalpara>
          <formalpara>
            <title>Modelling Guidance</title>
            <para>Atomic element of aircraft maneuver.</para>
          </formalpara>
          <formalpara>
            <title>Incorporation</title>
            <para><?xm-replace_text {para}?></para>
          </formalpara>
          <para/>
        </sect2>
        <sect2 id="mod_change_height">
          <title>Change Height</title>
          <formalpara>
            <title>Author</title>
            <para>Jon Walters</para>
          </formalpara>
          <formalpara>
            <title>Description</title>
            <para/>
          </formalpara>
          <formalpara>
            <title>Inputs</title>
            <para/>
          </formalpara>
          <formalpara>
            <title>Algorithm</title>
            <para> </para>
          </formalpara>
          <formalpara>
            <title>Source</title>
            <para><?xm-replace_text {para}?></para>
          </formalpara>
          <formalpara>
            <title>Test Case</title>
            <para><?xm-replace_text {para}?></para>
          </formalpara>
          <formalpara>
            <title>Modelling Guidance</title>
            <para><?xm-replace_text {para}?></para>
          </formalpara>
          <formalpara>
            <title>Incorporation</title>
            <para><?xm-replace_text {para}?></para>
          </formalpara>
          <para/>
        </sect2>
        <sect2>
          <title>OnTop Waypoint</title>
          <formalpara>
            <title>Author</title>
            <para>Jon Walters</para>
          </formalpara>
          <formalpara>
            <title>Description</title>
            <para>An aircraft is required to reach a point in 3D space in the quickest way while
              maintaining a current speed.</para>
          </formalpara>
          <formalpara>
            <title>Inputs</title>
            <para>INPUT - waypoint x,y,z</para>
          </formalpara>
          <formalpara>
            <title>Algorithm</title>
            <para>Calculate an intercept course and either <link linkend="mod_turn">Turn</link> or
                <link linkend="mod_long_way_turn">Long Way Turn</link> onto it (the quickest way) -
              then fly a straight leg ending when the WP is reached - then continue on current
              course. On this leg execute <link linkend="mod_change_height">Change Height</link> to
              waypoint height. If there is no solution for an intercept course (WP is within radius
              of turn) then fly ahead until solution possible, then make the <link
                linkend="mod_turn">Turn</link> or <link linkend="mod_long_way_turn">Long Way
                Turn</link>. If there is insufficient time during the straight leg to make the
              altitude change required at the maximum ROC or ROD then delay the initial turn until
              there will be a long enough straight leg. </para>
          </formalpara>
          <formalpara>
            <title>Source</title>
            <para>Merlin Flying Guide</para>
          </formalpara>
          <formalpara>
            <title>Test Case</title>
            <para>
              <itemizedlist>
                <listitem>
                  <para>Start at (0,0,200) heading 000 speed 60 m/s and make waypoint at (10000,
                    10000, 1000) in a time of xxxx (calculate). </para>
                </listitem>
                <listitem>
                  <para>Start at (0,0,1000) heading 090 speed 70 m/s and attempt to make waypoint
                    (-500,0,100). Ensure that a intial straight leg occurs before the first
                    turn.</para>
                </listitem>
              </itemizedlist>
            </para>
          </formalpara>
          <formalpara>
            <title>Modelling Guidance</title>
            <para>Element of aircraft maneuver. Normally the user does not directly encounter this
              behaviour, it is invisibly used within higher level behaviours such as <link
                linkend="mod_fly_route">Fly Route</link>, <link linkend="mod_exp_square_search">Fly
                Expanding Square Search</link>
            </para>
          </formalpara>
          <formalpara>
            <title>Incorporation</title>
            <para>Sep 03</para>
          </formalpara>
          <para/>
        </sect2>
        <sect2 id="mod_fly_route">
          <title>Fly Route</title>
          <formalpara>
            <title>Author</title>
            <para>Jon Walters</para>
          </formalpara>
          <formalpara>
            <title>Description</title>
            <para>An aircraft is required to fly an arbitrary route defined by a series of
              waypoints. The Fly Route behaviour is a wrapper around the Transit Waypoint behaviour
              ( <link linkend="mod_transit_waypoint"><?xm-replace_text {link}?></link>) </para>
          </formalpara>
          <formalpara>
            <title>Inputs</title>
            <para>INPUT - a series of legs as defined below.</para>
          </formalpara>
          <formalpara>
            <title>Algorithm</title>
            <para>A leg is defined by a start and end WP (x,y,z position) - it has a track (the
              bearing from start to finish) and a behaviour of the aircraft when it reaches the end
              on the leg, either fly directly on top the waypoint (&apos;on-top&apos;) or turn prior
              to the waypoint to make good the next track (&apos;make&apos;). Carry out a Directed
              On-Top WP to the initial WP with an outbound heading of the initial leg track. Carry
              out either a Make WP or an On-Top WP (followed by a Regain Track to the track of the
              next leg) depending on the behaviour specified. </para>
          </formalpara>
          <formalpara>
            <title>Source</title>
            <para>Merlin Flying Guide</para>
          </formalpara>
          <formalpara>
            <title>Test Case</title>
            <para>
              <itemizedlist>
                <listitem>
                  <para>Establish route (0,0,1000) - (10000,10000,1000) - (10000,0,1000) -
                    (0,0,1000) and fly the route once with all behaviours set to &apos;on-top&apos;
                    and once with them set to &apos;make&apos;. Check behaves correctly.</para>
                </listitem>
                <listitem>
                  <para>Establish route (0,0,1000) - (1000,1000,1000) - (1000,0,1000) - (0,0,1000)
                    and fly the route once with all behaviours set to &apos;make&apos;, a/c speed to
                    70 m/s and rate of turn to 1 deg/sec. Check aircraft uses On-Top WP and flies
                    route correctly.</para>
                </listitem>
              </itemizedlist>
            </para>
          </formalpara>
          <formalpara>
            <title>Modelling Guidance</title>
            <para>Element of aircraft maneuver. </para>
          </formalpara>
          <formalpara>
            <title>Incorporation</title>
            <para/>
          </formalpara>
        </sect2>
      </sect1>
      <sect1 id="condition_behaviour">
        <title>Composite Conditions</title>
        <sect2 id="behaviour_detection">
          <title>Detection</title>
          <sect3>
            <title>Description</title>
            <para>Condition triggered by a particular detection</para>
          </sect3>
          <sect3>
            <title>Behaviour parameters</title>
            <itemizedlist>
              <listitem>
                <para>Category of target to detect</para>
              </listitem>
              <listitem>
                <para>Strength threshold (optional)</para>
              </listitem>
              <listitem>
                <para>Min range to target (optional)</para>
              </listitem>
              <listitem>
                <para>Max range to target (optional)</para>
              </listitem>
              <listitem>
                <para>Relative bearing sector (min/max) to target (optional)</para>
              </listitem>
            </itemizedlist>
          </sect3>
          <sect3>
            <title>Algorithm</title>
            <orderedlist>
              <listitem>
                <para>Run through current series of detections, check each against category of
                  target. (Also check detection strength, range and relative bearing if
                  applicable)</para>
              </listitem>
              <listitem>
                <para>Was validation found? <orderedlist>
                    <listitem>
                      <para>If yes, return that detection as result</para>
                    </listitem>
                    <listitem>
                      <para>If no, return null</para>
                    </listitem>
                  </orderedlist></para>
              </listitem>
            </orderedlist>
          </sect3>
          <sect3>
            <title>Source</title>
            <para>Original invention</para>
          </sect3>
          <sect3>
            <title>Test case</title>
            <para>Create scenario where target entering then leaving detection range. Check null
              results, then valid results, then null results again</para>
          </sect3>
          <sect3>
            <title>Modelling guidance</title>
            <para>The behaviour of many vessels if depending upon the presence of others (both
              friendly &amp; hostile). This condition is used to determine if ownship is in contact
              with others. As a condition, a detection is always combined with a response into a
              composite behaviour. Typical responses for this behaviour include transit to target
              location and conducting an evasive behaviour. </para>
            <para>Use of the optional parameters allows us to produce a variety of behaviours
              depending upon whether the target is within or outside weapons range, or in/out of our
              weapon launch sector.</para>
          </sect3>
          <sect3>
            <title>See also</title>
            <para>The general <link linkend="behaviour_condition">Condition</link> behaviour.
            </para>
          </sect3>
          <sect3>
            <title>Incorporation</title>
            <para>Not yet.</para>
          </sect3>
        </sect2>
        <sect2 id="behaviour_location">
          <title>Location</title>
          <sect3>
            <title>Description</title>
            <para>Condition triggered by proximity to particular location</para>
          </sect3>
          <sect3>
            <title>Behaviour parameters</title>
            <itemizedlist>
              <listitem>
                <para>Target location</para>
              </listitem>
              <listitem>
                <para>Minimum valid range (default is zero)</para>
              </listitem>
              <listitem>
                <para>Maximum valid range </para>
              </listitem>
            </itemizedlist>
          </sect3>
          <sect3>
            <title>Algorithm</title>
            <orderedlist>
              <listitem>
                <para>Examine the current vessel status, measure range to target location</para>
              </listitem>
              <listitem>
                <para>Are we within min &amp; max thresholds of range <orderedlist>
                    <listitem>
                      <para>If yes, return range object</para>
                    </listitem>
                    <listitem>
                      <para>If no, return null</para>
                    </listitem>
                  </orderedlist></para>
              </listitem>
            </orderedlist>
          </sect3>
          <sect3>
            <title>Source</title>
            <para>Original invention</para>
          </sect3>
          <sect3>
            <title>Test Case</title>
            <orderedlist>
              <listitem>
                <para>Create scenario where target approaching then passing target location, with
                  location condition with zero min range. Check null, valid, then null is
                  returned</para>
              </listitem>
            </orderedlist>
            <orderedlist>
              <listitem>
                <para>Create scenario where target approaching then passing target location, with
                  location condition wtih positive min range. Check null, valid, null (for too
                  close), then valid, then finally null is returned</para>
              </listitem>
            </orderedlist>
          </sect3>
          <sect3>
            <title>Modelling guidance</title>
            <para>This condition allows behaviour to be controlled dependent upon where the vessel
              is in relation to a particular point: allowing a response to be triggered both when we
              are very near or very far from a particular point.</para>
            <para>Uses of the Location condition could include turning back to an origin after
              travelling a specific range from it, or always avoiding a particular location (wreck,
              Wolf Rock).</para>
          </sect3>
          <sect3>
            <title>See also</title>
            <para>The general <link linkend="behaviour_condition">Condition</link> behaviour.
            </para>
          </sect3>
          <sect3>
            <title>Incorporation</title>
            <para>Not yet.</para>
          </sect3>
        </sect2>
        <sect2 id="behaviour_timed">
          <title>Timed</title>
          <sect3>
            <title>Description</title>
            <para>Condition triggered by passing a specific time</para>
          </sect3>
          <sect3>
            <title>Behaviour parameters</title>
            <itemizedlist>
              <listitem>
                <para>Target time</para>
              </listitem>
              <listitem>
                <para>Whether to continue to fire (remain valid) after target time</para>
              </listitem>
            </itemizedlist>
          </sect3>
          <sect3>
            <title>Algorithm</title>
            <orderedlist>
              <listitem>
                <para>Examine the current model time. Is it after the target time? <orderedlist>
                    <listitem>
                      <para>If yes, have we already fired? <orderedlist>
                          <listitem>
                            <para>If no, return the current model time</para>
                          </listitem>
                          <listitem>
                            <para>If yes, Should we continue to fire? <orderedlist>
                                <listitem>
                                  <para>If yes, return the current model time</para>
                                </listitem>
                                <listitem>
                                  <para>If no, return null</para>
                                </listitem>
                              </orderedlist></para>
                          </listitem>
                        </orderedlist></para>
                    </listitem>
                  </orderedlist><orderedlist>
                    <listitem>
                      <para>If not after target time,return null</para>
                    </listitem>
                  </orderedlist></para>
              </listitem>
            </orderedlist>
          </sect3>
          <sect3>
            <title>Source</title>
            <para>Original invention</para>
          </sect3>
          <sect3>
            <title>Test Case</title>
            <orderedlist>
              <listitem>
                <para>Create simple scenario where vessel travels around. Timed (no continuing)
                  condition should be set forward of scenario start time. Check timed condition
                  fires once after target time.</para>
              </listitem>
              <listitem>
                <para>Create simple scenario where vessel travels around. Timed (continuing)
                  condition should be set forward of scenario start time. Check timed condition
                  fires (&amp; continues to fire) after target time.</para>
              </listitem>
            </orderedlist>
          </sect3>
          <sect3>
            <title>Modelling Guidance</title>
            <para>This condition allows vessels to conduct specific behaviours at set times: a timed
              rendezvous or signal transmission/receipt for example.</para>
          </sect3>
          <sect3>
            <title>Incorporation</title>
            <para>Not yet.</para>
          </sect3>
        </sect2>
      </sect1>
      <sect1 id="response_behaviour">
        <title>Composite Responses</title>
        <para><?xm-replace_text {para}?></para>
      </sect1>
      <sect1 id="tactical_behaviours">
        <title>Tactical Behaviours</title>
        <para/>
        <sect2 id="behaviour_investigate">
          <title>Investigate</title>
          <sect3>
            <title>Description</title>
            <para>Behaviour representing a participant performing investigations of a series of
              targets. The behaviour keeps track of targets whose investigation is complete, with
              completed investigations being defined as reaching a defined <link
                linkend="lookup_basics">detection state</link>. </para>
          </sect3>
          <sect3>
            <title>Behaviour parameters</title>
            <itemizedlist>
              <listitem>
                <para>Category of target to detect</para>
              </listitem>
              <listitem>
                <para>Level of detection required to complete investigation (one of the <link
                    linkend="lookup_basics">detection states</link>) </para>
              </listitem>
            </itemizedlist>
          </sect3>
          <sect3>
            <title>Algorithm</title>
            <orderedlist>
              <listitem>
                <para>If we have a current target then:</para>
                <orderedlist>
                  <listitem>
                    <para>Run through current detections, see if we are still holding it</para>
                  </listitem>
                  <listitem>
                    <para>If we are holding it, see if we have reached the required detection
                      level</para>
                  </listitem>
                  <listitem>
                    <para>If we have reached the required level, add this target to our
                      "investigated list", and clear current target placeholder</para>
                  </listitem>
                </orderedlist>
              </listitem>
              <listitem>
                <para>If we do not have a current target (because we never held one, or because
                  we&apos;ve just identified one) then run through the current detections, find a
                  valid target which has not already been investigated by us. If we find one, store
                  it as the current target</para>
              </listitem>
              <listitem>
                <para>If we now hold a current target, set course towards it</para>
              </listitem>
            </orderedlist>
          </sect3>
          <sect3>
            <title>Source</title>
            <para>Original invention</para>
          </sect3>
          <sect3>
            <title>Test case</title>
            <para>Create searcher in field of valid &amp; invalid targets. Check that valid targets
              are investigated once only, &amp; invalid targets are not investigated.</para>
          </sect3>
          <sect3>
            <title>Modelling guidance</title>
            <para/>
          </sect3>
          <sect3>
            <title>See also</title>
            <para/>
          </sect3>
          <sect3>
            <title>Incorporation</title>
            <para>April 04</para>
          </sect3>
        </sect2>
        <sect2 id="escort_behaviour">
          <title>Escort</title>
          <sect3>
            <title>Description</title>
            <para>A vessel (escort) maintains a set range and bearing from another (target).</para>
          </sect3>
          <sect3>
            <title>Behaviour parameters</title>
            <itemizedlist>
              <listitem>
                <para>Target category (who to escort)</para>
              </listitem>
              <listitem>
                <para>Allowable error - the allowable error in the range to target. This acts as a
                  buffer preventing continuous (potentially erratic) course and speed
                  changes.</para>
              </listitem>
              <listitem>
                <para>Bearing - optional value representing bearing from target to escort
                  station.</para>
              </listitem>
              <listitem>
                <para>Range - optional value representing the range at which the target should be
                  escorted</para>
              </listitem>
            </itemizedlist>
          </sect3>
          <sect3>
            <title>Algorithm</title>
            <orderedlist>
              <listitem>
                <para>Are we still in contact with the target? <orderedlist>
                    <listitem>
                      <para>If not, see if we are in contact with another compatible target <orderedlist>
                          <listitem>
                            <para>If no compatible target return null</para>
                          </listitem>
                          <listitem>
                            <para>If compatible target found, make that current</para>
                          </listitem>
                        </orderedlist></para>
                    </listitem>
                  </orderedlist></para>
              </listitem>
              <listitem>
                <para>Are we set to station at a set range? <orderedlist>
                    <listitem>
                      <para>If so, check we have range to target, if not, drop out</para>
                    </listitem>
                    <listitem>
                      <para>If we have range to target, calc range to target and check if we are
                        still within the allowable error for range <orderedlist>
                          <listitem>
                            <para>If we are out of range, change our speed by 5% up or down as
                              necessary</para>
                          </listitem>
                        </orderedlist></para>
                    </listitem>
                  </orderedlist></para>
              </listitem>
              <listitem>
                <para>Are we set to station at a set bearing? (as provided with the <link
                    linkend="bearing_trail_behaviour">Bearing Trail</link> behaviour) <orderedlist>
                    <listitem>
                      <para>If yes, calc bearing to desired location (relative to tgt) and set
                        demanded bearing accordingly</para>
                    </listitem>
                    <listitem>
                      <para>If no, just set our course to that of target</para>
                    </listitem>
                  </orderedlist></para>
              </listitem>
            </orderedlist>
          </sect3>
          <sect3>
            <title>Source</title>
            <para>Original invention</para>
          </sect3>
          <sect3>
            <title>Test Case</title>
            <orderedlist>
              <listitem>
                <para>Supply vessel (HVU) at (0,0) with 3 way-points (0,1), (1,1), (1,0). Request
                  vessel transits through them at 12 kts, quitting on completion. Vessel should
                  travel though way-points in ascending order. Frigate assigned to escort Supply
                  vessel. Frigate located ahead of HVU in contact range, instructed to escort at 1km
                  on bearing of 145 degs. Frigate should reposition itself on station and adopt
                  speed of HVU. After HVU performs turn, Frigate should reposition itself.</para>
              </listitem>
              <listitem>
                <para>Supply vessel as before, submarine assigned to escort for&apos;d of HVU,
                  starting astern. Submarine starts in contact with HVU then loses contact whilst
                  moving ahead - comes to halt.</para>
              </listitem>
            </orderedlist>
          </sect3>
          <sect3>
            <title>Modelling Guidance</title>
            <para>Being able to perform this behaviour relies on the escort being able to maintain
              contact on the target vessel with a sensor capable of producing range data.</para>
          </sect3>
        </sect2>
        <sect2 id="trail_behaviour">
          <title>Trail</title>
          <para>The Trail behaviour is functionally identical to the <link
              linkend="escort_behaviour">Escort</link> behaviour within
              <application>ASSET.</application>. When designing a target involving a Trail
            behaviour, an opposing vessel is specified using the TargetType instead of a friendly
            vessel. </para>
        </sect2>
        <sect2 id="bearing_trail_behaviour">
          <title>Bearing Trail</title>
          <para>The bearing trail behaviour is an extension of the <link linkend="trail_behaviour"
              >Trail</link> behaviour, utilising the demanded relative bearing attribute as
            described in the <link linkend="escort_behaviour">Escort</link> behaviour algorithm.
          </para>
        </sect2>
        <sect2 id="intercept_behaviour">
          <title>Intercept</title>
          <sect3>
            <title>Description</title>
            <para>The Intercept behaviour uses the known course and speed of the target to enable
              ownship to switch to an intercept course to the target.</para>
          </sect3>
          <sect3>
            <title>Behaviour parameters</title>
            <itemizedlist>
              <listitem>
                <para>Category of target to detect</para>
              </listitem>
              <listitem>
                <para>Whether ownship speed change is allowed</para>
              </listitem>
            </itemizedlist>
          </sect3>
          <sect3>
            <title>Algorithm</title>
            <orderedlist>
              <listitem>
                <para>If we are in contact with existing target, or participant of target type
                  then</para>
                <orderedlist>
                  <listitem>
                    <para>If intercept is possible, set demanded course to intercept course </para>
                  </listitem>
                  <listitem>
                    <para>If intercept is not possible, re-perform calculation using maximum ownship
                      speed <orderedlist>
                        <listitem>
                          <para>If intercept still not possible, return null demanded status</para>
                        </listitem>
                        <listitem>
                          <para>If intercept is possible at max speed, set demanded course to
                            intercept course, and demanded speed to maximum ownship speed according
                            to ownship <link linkend="move_chars">movement characteristics</link>.
                          </para>
                        </listitem>
                      </orderedlist></para>
                  </listitem>
                </orderedlist>
              </listitem>
            </orderedlist>
            <note>
              <para>
                <figure float="0">
                  <title>Algorithm of intercept course calculation</title>
                  <mediaobject>
                    <imageobject>
                      <imagedata fileref="figures/InterceptCourseFormulaDerivation.gif"/>
                    </imageobject>
                  </mediaobject>
                </figure>
              </para>
            </note>
          </sect3>
          <sect3>
            <title>Source</title>
            <para>Merlin modelling guide, Spreadsheet titled "Missile_Approach_02.xls" from Tom
              Ferrier.</para>
          </sect3>
          <sect3>
            <title>Test case</title>
            <para/>
          </sect3>
          <sect3>
            <title>Modelling guidance</title>
            <para>This behaviour was originally produced in support of the force protection scenario
              modelling, used for the Merlin to intercept unidentified fishing vessels.</para>
          </sect3>
          <sect3>
            <title>See also</title>
            <para/>
          </sect3>
          <sect3>
            <title>Incorporation</title>
            <para>September 04</para>
          </sect3>
        </sect2>
        <sect2 id="prosecute_behaviour">
          <title>Prosecute</title>
          <para/>
        </sect2>
        <sect2>
          <title>Launch Weapon</title>
          <para/>
        </sect2>
        <sect2>
          <title>Lay Buoyfield</title>
          <para/>
          <para>This behaviour is used to represent an aircraft (fixed or rotary) laying a
            buoy-pattern. The behaviour is configured according to the style of field being laid.
            For example, a barrier uses direction and separation properties.</para>
          <para>
            <application>ASSET</application> provides functionality to model the laying of Sonar
            Buoyfields, that is a pattern of sonar buoys which are laid out in a particular pattern. </para>
          <para>Although it may not be clearly visible in the following diagrams, all of the
            buoyfields are located with reference to a kingpin. This kingpin is located relative to
            a Jig Point (allowing for small, quick adjustments in the location of the field prior to
            dropping), as specified by a range and bearing. </para>
          <para>
            <application>ASSET</application> supports the following patterns of buoyfield: </para>
          <sect3>
            <title>Examples of Buoyfields</title>
            <sect4>
              <title>Barrier</title>
              <para>A Barrier is a straight line of buoys <figure float="0">
                  <title>Example of a barrier buoy-pattern</title>
                  <mediaobject>
                    <imageobject>
                      <imagedata fileref="figures/field_barrier.gif" width="100%"/>
                    </imageobject>
                  </mediaobject>
                </figure></para>
            </sect4>
            <sect4>
              <title>Wedge</title>
              <para>A Wedge is a bent-line barrier of buoys, specified by buoy spacing and two true
                bearings. The first bearing is from the kingpin to the centre of the wedge and the
                second bearing is from the centre point to the last buoy. In
                  <application>ASSET</application>, theta-one is termed the Right Hand Orientation
                (Orientation1) and theta-two is termed the Left Hand Orientation (Orientation2).
                  <application>ASSET</application> allows even or odd numbers of buoys, and will
                ensure that the sides of the wedge remain symmetric. <figure float="0">
                  <title>Example of a Wedge buoy-pattern</title>
                  <mediaobject>
                    <imageobject>
                      <imagedata fileref="figures/field_wedge.gif" width="455"/>
                    </imageobject>
                  </mediaobject>
                </figure></para>
            </sect4>
            <sect4>
              <title>Field</title>
              <para>A Field is a fixed pattern which contains more than two rows of buoys. The
                pattern is specified by buoy and row spacing, a true bearing, and an indication of
                whether the successive rows fall to the left, right, or centre of the kingpin. Note
                that whilst the diagram shows and the Naval specification order includes the Field
                Direction parameter, this is not required for buoyfield construction and is not
                taken from the user. Although the Field Direction is contained in the buoyfield
                creation order, it is included as an indication of expected target direction of
                travel, and has no graphic meaning. <figure float="0">
                  <title>Example of a Field buoy-pattern</title>
                  <mediaobject>
                    <imageobject>
                      <imagedata fileref="figures/field_field.gif" width="455"/>
                    </imageobject>
                  </mediaobject>
                </figure></para>
              <para>The Left, Right, or Centre offset value is interpreted in the following way:
                  <simplelist type="vert">
                  <member>
                    <emphasis>Left</emphasis>: is interpreted as the "alternate" rows starting
                    offset a 1/2 buoy width further in the field orientation </member>
                  <member>
                    <emphasis>Right</emphasis>: is interpreted as the "alternate" rows being offset
                    a 1/2 buoy width backwards along the field orientation </member>
                  <member>
                    <emphasis>Centre</emphasis>: in interpreted as there being no offset in
                    successive rows. </member>
                </simplelist></para>
            </sect4>
            <sect4>
              <title>Circle</title>
              <para>The Circle pattern describes a pattern of buoys arranged in a circle, specified
                by kingpin, radius, and number of buoys. An orientation parameter is also used,
                which indicates the bearing of the first buoy from the kingpin (centre), since it
                may not necessarily be to the North. A flag indicates if the circle is being laid
                clockwise or not. <figure float="0">
                  <title>Example of a Circle buoy-pattern</title>
                  <mediaobject>
                    <imageobject>
                      <imagedata fileref="figures/field_circle.gif" width="191"/>
                    </imageobject>
                  </mediaobject>
                </figure></para>
            </sect4>
            <sect4>
              <title>Arc</title>
              <para>The Arc pattern describes a pattern of buoys arranged in a segment of a circle.
                In addition to the kingpin and radius, an orientation parameter indicates the
                direction of the mid-point of the arc from the kingpin, and an arc value indicates
                the arc of coverage each side of the orientation. A flag indicates if the circle is
                being laid clockwise or not. <figure float="0">
                  <title>Example of an Arc buoy-pattern</title>
                  <mediaobject>
                    <imageobject>
                      <imagedata fileref="figures/field_arc.gif" width="159"/>
                    </imageobject>
                  </mediaobject>
                </figure></para>
            </sect4>
          </sect3>
        </sect2>
      </sect1>
      <sect1 id="mod_search_behaviours">
        <title>Search Behaviours</title>
        <para>Investigating search tactics is seen as a prime use of the
            <application>ASSET</application> environment. As such a number of high level search
          behaviours are included as standard. </para>
        <sect2 id="mod_exp_square_search">
          <title>Expanding Square Search</title>
          <formalpara>
            <title>Author</title>
            <para>Jon Walters</para>
          </formalpara>
          <formalpara>
            <title>Description</title>
            <para>An aircraft is required to carry out an expanding square search as defined in the
              Merlin Tacman</para>
          </formalpara>
          <formalpara>
            <title>Inputs</title>
            <para>INPUT - a datum point, initial track, track spacing, chirality of spiral (left or
              right) and an optional maximum number of legs (defaults to 1000) </para>
          </formalpara>
          <formalpara>
            <title>Algorithm</title>
            <para> Construct a route made of a series of waypoints defining a number of legs. WP1 is
              datum point, WP2 is distance track spacing in direction initial track, WP3 is distance
              track spacing in direction initial track + (if chirality = right) or - (if chirality =
              left). The next WP is calculated in the same fashion but is length 2 x track spacing.
              The leg lengths as multiples of the track spacing are (1,1,2,2,3,3,4,4,5,5 and so on).
              . Each time an even WP is generated increment a number of legs variable. If number of
              legs is equal to maximum number of legs stop generating route. Then <link
                linkend="mod_fly_route">Fly Route</link> based on these WPs with all legs set to
              &apos;on-top&apos;. <figure float="0">
                <title>Expanding square search</title>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="figures/exp_square_search.gif"  width="100%" scalefit="1"/>
                  </imageobject>
                </mediaobject>
              </figure></para>
          </formalpara>
          <formalpara>
            <title>Source</title>
            <para>Merlin Tacman</para>
          </formalpara>
          <formalpara>
            <title>Test Case</title>
            <para>
              <itemizedlist>
                <listitem>
                  <para>Establish start point (0,0,1000), track spacing 5000, chirality right. Set
                    a/c speed to 60 m/s and ROT to 3 deg/sec. <link linkend="mod_exp_square_search"
                      >Fly Expanding Square Search</link> and check that behaves correctly. Repeat
                    with chirality set to left. </para>
                </listitem>
                <listitem>
                  <para>Establish start point (0,0,1000), track spacing 1000, chirality right. Set
                    a/c speed to 70 m/s and ROT to 2 deg/sec. Fly Expanding Square Search and check
                    that behaves correctly, ie the WP&apos;s are not captured as part of the <link
                      linkend="mod_fly_route">Fly Route</link> behaviour. </para>
                </listitem>
              </itemizedlist>
            </para>
          </formalpara>
          <formalpara>
            <title>Modelling Guidance</title>
            <para>Element of aircraft maneuver. <note>
                <para>Where a vehicle has a large turning circle, some of the early points within
                  the search may be unattainable. Broadly speaking, it&apos;s not until the
                  waypoints are approaching a turning-circle diameter apart that the vessel can
                  reliably achieve them. There are a choice of ways in which to model this: <orderedlist>
                    <listitem>
                      <para>When the sequence of points is first created, only insert points which
                        are attainable</para>
                    </listitem>
                    <listitem>
                      <para>When the vehicle is travelling through the search path determine if the
                        current point is attainable - if not jump to the next one.</para>
                    </listitem>
                  </orderedlist>Although the second method is more accurate (since the first must
                  make approximations regarding the actual speed/state of the vehicle as it reaches
                  each waypoint), it is more computationally expensive and involves a more complex
                  algorithm - so the model is implemented using the first method; if a successive
                  point is more than 2/3 of a turning circle diameter from the previous point (using
                  the vehicle&apos;s speed when entering the search), then that point is not added
                  to the search plan. The following diagrams illustrate this. <xref
                    linkend="exp_diag_1"/> shows a search path where all search points are
                  attainable at the initial speed, whilst <xref linkend="exp_diag_2"/> shows a
                  search plan where some of the inner points have been omitted since they are closer
                  together than 60% of the vehicle&apos;s turning diameter when the vehicle starts
                  the search. <figure float="0" id="exp_diag_1">
                    <title>Expanding square search with all points attainable</title>
                    <mediaobject>
                      <imageobject>
                        <imagedata fileref="figures/exp_search_1.gif" width="100%" scalefit="1"/>
                      </imageobject>
                    </mediaobject>
                  </figure><figure float="0" id="exp_diag_2">
                    <title>Expanding square search with inner points omitted (unattainable)</title>
                    <mediaobject>
                      <imageobject>
                        <imagedata fileref="figures/exp_search_2.gif" width="100%" scalefit="1"/>
                      </imageobject>
                    </mediaobject>
                  </figure></para>
              </note></para>
          </formalpara>
          <formalpara>
            <title>Incorporation</title>
            <para><?xm-replace_text {para}?></para>
          </formalpara>
          <para/>
        </sect2>
        <sect2 id="mod_ladder_search">
          <title>Ladder Search</title>
          <formalpara>
            <title>Author</title>
            <para>Jon Walters</para>
          </formalpara>
          <formalpara>
            <title>Description</title>
            <para>An aircraft is required to carry out a ladder search as defined in the Merlin
              Tacman</para>
          </formalpara>
          <formalpara>
            <title>Inputs</title>
            <para>INPUT - a start point, ladder axis, track spacing, leg length and an optional
              maximum of legs (default 1000) </para>
          </formalpara>
          <formalpara>
            <title>Algorithm</title>
            <para> Construct a route made of a series of waypoints defining a number of legs. WP1 is
              start point, WP2 is distance leg length in direction ladder axis - 90°, WP3 is
              distance track spacing in direction ladder axis from WP2. WP4 is distance leg length
              in direction ladder axis + 90°. Successive pairs of WP are then calculated in the same
              fashion, reversing the sign of the 90° modification every time it is made. Each time
              an even WP is generated increment a number of legs variable. If number of legs is
              equal to maximum number of legs stop generating route. Then Fly Route based on these
              WPs with all legs set to "on-top".</para>
          </formalpara>
          <formalpara>
            <title>Source</title>
            <para>Merlin Tacman</para>
          </formalpara>
          <formalpara>
            <title>Test Case</title>
            <para>
              <itemizedlist>
                <listitem>
                  <para>Establish start point (0,0,1000), track spacing 5000, leg length 20000,
                    ladder axis 045°. Set a/c speed to 60 m/s and ROT to 3 deg/sec. Fly Ladder and
                    check that behaves correctly.</para>
                </listitem>
              </itemizedlist>
            </para>
          </formalpara>
          <formalpara>
            <title>Modelling Guidance</title>
            <para>Tactical search pattern. This is a geographically fixed search through an area
              with the start point conventionally fixed at one corner of the area to be searched
              (the &quot;bottom right&quot; for a northerly ladder axis).</para>
          </formalpara>
          <formalpara>
            <title>Incorporation</title>
            <para>June 2004</para>
          </formalpara>
          <para/>
        </sect2>
      </sect1>
      <sect1 id="mod_high_level_behaviours">
        <title>High level tactical behaviours</title>
        <para>Where a participant frequently conducts a pattern of behaviours in a set fashion,
          these can be represented through high-level behaviours. An example of such a behaviour is
          a <link linkend="mod_circ_datum_search">Circular Datum Search</link>
        </para>
        <sect2 id="mod_circ_datum_search">
          <title>Circular Datum Search</title>
          <para>This search is typically conducted by a helicopter and represents it&apos;s response
            to a submarine detection. The vehicle travels to the datum, lays a circular field of
            sonar buoys and if it regains contact on the submarine it launches a weapon.</para>
        </sect2>
      </sect1>
      <sect1>
        <title>Other behaviours</title>
        <sect2 id="SSK_Recharge">
          <title>SSK Recharge</title>
          <formalpara>
            <title>Author</title>
            <para>Ian Mayo</para>
          </formalpara>
          <formalpara>
            <title>Description</title>
            <para>SSKs must return to periscope depth in order to run diesel generators to recharge
              the batteries used for normal propultion. This process is normally known as snorting.
              Snorting represents one of the SSKs critically vulnerable states, it is both
              penetrating the surface and radiating much higher than normal noise levels. A
              consequence of this vulnerability is that the SSK recharge is a behaviour frequently
              modelled in ASW tactical development. The SSK snorting vulnerability can lead to
              complex behaviours. </para>
          </formalpara>
          <formalpara>
            <title>Inputs</title>
            <para>
              <variablelist>
                <varlistentry>
                  <term>Min Level</term>
                  <listitem>
                    <para>This is battery level at which the SSK will return to the surface to snort
                      (if it is not in contact with any target-types it should be evading)</para>
                  </listitem>
                </varlistentry>
                <varlistentry>
                  <term>Safe Level</term>
                  <listitem>
                    <para>When the batteries reach this level the SSK will finish snorting </para>
                  </listitem>
                </varlistentry>
                <varlistentry>
                  <term>Snort Speed</term>
                  <listitem>
                    <para>Whilst snorting the SSK will travel forward at this speed</para>
                  </listitem>
                </varlistentry>
                <varlistentry>
                  <term>Evade These</term>
                  <listitem>
                    <para>The SSK will cease snorting if it gains contact with any of these
                      categories of target.</para>
                  </listitem>
                </varlistentry>
              </variablelist>
            </para>
          </formalpara>
          <formalpara>
            <title>Algorithm</title>
            <para>
              <orderedlist>
                <listitem>
                  <para>Are we in contact with any targets we should evade? <orderedlist>
                      <listitem>
                        <para>If we are, we aren't going to snort. Don't execute this behaviour,
                          continue to the next.</para>
                      </listitem>
                      <listitem>
                        <para>If we're not in contact, check if we are already snorting <orderedlist>
                            <listitem>
                              <para>If we are aready snorting, check if we have reached our safe
                                snort level <orderedlist>
                                  <listitem>
                                    <para>If we have reached the safe snort level, don't execute
                                      this behavour any further, fall back to the next</para>
                                  </listitem>
                                  <listitem>
                                    <para>If we haven't reached the safe level, continue
                                      snorting</para>
                                  </listitem>
                                </orderedlist></para>
                            </listitem>
                            <listitem>
                              <para>If we aren't already snorting, check if we need to snort <orderedlist>
                                  <listitem>
                                    <para>If we don't need to snort, drop out.</para>
                                  </listitem>
                                  <listitem>
                                    <para>If we do need to snort, head for PD</para>
                                  </listitem>
                                </orderedlist></para>
                            </listitem>
                          </orderedlist></para>
                      </listitem>
                    </orderedlist></para>
                </listitem>
              </orderedlist>
            </para>
          </formalpara>
          <formalpara>
            <title>Source</title>
            <para>Original invention</para>
          </formalpara>
          <formalpara>
            <title>Test Case</title>
            <para> Conduct test to verify the following: <itemizedlist>
                <listitem>
                  <para>We don't snort when in contact with hostile target</para>
                </listitem>
                <listitem>
                  <para>The correct transition to snort (travel to pd), and correct snort completion
                    (return to original depth)</para>
                </listitem>
                <listitem>
                  <para>The successful termination of snort when hostile target located</para>
                </listitem>
              </itemizedlist></para>
          </formalpara>
          <formalpara>
            <title>Modelling Guidance</title>
            <para>An SSK behaviour model may include "Emergency Snort" behaviour at very high
              priority - but only triggered when the battery level is reaching critically low
              levels, alternatively the SSK may have an standard snort behavour at a much lower
              level - taking the battery back up to full capacity.</para>
          </formalpara>
          <formalpara>
            <title>Incorporation</title>
            <para>Summer 03</para>
          </formalpara>
          <para/>
        </sect2>
      </sect1>
    </chapter>
    <chapter id="mod_scenario_control">
      <title>Scenario Control</title>
      <para>The modelling guidance recorded so far in this document has all been in support of
        defining the scenario. The <application>ASSET </application>modelling engine also uses
        control information to determine how the scenario scenario is run together with how new
        scenario permutations are defined. <link linkend="mod_observers">Scenario observers</link>
        define what information is recorded for subsequent analysis during a scenario run, together
        with under what conditions the scenario should be terminated. </para>
      <para>
        <link linkend="mod_scenario_generation">Scenario generation</link> is used within ASSET to
        combine a scenario template with a control file to produce one or more new scenarios - each
        based on the template. <link linkend="G_VARIANCE">Variance</link> structures within the
        control file dictate the ways in which the new permutations are produced. </para>
      <sect1 id="mod_observers">
        <title>Observers</title>
        <para>Observers within ASSET are small, simple software modules which observer an ASSET
          scenario. Optionally, some observers can trigger the scenario to finish (Referees, such
          the <link linkend="obs_time_observer">time observer</link>), and other observers can cause
          changes in the participant line-up witin the scenario. However the normal case is for
          observers to merely observe scenario events unfolding, either recording information to
          file at each step or recording summary statistical information on scenario completion. </para>
        <sect2 id="mod_referees">
          <title>Scenario Referees</title>
          <para>Scenario referees are observers which are capable of stopping a scenario - either
            after a particular event/interaction or after a specified time period. Each submits a
            message explaining the reason for stopping the scenario - messages which may in turn be
            collated by a <link linkend="obs_batch_collation">batch collator</link> in a <link
              linkend="obs_summary">summary observer</link>. </para>
          <sect3 id="obs_stop_detection">
            <title>Stop on detection observer</title>
            <para>This observer stops the scenario once a vessel matching the <link
                linkend="mod_category">Category</link> type is detected by any sensor on a vessel
              matching the watch <link linkend="mod_category">Category</link> type. Thus, this
              referee can be used to stop the scenario when a Red SSK is first detected by a Blue
              Airborne asset. </para>
          </sect3>
          <sect3 id="obs_proximity_observer">
            <title>Stop on proximity observer</title>
            <para>This observer stops the scenario if a vessel matching the <link
                linkend="mod_category">Category</link> type passes within the specified minimum
              range of any vessel matching the watch <link linkend="mod_category">Category</link>
              type. Thus, this referee can be used to stop the scenario when a Red SSK passes within
              weapons range of the Blue HVU. </para>
          </sect3>
          <sect3 id="obs_proximity_detection_observer">
            <title>Stop on proximity detection observer</title>
            <para>This composite observer stops the scenario once a vessel matching the <link
                linkend="mod_category">Category</link> type is detected by any sensor on a vessel
              matching the watch <link linkend="mod_category">Category</link> type whilst they are
              within the specified range. Thus, this referee can be used to stop the scenario when a
              Red detects a Blue Surface asset whilst within a specified weapons range. </para>
          </sect3>
          <sect3 id="obs_time_observer">
            <title>Time observer</title>
            <para>This observer stops the scenario after a specified period has elapsed. This is a
              convenient referee observer that can be used as a fall-back in case scenario events
              are such that other scenario referees are not triggered.</para>
          </sect3>
          <sect3>
            <title>Remove detected observer</title>
            <para>Each time a vessel of the target type is detected by a vessel of the watch type,
              this observer removes it from the scenario. This is of particular value in a Monte
              Carlo type scenario run where the use of multiple participants in one force provides
              an overall prediction of the behaviour of one participant. In a search problem,
              removing targets as they are detected focusses the attention of the analyst on the
              undetected targets (and provides processing efficiencies).</para>
          </sect3>
        </sect2>
        <sect2>
          <title>Recording observers</title>
          <para>This set of observers record status information at each scenario step, normally
            directly to file. They record varying types of information in a number of
            formats.</para>
          <sect3>
            <title>CSV Track Observer</title>
            <para>This special instance of the <link linkend="obs_detection_observer">Detection
                Observer</link> records the vessel statuses at each time step, writing the
              information to file in comma-separated variable format. The comma-separated variable
              format is directly accessible by Microsoft Excel, which will open the files when they
              are double clicked. The data recorded to file is x,y in metres, current and demanded
              course, speed, depth, and the current <glossterm linkend="G_ACTIVITY"
                >activity</glossterm>. </para>
          </sect3>
          <sect3 id="mod_DebriefReplayObserver">
            <title>Debrief Replay Observer</title>
            <para>This observer also records vessel status to file, but uses the
                <application>Replay</application> file format as supported by MWC&apos;s
                <application>Debrief</application> tool. This format tightly constrains the fields
              recorded, limiting them to location and course, speed, depth. If these fields are
              sufficient for your analysis then Debrief will normally prove to be the most effective
              tool for post-event analysis of <application>ASSET</application> runs. </para>
            <para>In addition to being able to specify the output filename for your Debrief data,
              you may indicate what information should be recorded: <variablelist>
                <varlistentry id="attribute_record_positions">
                  <term>Record Positions</term>
                  <listitem>
                    <para>Each time a participant moves, record its new position to Debrief. The
                      position data item contains the correct colour and symbol type for that
                      participant (when known)</para>
                  </listitem>
                </varlistentry>
                <varlistentry id="attribute_record_decisions">
                  <term>Record Decisions</term>
                  <listitem>
                    <para>Insert a <application>Debrief</application> narrative entry for each
                      decision made by each participant (where it differs to the last). </para>
                  </listitem>
                </varlistentry>
                <varlistentry id="attribute_record_detections">
                  <term>Record Detections</term>
                  <listitem>
                    <para>Produce a sensor data item for each detection recorded by each
                      participant.</para>
                  </listitem>
                </varlistentry>
              </variablelist></para>
          </sect3>
          <sect3>
            <title>Debrief Deployable Sensor Location Observer</title>
            <para>Yes, it&apos;s a mouthful. This observer is largely identical to the <link
                linkend="mod_DebriefReplayObserver">Debrief Replay Observer</link>, but records the
              current location of deployable sensors such as helicopter&apos;s dipping sonar or a
              submarine towed array. </para>
          </sect3>
          <sect3 id="obs_track_plot">
            <title>Track Plot Observer</title>
            <para>This observer records the position of all participants during a scenario run,
              produces a track plot, and then writes this to disk in <filename>png</filename>
              format. The <filename>png</filename> format may be inserted into Microsoft Word or
              drag/dropped into Microsoft Internet Explorer. By providing a filename for the track
              plot image each ASSET run will write it&apos;s output to that same file. If that file
              is already visible in Internet Explorer simply pressing
                <guimenuitem>Refresh</guimenuitem> ( <keysym>F5</keysym>), will show the updated
              results plot. </para>
            <figure float="0">
              <title>Output of track plot observer</title>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="figures/TrackPlotOutput.gif"/>
                </imageobject>
              </mediaobject>
            </figure>
          </sect3>
        </sect2>
        <sect2 id="obs_summary">
          <title>Summary observers</title>
          <para>The summary observers monitor events throughout a scenario run, and produce a
            summary statistic at the end. Some of these observers lend themselves to providing a
            quantitive record of performance over a large number of scenario runs - drawing the
            attention of the analyst to the relatively poor or effective performance of individual
            scenario permutations. Such observers are titled <link linkend="monte_inter_scenario"
              >Inter Scenario Observers</link>, and have a pair of flags <link
              linkend="G_BATCH_COLLATION">
              <guilabel>Batch Collation</guilabel>
            </link> and <guilabel>Per Case Collation</guilabel>to indicate whether statistics should
            be collated across the batch of scenarios, and whether statistics should be collated
            either against each scenario permutation or against the sum total of scenario runs. See
            the <link linkend="obs_batch_collation">Batch Collation</link> section below for further
            guidance. </para>
          <sect3 id="obs_detection_observer">
            <title>Detection observer</title>
            <para>This observer counts how many times any vessel matching the <link
                linkend="mod_category">Category</link> type is detected by any sensor on a vessel
              matching the watch <link linkend="mod_category">Category</link> type. Optionally the
              degree of <link linkend="lookup_definitions">detection</link> may be specified - only
              detections reaching or exceeding this level of detection/classification are counter.
            </para>
          </sect3>
          <sect3 id="obs_proportion_detected_observer">
            <title>Proportion detected observer</title>
            <para>This observer counts how many times any vessel matching the <link
                linkend="mod_category">Category</link> type is detected by any sensor on a vessel
              matching the watch <link linkend="mod_category">Category</link> type. To do this, the
              observer determines how many targets match the target Category, then counts how many
              of them get detected by a vessel of the watch Category during the run. Using some
              fantastically advanced numerical processing the algorithm is then able to produe the
              proportion of targets are detected. </para>
          </sect3>
          <sect3 id="obs_proportion_observer">
            <title>Proportion detected observer</title>
            <para>This observer records how close any vessel matching the <link
                linkend="mod_category">Category</link> type reaches a vessel matching the watch
                <link linkend="mod_category">Category</link> type during the whole scenario run.
            </para>
          </sect3>
          <sect3 id="obs_elapsed_time">
            <title>Elapsed time observer</title>
            <para>This observer records the time elapsed during the scenario run in
              milliseconds</para>
          </sect3>
          <sect3 id="obs_final_state">
            <title>Final state observer</title>
            <para>This observer records the stop reason recorded by the scenario - the cause for the
              scenario completing. This could be down to an elapsed time ( <xref
                linkend="obs_time_observer"/>), or particular detection ( <xref
                linkend="obs_stop_detection"/>). </para>
          </sect3>
          <sect3 id="obs_time_to_launch_observer">
            <title>Time to launch observer</title>
            <para>This observer records how the time taken before a participant of the indicated
              Category is launched (created). Use of the observer can, for example, record how long
              before the first sono-buoy is dropped or weapon launched.</para>
          </sect3>
          <sect3 id="obs_batch_collation">
            <title>Batch Collation</title>
            <para>The optional Batch Collation data structure is used to control the collation of
              statistics across a batch of runs. The Batch Collation data structure is only offered
              for <link linkend="monte_inter_scenario">Inter Scenario Observers</link>, and its
              inclusion indicates that batch collation should be performed. Within the data
              structure the user is able to specify the <guilabel>Collation Method</guilabel> to
              control how the collation is performed: <itemizedlist>
                <listitem>
                  <para>Count the number of data-values recorded</para>
                </listitem>
                <listitem>
                  <para>Calculate the average of the data-values recorded</para>
                </listitem>
                <listitem>
                  <para>Calculate the average of the data-values recorded</para>
                </listitem>
                <listitem>
                  <para>Record the individual data values</para>
                </listitem>
                <listitem>
                  <para>Provide a list of the individual data values, annotating each with the name
                    of the scenario which recorded it</para>
                </listitem>
                <listitem>
                  <para>Provide a frequency list of data values returned; indicating how many
                    instances of each value were returned from scenarios in the batch</para>
                </listitem>
              </itemizedlist></para>
            <para>Also, the <guilabel>Per Case Collation</guilabel> indicator controls whether the
              statistics should be recorded across the whole set of runs, or one result for each
              permutation of <link linkend="G_VARIANCE">variances</link>, and the <guilabel>only
                batch processing</guilabel> flag prevents the observer from producing its normal
              per-scenario file output. </para>
            <para>Lastly the optional <guilabel>Filename</guilabel> parameter specifies the results
              filename to use, and the <guilabel>NoIntraRecording</guilabel> parameter specifies
              that there should be no intra-scenario recording for the currnet observer.. </para>
            <note>
              <para>In the future the batch collation processing may be changed to export the
                scenario results directly to an online database.</para>
            </note>
          </sect3>
        </sect2>
      </sect1>
      <sect1 id="mod_scenario_generation">
        <title>Scenario Generation</title>
        <para>Scenario generation is conducted in two ways: <application>ASSET</application> uses
          control file instructions to generate <link linkend="mod_multiple_participant">new
            instances</link> of a particular <link linkend="G_PARTICIPANT">participant</link> within
          a single <link linkend="G_SCENARIO">scenario</link> and also to generate <link
            linkend="mod_multiple_scenario">whole new scenarios</link>. Within these two different
          high level control structures <link linkend="mod_scenario_gen_core">common</link> elements
          describe how new scenario templates are modified. One or both of the control structures
          may be used in scenario generation depending on the analysis requirement, with two
          attributes expressed at the top level: <variablelist>
            <varlistentry id="ScenarioOutputDirectory">
              <term>Output Directory</term>
              <listitem>
                <para>This attribute specifies the directory where the scenario output files are
                  placed. These files may include copies of the generated scenarios together with
                  results files from any configured observers.</para>
              </listitem>
            </varlistentry>
            <varlistentry id="ScenarioRandomSeed">
              <term>RandomSeed</term>
              <listitem>
                <para>This seed can be used to initialise the random number generator within ASSET,
                  facilitating repeatable results. When omitted, ASSET will produce different
                  results sets each time a scenario is run (providing there is some element of
                  randomness in the scenario that-is).</para>
              </listitem>
            </varlistentry>
          </variablelist></para>
        <sect2 id="mod_scenario_gen_core">
          <title>Core scenario generation</title>
          <para>Whether ASSET is being instructed to create multiple scenarios or multiple
            participants it uses the same set of control structures, named <link
              linkend="G_VARIANCE">variances</link>. The variances are contained in a Variance List
            structure, and are described in the remainder of this section. </para>
          <para>Each variance contains a <guilabel>name</guilabel> and an <guilabel>id</guilabel>
            attribute.The name attribute is used not processed internally, but used to refer to that
            variance when outputting scenario results. The id attribute is an <link
              linkend="G_XPATH">XPath</link> expression used to identify which component of the
            scenario is being modified. </para>
          <para>Most of the variances contain an optional attribute which specifies how the random
            permutations should be generated. If omitted a uniform distribution of new permutations
            is generated, but the following values are available: <variablelist
              id="mod_random_distributions">
              <varlistentry>
                <term>Uniform</term>
                <listitem>
                  <para>Generate random values uniformly across the defined area</para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term>Normal</term>
                <listitem>
                  <para>Generate random values with a 3 Standard Deviation gaussian distribution,
                    centred on the mid-point of the defined range. A sample of the output from a
                    normal distribution is shown <link linkend="gaussian_dist">below</link>. </para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term>Normal Constrained</term>
                <listitem>
                  <para>Generate random values with a gaussian distribution, centred on the centre
                    of the defined area, but clipped to the specified range - if a sample is outside
                    the specified range another sample is drawn instead.</para>
                </listitem>
              </varlistentry>
            </variablelist><figure id="gaussian_dist">
              <title>Sample of normal distribution (min 60, max 140)</title>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="figures/GaussianDist.gif" width="100%" scalefit="1"/>
                </imageobject>
              </mediaobject>
            </figure></para>
          <figure id="loc_type_variance">
            <title>General types of variance available</title>
            <mediaobject>
              <imageobject>
                <imagedata fileref="figures/asset_schema_VarianceType.gif"/>
              </imageobject>
            </mediaobject>
          </figure>
          <sect3>
            <title>Location Area Variance</title>
            <para>This variance specifies an area within which new locations are chosen at random.
              Locations are distributed either uniformly across the area or with a normal
              distribution based on the centre of the area.</para>
          </sect3>
          <sect3>
            <title>Location Offset Variance</title>
            <para>This variance generates new random locations up to an indicated limit from the
              subject location, random values generated according to the random model specified.
            </para>
          </sect3>
          <sect3 id="mod_gen_node">
            <title>Node Variance</title>
            <para>This variance replaces the contents of the whole referenced Node, using one of a
              number of supplied <link linkend="mod_gen_choice">Choices</link>. </para>
          </sect3>
          <sect3 id="mod_gen_attribute">
            <title>Attribute Variance</title>
            <para>This variance replaces the contents of the specified Attribute, using either a
                <link linkend="mod_gen_choice">Choice</link> of supplied values or a calculated
              value within a set <link linkend="mod_gen_range">Range.</link>. </para>
          </sect3>
          <sect3 id="mod_gen_choice">
            <title>Choice Entry</title>
            <para>The Choice structure inserts one of a number of supplied text Snippets, either
              containing a whole node (when used in a <link linkend="mod_gen_node">Node
                Variance</link>) or just the text value to be used in an attribute (when used in an
                <link linkend="mod_gen_attribute">Attribute Variance</link>) </para>
          </sect3>
          <sect3 id="mod_gen_range">
            <title>Range Entry</title>
            <para>This construct causes values to be calculated within the specified range. Minimum
              and maximum attribute control the outer range of values created, the format attribute
              controls the precision (number of decimal places) of values output, and the step
              attribute allows values to be created at set intervals (whole tenths, units, 5s, 10s,
              etc). Lastly the number of permutations attribute indicates that while random values
              should be calculated, a fresh one is not needed each time. Instead, a fixed series of
              random values are generated, one of which is used each time a random value is
              requested. The background for this is described <link linkend="mod_range_permutations"
                >below</link>. </para>
            <tip id="mod_range_permutations">
              <para>When calculating values within the range, specifying the number of permutations
                causes that many permutations to be created. Instances from this limited number of
                permutations are selected in sequence for new random scenarios. When per-case
                analysis of scenario results is used a continuously random set of values would
                prevent analysis of grouped results - since every <link linkend="G_CASE_CODE">Case
                  Code</link> would be different. Specifying that a restricted number of
                permutations will be used ensures that groups of matching scenarios can be analysed
                together. </para>
            </tip>
          </sect3>
        </sect2>
        <sect2 id="mod_multiple_scenario">
          <title>Multiple Scenario generation</title>
          <para>The multiple <indexterm>
              <primary>Scenario</primary>
              <secondary>Generation</secondary>
            </indexterm>scenario generator structure contains a series of attributes containing high
            level controls over how the scenarios are generated, followed by a series of variances
            in a variance list. The following scenario generation attributes are used: <variablelist>
              <varlistentry id="ScenarioNameTemplate">
                <term>Name Template</term>
                <listitem>
                  <para>Whilst the newly generated scenarios files are typically each placed into a
                    new directory it may be necessary to specify a unique name for each one. Provide
                    a filename in this attribute, with %i for a counter, %d for the current DTG and
                    %s for the scenario name.</para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term>Max Perms</term>
                <listitem>
                  <para>The maximum number of instances of each permutation to produce. That-is, for
                    each combination of scenario variables, this is the maximum number of scenarios
                    to be produced for it. <footnote>
                      <para>Using this attribute can ensure that an equal number of each permutation
                        are produced. For example 100 scenarios are requested, with a single
                        scenario variance supplying one of 20 attribute choices. Specifying a Max
                        Perms value of 5 will ensure that each attribute choice occurs an equal
                        number of times.</para>
                    </footnote></para>
                </listitem>
              </varlistentry>
              <varlistentry id="ScenarioNumber">
                <term>Number</term>
                <listitem>
                  <para>The number of new scenarios to produce.</para>
                </listitem>
              </varlistentry>
            </variablelist></para>
          <para>Further guidance in the practice of scenario generation is contained in the <link
              linkend="tut_mod_control_file">Monte Carlo</link> scenario portion of the ASSET
            tutorial. </para>
        </sect2>
        <sect2 id="mod_multiple_participant">
          <title>Multiple Participant generation</title>
          <para>Whether the user is generating multiple scenarios or just working within a single
            generated scenario the multiple participant generator generates multiple instances of a
            single template participant. The multiple <indexterm>
              <primary>Participant</primary>
              <secondary>generation</secondary>
            </indexterm>participant generator contains a series of sets of participant variances,
            each creating one or more instances of the specified participant. For each participant
            variance the following attributes are defined: <variablelist>
              <varlistentry id="mod_part_name">
                <term>Name</term>
                <listitem>
                  <para>This identifies which participant from the scenario template file is being
                    used as a template for these new participants. It identifies the participant
                    using the name attribute of that participant in the scenario file.</para>
                </listitem>
              </varlistentry>
              <varlistentry id="mod_part_number">
                <term>Number</term>
                <listitem>
                  <para>This attribute defines how many new instances of that participant should be
                    generated. Thus, in a tactical scenario where you must analyse how many of the
                    target vessels are located you may choose just one new instance of the searcher
                    template and multiple new instances of the target vessel template.</para>
                </listitem>
              </varlistentry>
              <varlistentry id="mod_part_parallel">
                <term>In Parallel Planes</term>
                <listitem>
                  <para>This attribute specifies whether this participant should be processed in a
                      <link linkend="parallel_planes">parallel planes</link> mode. Parrallel planes
                    processing causes multiple instances of a participant to run through scenario
                    completely unaware of the others, achieving an efficiency over running through
                    the scenario many times. </para>
                </listitem>
              </varlistentry>
            </variablelist></para>
          <para>In addition to the <link linkend="mod_scenario_gen_core">range of Variances</link>
            available under multiple scenario generation, a <indexterm>
              <primary>Participant</primary>
              <secondary>Locator</secondary>
            </indexterm>Participant Locator Type offers a convenience way of specifying the range of
            locations within new participants will be created. A uniform grid of participants is
            generated according to the number of participants required. </para>
        </sect2>
      </sect1>
    </chapter>
    <chapter id="mod_bibliography">
      <title>Bibliography</title>
      <para>References used in support of this modelling guide</para>
      <bibliography>
        <biblioentry id="Urick">
          <author>
            <surname>Urick</surname>
            <firstname>Robert J</firstname>
          </author>
          <isbn>ISBN: 0-9321-62-7</isbn>
          <edition>3rd Edition</edition>
          <date> Published 1983</date>
          <publisher>
            <publishername>by McGraw-Hill, inc</publishername>
          </publisher>
          <title>Principles of underwater Sound</title>
        </biblioentry>
        <biblioentry id="Press">
          <author>
            <surname>Press</surname>
            <firstname>William H.</firstname>
          </author>
          <isbn>ISBN: 0-521-43108-5</isbn>
          <edition>2nd Edition</edition>
          <date> Published 1992</date>
          <publisher>
            <publishername>by Cambridge University Press</publishername>
          </publisher>
          <title>Numerical recipes in C: the art of scientific computing</title>
        </biblioentry>
      </bibliography>
    </chapter>
    <!-- ******************************** -->
    <!-- ****************************** -->
    <!--   GLOSSARY                                                            -->
    <!-- ************************ -->
    <!-- ************************* -->
    <appendix id="app_glossary">
      <title>
        <application>ASSET</application> Glossary </title>
      <sect1 id="gloss_intro">
        <title>Glossary</title>
        <para>This section contains explanations of terms used within this document</para>
      </sect1>
      <glossary id="glossary">
        <glossentry id="G_ACTIVITY">
          <glossterm>Activity</glossterm>
          <glossdef>
            <para>A short phrase describing what a participant is doing in the current time step:
              such as <emphasis>transitting</emphasis>, or <emphasis>trailling unidentified
                subsurface contact</emphasis>
            </para>
          </glossdef>
        </glossentry>
        <glossentry id="G_BATCH_COLLATION">
          <glossterm>Batch Collation</glossterm>
          <glossdef>
            <para>When an observer is capable of collating results across a batch of runs, a flag is
              used to indicate whether the user wants this to happen. In addition to specifying that
              batch collation be activated, the user is also able to indicate the nature of the
              collation: <itemizedlist>
                <listitem>
                  <para>Collect &amp; collate individual results</para>
                </listitem>
                <listitem>
                  <para>Calculate sum of individual results</para>
                </listitem>
                <listitem>
                  <para>Calculate mean of individual results</para>
                </listitem>
              </itemizedlist></para>
            <para>The user is also able to specifty whether this colation is performed on a
              per-permutation basis or across the total number of runs.</para>
          </glossdef>
        </glossentry>
        <glossentry id="G_BLUE_FORCE">
          <glossterm>Blue Force</glossterm>
          <glossdef>
            <para>The Blue Force within <application>ASSET</application> represents the friendly
              force, whose behaviour can typically be controlled. </para>
          </glossdef>
        </glossentry>
        <glossentry id="G_CASE_CODE">
          <glossterm>Case Code</glossterm>
          <glossdef>
            <para>Within a multi-scenario batch run where <application>ASSET</application> has
              produced a scenario using a particular permutation of the user-supplied variances,
              each particular combination of those variances is termed a Case. A case code is used
              to uniquely identify each case. Typically this is performed by generating a line of
              text comprising the name and current value of each variance. Thus the line of text is
              unique to each permutation. The multi-scenario run may contain multiple instances of
              each permutation, but statistics may be generated across those permutations by
              collecting individual scenario performances against their case code. </para>
          </glossdef>
        </glossentry>
        <glossentry id="G_CURRENT_STATE">
          <glossterm>Current Status</glossterm>
          <glossdef>
            <para>The current state of a vessel, expressed in terms of course, speed, and location
              (including depth). <variablelist>
                <varlistentry>
                  <term>Time</term>
                  <listitem>
                    <para>The time at which this status was recorded</para>
                  </listitem>
                </varlistentry>
                <varlistentry>
                  <term>Course</term>
                  <listitem>
                    <para>Current vehicle course (expressed in degrees, 0..360)</para>
                  </listitem>
                </varlistentry>
                <varlistentry>
                  <term>Speed</term>
                  <listitem>
                    <para>Current vehicle speed (expressed in knots)</para>
                  </listitem>
                </varlistentry>
                <varlistentry>
                  <term>Location</term>
                  <listitem>
                    <para>Three dimensional location expressed as lat long (degrees), and depth
                      (metres)</para>
                  </listitem>
                </varlistentry>
                <varlistentry>
                  <term>Fuel level</term>
                  <listitem>
                    <para>The current fuel level in this vehicle, initially expressed as a figure
                      from 1 to 100 (%) with conversion factors to/from actual data. See the
                      modelling guide ( <xref linkend="mod_fuel_usage"/>) for more details. </para>
                  </listitem>
                </varlistentry>
              </variablelist></para>
            <para>See the <ulink
                url="http://intranet2/coag/asset/api/ASSET/Participants/Status.html">ASSET Source
                Documentation</ulink> for more details on the Status object. </para>
          </glossdef>
        </glossentry>
        <glossentry id="G_DEMANDED_STATE">
          <glossterm>Demanded Status</glossterm>
          <glossdef>
            <para>The demanded state of a vessel, expressed in terms of either individual demanded
              course, speed and depth, or as a set of waypoints to visit together with demanded
              speed.. The <application>ASSET</application>
              <link linkend="mod_turn_algorithm">Turn Algorithm</link> handles how the vessel
              achieves this new demanded state. Individual components are specified as follows: <variablelist>
                <varlistentry>
                  <term>Course</term>
                  <listitem>
                    <para>The demanded course, expressed in degrees (0..360)</para>
                  </listitem>
                </varlistentry>
                <varlistentry>
                  <term>Speed</term>
                  <listitem>
                    <para>The demanded speed, expressed in metres/sec</para>
                  </listitem>
                </varlistentry>
                <varlistentry>
                  <term>Depth</term>
                  <listitem>
                    <para>The demanded depth to achieve, expressed in meters</para>
                  </listitem>
                </varlistentry>
              </variablelist></para>
            <para>The higher-level demanded status object consists of a series of waypoints together
              with a waypoint visiting strategy. The <link linkend="mod_waypoint_transition"
                >Waypoint Transition</link> model handles the translation between target waypoint
              lat/long/depth and demanded course/speed/depth. </para>
          </glossdef>
        </glossentry>
        <glossentry id="G_DETECTION">
          <glossterm>Detection</glossterm>
          <glossdef>
            <para>The details of a single detection of a platform by a sensor. The detection
              contains a varying set of information, since not all sensor produce the same data.
              Where a sensor isn&apos;t able to determine a particular parameter that value is set
              to null/indeterminable: <variablelist>
                <varlistentry>
                  <term>Bearing</term>
                  <listitem>
                    <para>The bearing of the target using this sensor, expressed in degrees</para>
                  </listitem>
                </varlistentry>
                <varlistentry>
                  <term>Speed</term>
                  <listitem>
                    <para>The speed of the target determined using this sensor, expressed in
                      knots</para>
                  </listitem>
                </varlistentry>
                <varlistentry>
                  <term>Range</term>
                  <listitem>
                    <para>The range to the target from the sensor datum, expressed in yards</para>
                  </listitem>
                </varlistentry>
                <varlistentry>
                  <term>Sensor Location</term>
                  <listitem>
                    <para>The 3-dimensional location of the sensor when the detection was
                      performed</para>
                  </listitem>
                </varlistentry>
                <varlistentry>
                  <term>Strength</term>
                  <listitem>
                    <para>The strength of the detection, expressed in agreed units for that
                      sensor</para>
                  </listitem>
                </varlistentry>
                <varlistentry>
                  <term>Target Type</term>
                  <listitem>
                    <para>The Category ( <xref linkend="mod_category"/>) of the target </para>
                  </listitem>
                </varlistentry>
                <varlistentry>
                  <term>Time</term>
                  <listitem>
                    <para>The DTG at which the detection was performed.</para>
                  </listitem>
                </varlistentry>
              </variablelist></para>
          </glossdef>
        </glossentry>
        <glossentry id="G_GREEN_FORCE">
          <glossterm>Green Force</glossterm>
          <glossdef>
            <para>The Green Force within <application>ASSET</application> represents the neutral
              participants within a scenario, who typically do not interact with Blue and Red
              participants. </para>
          </glossdef>
        </glossentry>
        <glossentry id="G_MONTE_CARLO">
          <glossterm>Monte Carlo</glossterm>
          <glossdef>
            <para>Method of modelling using a large number of model runs to provide a statistical
              probablity of a particular outcome</para>
          </glossdef>
        </glossentry>
        <glossentry id="G_PARTICIPANT">
          <glossterm>Participant</glossterm>
          <glossdef>
            <para>The demanded state of a vessel, expressed in terms of course and speed. The
                <application>ASSET</application> movement engine handles how the vessel achieves
              this new demanded state. </para>
          </glossdef>
        </glossentry>
        <glossentry id="G_RED_FORCE">
          <glossterm>Red Force</glossterm>
          <glossdef>
            <para>The Red Force within <application>ASSET</application> represents the opposing
              force, against which defensive/offensive tactics are typically constructed. </para>
          </glossdef>
        </glossentry>
        <glossentry id="G_SCENARIO">
          <glossterm>Scenario</glossterm>
          <glossdef>
            <para>A specific instance of a synthetic environment containing vessels, sensors, an
              environment, and time-step instructions.</para>
          </glossdef>
        </glossentry>
        <glossentry id="G_SCENARIO_MONITOR">
          <glossterm>Scenario Monitor</glossterm>
          <glossdef>
            <para>An object with an overview of the complete scenario, which is able to handle
              high-level interactions such as removing destroyed participants following a weapon
              detonation. The monitor is effectively a <emphasis>glue</emphasis> which connects
              modelling entities which aren&apos;t otherwise aware of each other. </para>
          </glossdef>
        </glossentry>
        <glossentry id="G_SENSOR">
          <glossterm>Sensor</glossterm>
          <glossdef>
            <para>A platform-mounted equipment capable of detecting another platform</para>
          </glossdef>
        </glossentry>
        <glossentry id="G_SERVER">
          <glossterm>Server</glossterm>
          <glossdef>
            <para>The software process which moves the scenario forward, instructing each platform
              to move, attempt to detect and other platforms, and make a decision based on that
              information.</para>
          </glossdef>
        </glossentry>
        <glossentry id="G_VARIANCE">
          <glossterm>Variance</glossterm>
          <glossdef>
            <para>In addition to definition of a straight-forward scenario for evaluation using
                <application>ASSET</application>, data-files can be constructed to include
              scenario-generation instructions. These instruct <application>ASSET</application> to
              either insert multiple, subtlely different instances of a particular participant
              (Participant Variance) or to vary one or more attributes of the overall scenario such
              as weather or start time (Scenario Variance). When the data-file is loaded
                <application>ASSET</application> processes these scenario generation commands before
              starting the run. </para>
          </glossdef>
        </glossentry>
        <glossentry id="G_XMLSPY">
          <glossterm>XMLSpy</glossterm>
          <glossdef>
            <para>A commercial XML editor providing a data-oriented view of XML data-files. ASSET
              data-files are strongly structured with little plain text but with most of the
              information stored as attributes and within the structure itself. There are more
              text-oriented XML editors on the market, but the word-processor type view presented by
              these does not lend itself to the collation of structured data-files required for
              ASSET scenario design. </para>
          </glossdef>
        </glossentry>
        <glossentry id="G_XPATH">
          <glossterm>XPath</glossterm>
          <glossdef>
            <para>
              <ulink url="http://www.w3.org/TR/xpath">XPath</ulink> is a language for addressing
              parts of an XML document using a compact non-XML syntax. An XPath tutorial is
              available on the <ulink url="../../XPathTutorial/General/examples.html">MWC
                Intranet.</ulink>
            </para>
          </glossdef>
        </glossentry>
      </glossary>
    </appendix>
  </book>
  <book id="user_guide">
    <title>
      <application>ASSET</application> User Guide </title>
    <subtitle>Updated <?dbtimestamp format="Y-m-d H:M:S"?></subtitle>
    <bookinfo>
      <revhistory>
        <revision>
          <revnumber>0.5</revnumber>
          <date>28th June 2002</date>
          <revdescription>
            <para>Initial Skeleton</para>
          </revdescription>
        </revision>
      </revhistory>
      <date>June 2002</date>
      <copyright>
        <year>2001,2002</year>
      </copyright>
      <author>
        <firstname>Ian</firstname>
        <surname>Mayo</surname>
        <affiliation>
          <orgname>PlanetMayo Ltd.</orgname>
          <address>
            <street>34 Shearwater Avenue</street>
            <city>Fareham</city>
            <state>HANTS</state>
            <postcode>PO16 8YE</postcode>
            <email>info@planetmayo.co.uk</email>
          </address>
        </affiliation>
      </author>
      <abstract>
        <title>The <application>ASSET</application> User Guide </title>
        <para>The <application>ASSET</application> User guide leads you through use of the
            <application>ASSET</application> Modelling Engine and the standard front-ends supplied
          with <application>ASSET</application>. The user guide only describes the use of the front
          ends, it does not supply specific modelling details, this information is contained in the
            <link linkend="modelling_guide">
            <application>ASSET</application> Modelling Guide </link>. Development and maintenance of
          the front-ends described in this guide are covered in the <link
            linkend="system_documentation">
            <application>ASSET</application> System Documentation </link>
        </para>
      </abstract>
    </bookinfo>
    <chapter id="user_engine">
      <title>
        <application>ASSET</application> Engine </title>
      <sect1 id="user_engine_intro">
        <title>Introduction</title>
        <para>This chapter will introduce you to some of the terms used in
            <application>ASSET</application> modelling, together with explaining the way in which
          ASSET is capable of generating multiple scenarios and participants based on template
          information you have supplied. </para>
        <para>Essentially the ASSET modelling engine takes a description of the tactical problem, a
          set of instructions regarding how to run through the problem and what information to
          record, and steps forward in time through the scenario until a finish point is reached. It
          is capable of this without the need for a graphical user interface or user interaction of
          any kind, though the software can produce graphical plots of vessel tracks either directly
          (through the TrackPlotObserver) or indirectly (through the use of Debrief
          data-files).</para>
        <sidebar>
          <title>Model Audit</title>
          <para>It is seen as important that ASSET users be able to determine the model build
            configuration of a particular software version. This could be to aid in reproducing a
            prior set of results or for recording tools used in a study report.</para>
          <para>ASSET uses the CVS (Concurrent Version System) version control application to
            implement configuration control of source code, documentation and data-files.
            Consequently a version history is kept of all file changes, including changes to model
            implementations. Inspection of this version history provides an insight into
            implementation changes.</para>
          <para>All of the text-based results outputs of ASSET include a clear reference to the
            ASSET build-date - the date when that instance of the software was automatically built.
            To reproduce a set of results produced using an earlier ASSET build version the source
            code versions from that date can be extracted and a software build performed. </para>
          <para>Further detail regarding ASSET support for Model Audit is contained in the System
            Guide at <xref linkend="sys_version_control"/>. </para>
        </sidebar>
      </sect1>
      <sect1 id="user_design_model">
        <title>Designing a model run</title>
        <para>The modelling problem is represented in two data-files. A scenario file provides a
          record of the scenario to be modelled, and the control file indicates to the modelling
          engine how to run through the scenario, whether multiple pemutations of any entities are
          required, and lastly what non-modelling entities to include (such as an observer which
          records vessel positions to file).</para>
        <sect2>
          <title>Scenario File</title>
          <para>The scenario file provides a textual description of the environment to be modelled,
            and the platforms to model in that environment. It also contains details of the
            start-time, and the desired model time step. </para>
        </sect2>
        <sect2>
          <title>Control File</title>
          <para>The control file provides information to guide ASSET through how the scenario should
            be performed - covering the automatic generation of new participants/scenarios, what
            information to record during the run, and when to stop the run.</para>
          <sect3>
            <title>Auto generation control commands</title>
            <para>The first block of information in a control file is optional, only required when
              the ASSET engine is required to automatically generate a number of targets to be used
              in a <glossterm linkend="G_MONTE_CARLO">Monte Carlo</glossterm> type engagement. </para>
            <para/>
          </sect3>
          <sect3>
            <title>Observers</title>
            <para>The second type of information found in the Control file is the list of scenario
              observers. A scenario observer may act as a read-only entity listening out for a
              particular type of activity within the scenario: such a listener may request that all
              decisions made by a particular platform be recorded to file. Alternatively a scenario
              observer may take on a "referee" responsibility, indicating that the scenario should
              terminate as soon as any red platform makes a valid detection of a particular blue
              platform. Scenario observers are recorded in the <ulink
                url="http://intranet2/coag/asset/api/ASSET/Scenario/Observers/CoreObserver.html"
                >ASSET Source Documentation</ulink>, and how they are recorded in the DTD file is
              recorded in the <ulink url="http://intranet2/coag/asset/help/schemas/ASSET.xsd.html"
                >Schema Documentation</ulink>
            </para>
          </sect3>
        </sect2>
      </sect1>
      <sect1 id="user_monte_carlo">
        <title>Monte Carlo simulation with ASSET</title>
        <para>When solving a problem using <glossterm linkend="G_MONTE_CARLO">Monte
            Carlo</glossterm> simulation techniques a number of different strategies for use of
          ASSET may be applied, some allow for interactive GUI access, others not. The following
          diagrams illustrate the steps taken: <figure float="0">
            <title>High level Monte Carlo workflow</title>
            <mediaobject>
              <imageobject>
                <imagedata fileref="figures/MonteCarloHighLevelWorkflow.gif"  width="100%" scalefit="1"/>
              </imageobject>
            </mediaobject>
          </figure>The analyst first creates a working scenario file (later to be used as template
          for the new permutations). This scenario file can be loaded into Workbench for initial
          testing to verify that participants/entities behave as expected. Next the analyst creates
          the control file which specifies observers to use for the scenario together with scenario
          generator structures which indicate how multiple Monte Carlo instances are to be created. </para>
        <para>The scenario and control files are then processed in either gui or batch mode as shown
          in the following diagram: <figure float="0" id="fig_monte_workflow">
            <title>Monte Carlo simulation workflow</title>
            <mediaobject>
              <imageobject>
                <imagedata fileref="figures/MonteCarloWorkflow.gif"  width="100%" scalefit="1"/>
              </imageobject>
            </mediaobject>
          </figure></para>
        <para>As you can see, the diagram breaks steps down into those undertaken by the operator
          and those undertaken within the modelling engine itself. Significantly, if multi-scenario
          Monte Carlo processing is required then it is not possible to interact with ASSET via a
          gui interface (since we can only see one scenario at a time), though since the control
          files are all written to disk prior to running, it is quite easy to load the scenario
          together with one of the control files and run through a <emphasis>normal</emphasis> ASSET
          run - possibly to investigate particular scenarios in detail after viewing their
          comparative performance. </para>
        <para>The batch-mode approach to Monte Carlo modelling is covered in <xref
            linkend="user_command_line"/>, whilst the interactive GUI approach is covered in <xref
            linkend="user_workbench"/>. </para>
      </sect1>
    </chapter>
    <chapter id="user_command_line">
      <title>Command-line ASSET</title>
      <sect1 status="command_line_intro">
        <title>Introduction</title>
        <para>The command-line version of <application>ASSET</application> provides a direct way of
          getting the <application>ASSET</application> modelling engine to run through a scenario
          file/command file combination. This section of the User Guide will talk you through
          obtaining <application>ASSET</application>, then preparing and conducting a scenario run.
        </para>
      </sect1>
      <sect1 id="command_line_get_asset">
        <title>Getting hold of ASSET</title>
        <note>
          <para>For the first two phases of <application>ASSET</application> development, expert
            users will be receiving and using the software through a more ad-hoc distributions.
            Users download and uncompress a <application>Zip</application>ped archive containing the
            ASSET software, its libraries and any supporting documents (help-files and schemas).
            Until the MWC server re-arrangement is complete the downloadable archive will be stored
            in <filename>nab:\\td submarines info\\asset</filename>. The individual zip files are
            named according to the build date - obviously the newest one is the one to download and
            unzip (probably into a directory such as <filename>c:\asset</filename>). </para>
        </note>
        <para>Right, the first thing you need to do is to get hold of the ASSET software itself,
          from <filename>Applications</filename> folder of the NAB. The software is available in two
          versions, <emphasis>complete</emphasis> and <emphasis>update</emphasis> - depending upon
          whether you want a complete fresh installation or just to download the changed files. If
          you don&apos;t already have <application>ASSET</application> installed on your machine,
          double-click on the <emphasis>install.exe</emphasis> file, and
            <application>ASSET</application> will be installed by default into your
            <filename>c:\program files\ASSET</filename> folder. If you do already have ASSET
          installed just download the newest update zip from the <filename>updates</filename> folder
          - and extract the files into the relevant places. </para>
      </sect1>
      <sect1 id="command_line_preparing">
        <title>Preparing to run ASSET</title>
        <para>So, presuming you have successfully obtained and installed ASSET, we are ready to
          start.</para>
        <para>In order to perform an <application>ASSET</application> simulation, you need to give
          it a synthetic environment to work with, and tell it what you want doing with that
          environment. For the purposes of this tutorial we are going to create simple versions of
          the two files necessary for a command-line ASSET run: the control file and the scenario
          file. The instructions lead you through creating the files using the <application>
            <glossterm linkend="G_XMLSPY">XMLSpy</glossterm>
          </application> editor, though any other data-oriented XML editor will do.<note>
            <para>In 2009 ASSET switched to using an internal XML editor. Use of the internal XML
              editor is very similar to the steps described here, but is covered in detail in the
                <emphasis>Getting started with ASSET</emphasis> cheat-sheet. The cheat-sheet doesn't
              quite have the breadth that's covered in this document - so this content is worth
              keeping.</para>
          </note></para>
        <sect2 id="tutorial_create_scenario">
          <title>Creating a scenario file</title>
          <para>Right, we&apos;re going to break down creating the scenario file into two stages:
            first we define how the whole scenario behaves (the top-level guidance) then we define
            the participants themselves.</para>
          <sect3>
            <title>Top-level guidance</title>
            <para>The scenario file is the meatier of the two files, containing a description of
              both the environment we will be working within and the participants which it contains.
              So, first you need to open up XMLSpy - which will give you a display like that shown
              below: <figure float="0">
                <title>XMLSpy opening screenshot</title>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="figures/xmlspy_1.gif"  width="100%" scalefit="1"/>
                  </imageobject>
                </mediaobject>
              </figure></para>
            <para id="create_new_xml">The next step is to open a blank XML document, so select
                <guimenuitem>New</guimenuitem> from the <guimenu>File</guimenu> menu, to get the new
              file dialog: <figure float="0">
                <title>XML new file dialog</title>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="figures/xmlspy_2.gif"  width="100%" scalefit="1"/>
                  </imageobject>
                </mediaobject>
              </figure>As you can see, there are all sorts of files which can be created, but
              we&apos;re just going to create a plain old XML data-file - so double-click on
                <guilabel>xml XML Document</guilabel>. The next dialog shown will ask you if you
              want to assign a DTD or Schema for the data-file. It&apos;s the Schema which specifies
              the structure and form of the scenario file, so yes, we certainly do want to specify a
              Schema - make sure Schema is selected, and press <guibutton>OK</guibutton>. From the
              file-selector dialog which appears next, click on the <guibutton>Browse</guibutton>
              button, navigate to your <application>ASSET</application> installation directory and
              select <filename>ASSET.XSD</filename>. You will now be invited to select the
              root-element, which dictates what type of file you are going to define. Select
                <computeroutput>Scenario</computeroutput>. </para>
            <para>
              <figure float="0">
                <title>Blank scenario loaded in XMLSPY</title>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="figures/xmlspy_5.gif" width="100%" scalefit="1"/>
                  </imageobject>
                </mediaobject>
              </figure>
            </para>
            <tip>
              <para>Now, in your view, you may not have the 3 information windows visible on the
                right-hand side (Elements, Attributes and Entities). They really help in the
                creation of a scenario, so make them visible by selecting <guimenuitem>Entry
                  Helpers</guimenuitem> from the <guimenu>Window</guimenu> menu. </para>
            </tip>
            <para>So, as we look at the data visible in the XMLSpy window we can see three sets of
              information: the XML identifier (which is always present and doesn&apos;t relate to
              our use of XMLSpy), the DOCTYPE specifier of scenario (which tells XMLSpy what we want
              to build, and what it&apos;s made up from, and lastly the scenario itself. Currently
              the Scenario is empty - it has the preconfigured but unused box titled ,
                <computeroutput>Name</computeroutput>. Let&apos;s fill them in to get started. First
              type in a <computeroutput>Name</computeroutput> for the scenario;
                <computeroutput>first scenario</computeroutput> should do for this time. With the
              cursor in the <computeroutput>Name</computeroutput> box you, if you look at the
                <guilabel>Append</guilabel> tab of the <guilabel>Attributes</guilabel> toolbox on
              the right-hand side of <application>XMLSpy</application> you will see a list of
              optional Scenario attributes. On of these is
                <computeroutput>StartTime</computeroutput>. If you single-click on the start-time
              attribute to select it, the <guilabel>Info</guilabel> window will update to show
              guidance related to the start-time attribute. Next, double-click on the
                <computeroutput>StartTime</computeroutput> attribute in the list, and
                <application>XMLSpy</application> will add it to the scenario. Into the Start Time
              box type today's date in the form <computeroutput>yyyy-mm-ddThh:mm:ss</computeroutput>
              (such as 2003-01-24T13:00:03). As you select the are typing into the
                <computeroutput>StartTime</computeroutput> box, notice this also provides
              explanatory information Info window. This explanatory information is available for
              most of the available information types. Also insert a
                <computeroutput>Created</computeroutput> item, again giving it today's date. Moving
              down through the list of core scenario information, the <computeroutput>Step
                Time</computeroutput> box represents the amount of scenario time we move forward at
              each step. First click on the down arrow next to
                <computeroutput>StepTime</computeroutput> to make it&apos;s attributes editable. Now
              double-click to the right of the <computeroutput>Units</computeroutput> attribute and
              select minutes from the drop-down list. Lastly enter the figure 1 as the
                <computeroutput>value</computeroutput>. This will instruct
                <application>ASSET</application> to move the scenario forward 1 minute at each model
              step. </para>
          </sect3>
          <sect3>
            <title>Inserting participants</title>
            <para>Right, that&apos;s the top-level information done. Now we&apos;re going to insert
              our first participant. First put the cursor into the <guilabel>Participants</guilabel>
              box, then switch the <guilabel>Elements</guilabel> box to show the <guilabel>Add
                child</guilabel> list. This list shows the types of vehicle which can be inserted as
              participants (as shown below) </para>
            <figure float="0">
              <title>List of available participants</title>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="figures/xmlspy_6.gif" width="100%" scalefit="1"/>
                </imageobject>
              </mediaobject>
            </figure>
            <para>Double-click on the <guilabel>SSK</guilabel> item, and a skeleton SSK will be
              inserted into the list of participants - pre-populated with it&apos;s essential
              elements. Now let&apos;s rattle through its attributes; start off by entering
                <computeroutput>SSK_1</computeroutput> as the <guilabel>Name</guilabel>. and
                <computeroutput>0.08</computeroutput> as the <guilabel>ChargeRate</guilabel>. Now
              drop-down the <guilabel>Category</guilabel> element to show it&apos;s constituent
              types: selecting <computeroutput>Subsurface</computeroutput> for
                <guilabel>Environment</guilabel>, <computeroutput>Red</computeroutput> for
                <guilabel>Force</guilabel> and <computeroutput>Submarine</computeroutput> for
                <guilabel>Type</guilabel>. Now put the cursor into the
                <guilabel>SensorFit</guilabel> element, and select
                <computeroutput>OpticSensor</computeroutput> from the <guilabel>Add child</guilabel>
              tab of the <guilabel>Elements</guilabel> toolbox. The optic sensor (periscope in this
              instance) only has one attribute, its minimum height - the height at which it becomes
              operable - enter -20 metres for this. </para>
            <para>Next enter the <guilabel>Status</guilabel> information; open up the element&apos;s
              attributes and enter <guilabel>Course</guilabel> and <guilabel>Fuel</guilabel> values
              of <computeroutput>45</computeroutput> and <computeroutput>100</computeroutput>
              respectively. Enter the speed as <computeroutput>12 knots</computeroutput> using the
              drop-down list of units supplied. We also need to specify where the SSK is starting
              from, so open up the <guilabel>Location</guilabel> object, its
                <guilabel>shortLocation</guilabel> child, and enter
                <computeroutput>0.0</computeroutput> for the <guilabel>Lat</guilabel> and
                <guilabel>Long</guilabel> . <guilabel>Height</guilabel> is an optional element
              within <guilabel>Location</guilabel> elements - but certainly applicable for a
              submarine. So, to insert the optional <guilabel>Height</guilabel> attribute, first
              make sure the cursor is inside the <guilabel>shortLocation</guilabel> element ( on
              either of the <guilabel>Lat</guilabel> or <guilabel>Long</guilabel> elements), and
              double-click <guilabel>Height</guilabel> from the <guilabel>Insert</guilabel> tab of
              the <guilabel>Elements</guilabel> toolbox. Set the <guilabel>Height</guilabel> to
                <computeroutput>-40</computeroutput> metres (-ve heights are used to represent
              depths in ASSET), to look like the next figure. </para>
            <figure float="0">
              <title>Setting the location for the initial status</title>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="figures/xmlspy_7.gif" width="100%" scalefit="1"/>
                </imageobject>
              </mediaobject>
            </figure>
            <para>Before we move onto the <guilabel>Waterfall</guilabel> element (as described above
              in <xref linkend="behaviour_Waterfall"/>), we&apos;ll fill in the more simple
              elements. First we have the <guilabel>RadiatedCharacteristics</guilabel>. First click
              on the <guilabel>RadiatedCharacteristics</guilabel> element, then look at the
                <guilabel>Add child</guilabel> tab of the <guilabel>Elements</guilabel> toolbox. We
              can see that so far there are three types of radiated energy defined. Double-click on
                <guilabel>Broadband</guilabel> to allow us to define the broadband radiated noise
              characteristics for the SSK. Into the (currently simple) noise model enter a value of
                <computeroutput>168</computeroutput> for the
              <guilabel>BaseNoiseLevel</guilabel>.Into the
                <guilabel>SSMovementCharacteristics</guilabel> element enter the following values
              for <guilabel>FuelUsageRate</guilabel>
              <guilabel>Name</guilabel>
              <guilabel>MinSpeed</guilabel>
              <guilabel>MaxSpeed</guilabel>, <guilabel>AccelerationRate</guilabel>,
                <guilabel>DecelerationRate</guilabel>
              <guilabel>MinHeight</guilabel>
              <guilabel>MaxHeight</guilabel>, <guilabel>DefaultClimbRate</guilabel>
              <guilabel>DefaultDiveRate</guilabel>, and <guilabel>TurningCircle</guilabel>:
                <computeroutput>0.0008</computeroutput>,
                <computeroutput>SSK_Performance</computeroutput>, <computeroutput> 0.1 kts, 16 kts,
                1 kt/s, 2 kt/s, -200m, -10m, 1 m/s, 2 m/s, 700m</computeroutput>. </para>
            <para>Next onto the behaviour of the SSK, which we&apos;ll record using the
                <guilabel>Waterfall</guilabel> element. This goes immediately after the
                <guilabel>Status</guilabel> element, so first select the Radiated Characteristics
              element, then double-click <guilabel>Waterfall</guilabel> from the
                <guilabel>Insert</guilabel> toolbox to place it after <guilabel>Status</guilabel>.
              The <guilabel>Waterfall</guilabel> behaviour is a container that describes a
              prioritised series of behaviours for the SSK. Once the new
                <guilabel>Waterfall</guilabel> element is selected, a large array of child
              behaviours are available from the <guilabel>Add Child</guilabel> tab fof the
                <guilabel>Elements</guilabel> toolbox/ Clicking on any of them will show a brief
              explanation in the <guilabel>Info</guilabel> window. We&apos;re going to start off
              simply, with an SSK which just wanders around whilst trying to keep its batteries
              topped up. So, put the cursor into the <guilabel>Waterfall</guilabel> element, then
              double-click <guilabel>SSKRecharge</guilabel> from the <guilabel>Add child</guilabel>
              tab of the <guilabel>Elements</guilabel> toolbox. Set the recharge parameters as
                <guilabel>Name:</guilabel> : <computeroutput>keep topped up, </computeroutput>,
                <guilabel>Min</guilabel> and <guilabel>Safe Level</guilabel>:
                <computeroutput>10</computeroutput> and <computeroutput>60</computeroutput>, leave
                <guilabel>EvadeThese</guilabel> blank, and finally insert a
                <guilabel>SnortSpeed</guilabel> of <computeroutput>3</computeroutput> knots. </para>
            <para>Next insert the <guilabel>Wander</guilabel> behaviour. Enter
                <computeroutput>Just_wandering_around</computeroutput>, <computeroutput>12
                nm</computeroutput>, <computeroutput>14 knots</computeroutput>, and
                <computeroutput>-60m</computeroutput> as the values for <guilabel>Name</guilabel>,
                <guilabel>Range, </guilabel>
              <guilabel>Speed</guilabel> and <guilabel>Height</guilabel>. Fill in a value of 20
              kilometres for the Range. We&apos;re going to swap the
                <guilabel>shortLocation</guilabel> for a <guilabel>longLocation</guilabel>. To do
              this, put the cursor in the <guilabel>shortLocation</guilabel> and double-click
                <guilabel>longLocation</guilabel> from the <guilabel>Insert</guilabel> tab of the
                <guilabel>Elements</guilabel> toolbox. Now the <guilabel>longLocation</guilabel> is
              in our <guilabel>Wander</guilabel> behaviour, delete the
                <guilabel>shortLocation</guilabel>. Enter a value of 5 minutes North, 5 minutes West
              (with zero for the other location attributes). The behaviours in the
                <guilabel>Waterfall</guilabel> should look like the screenshot below: </para>
            <figure float="0">
              <title>SSK Behaviours</title>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="figures/xmlspy_7a.gif" width="100%" scalefit="1"/>
                </imageobject>
              </mediaobject>
            </figure>
            <para>Ok, save the file in your <application>ASSET</application> installation directory
              as <filename>scenario_1.xml</filename>
            </para>
            <para>If we click on it, then look at the <guilabel>Add child</guilabel> tab of the
                <guilabel>Elements</guilabel> toolbox we can see the range of behaviours available.
            </para>
          </sect3>
        </sect2>
        <sect2 id="tutorial_create_control">
          <title>Creating the Control file</title>
          <para>Next we have to create the control file - used to indicate to
              <application>ASSET</application> what information we want to record to file, and how
            long we want the scenario to run for. So, first go to <application>XMLSpy</application>,
            and create a new, blank document. Indicate to <application>XMLSpy</application> that you
            want to base the document on a schema, and select the <application>ASSET</application>
            schema, as described above in <xref linkend="create_new_xml"/>. From the list of
            optional root elements, select <guilabel>ScenarioController</guilabel> to give a view
            like that below. <figure float="0">
              <title>Initial view of control file</title>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="figures/xmlspy_8.gif" width="100%" scalefit="1"/>
                </imageobject>
              </mediaobject>
            </figure></para>
          <para>Start off by setting the <guilabel>OutputDirectory</guilabel> attribute to the
            current directory ("." - a single full-stop character). </para>
          <para>The scenario controller element we&apos;ve inserted handles both a list of observers
            and a set of commands for generating multiple participants/scenarios (as can be seen
            from the list of applicable child-elements at the top-right of the screenshot). For the
            purposes of this tutorial however we&apos;re just going to add some observers, so place
            the cursor in the <guilabel>ScenarioController</guilabel> element and then select
              <guilabel>ObserverList</guilabel> from the <guilabel>Elements</guilabel> toolbox. </para>
          <para>We now need one or more <link linkend="mod_observers">Scenario Observers</link> to
            record the output of the run. First we add a <guilabel>TimeObserver</guilabel>, which
            will allow the scenario to run for a specific time period. First put the cursor into the
            currently blank <guilabel>ObserverList</guilabel>, then select the <guilabel>Add
              child</guilabel> from the <guilabel>Elements</guilabel> toolbox. From the list of
            available observers, double-click <guilabel>TimeObserver</guilabel>. Set its active flag
            to true, and name it <computeroutput>run for three hours</computeroutput>. Lastly set
            the duration value to 3 hours. Next we will add a <guilabel>CSVTrackObserver</guilabel>,
            which will record the vessel track to a file in comma-separated variable (CSV) format.
            So, with the cursor on the <guilabel>TimeObserver</guilabel>, select
              <guilabel>CSVTrackObserver</guilabel> from the <guilabel>Append</guilabel> tab of the
              <guilabel>Elements</guilabel> toolbox. Configure this observer to be active (set
            active to true), name it <computeroutput>record tracks to csv</computeroutput>, and
            direct it to place the results files into the current directory, represented by a single
            full-stop ( <computeroutput>.</computeroutput>) . Note that the destination directory is
            an optional attribute - whilst inside the <guilabel>CSVTrackObserver</guilabel> select
              <guilabel>directory_name</guilabel> from the <guilabel>Append</guilabel> tab of the
            Attributes toolbox. </para>
          <para>Lastly we will add an observer to provide us with a graphical track plot of the
            completed scenario. To do this, put the cursor on to the
              <guilabel>CSVTrackObserver</guilabel> element, then double-click on
              <guilabel>TrackPlotObserver</guilabel> from the <guilabel>Append</guilabel> tab of the
              <guilabel>Elements</guilabel> toolbox. Configure the track plot observer with
            it&apos;s name ( <computeroutput>scenario_plot</computeroutput>), make it Active, and
            request a grid delta of <computeroutput>1 nautical mile (nm)</computeroutput>. </para>
          <para>The file should now look like that below:</para>
          <figure float="0">
            <title>Completed control file</title>
            <mediaobject>
              <imageobject>
                <imagedata fileref="figures/xmlspy_9.gif" width="100%" scalefit="1"/>
              </imageobject>
            </mediaobject>
          </figure>
          <para>Lastly save the file to disk, placing it into your <application>ASSET</application>
            installation directory as <filename>control_1.xml</filename>. </para>
        </sect2>
      </sect1>
      <sect1 id="running_command_line">
        <title>Running command-line ASSET</title>
        <para>So, in our <application>ASSET</application> installation directory we have a scenario
          file defining an SSK which will wander around a fixed point, and a control file which
          indicates that the scenario should run for an hour, with results placed into the current
          directory. To run this scenario first open a command line <footnote>
            <para>from the <guimenu>Start Menu</guimenu>, select <guibutton>Run</guibutton>. From
              the dialog which opens type <computeroutput>cmd</computeroutput> into the text box and
              press <guilabel>Enter</guilabel>. A command line will open. </para>
          </footnote>, and navigate to the <application>ASSET</application>installation directory.
          Once in this directory enter the following command: <quote>
            <computeroutput>asset scenario_1 xml control_1.xml</computeroutput>
          </quote>. You will see <computeroutput>Started</computeroutput> and
            <computeroutput>Stopped</computeroutput> status lines appear, and the command prompt
          return. Into the current directory you should see that <filename>CSV</filename> and
            <filename>PNG</filename> files has been created - double-click it the CSV to have a look
          inside. <application>Excel</application> should open up, and show you the columns of data.
          To view the track plot, open <application>Internet Explorer </application>then drag the
            <filename>PNG</filename> file across into it - you should see an image like that shown
          below. </para>
        <figure float="0">
          <title>Overview track plot</title>
          <mediaobject>
            <imageobject>
              <imagedata fileref="figures/tutorial_track_plot.gif" width="100%" scalefit="1"/>
            </imageobject>
          </mediaobject>
        </figure>
        <para>Viewing the <filename>CSV</filename> output in <application>Excel</application> will
          show the periods spent snorting to recharge batteries, but these are also clear on the
          graphic track plot as track portions shaded solid red - periods when the SSK is travelling
          more slowly leaving the location markers overlapping one-another. </para>
      </sect1>
    </chapter>
    <chapter id="user_command_line_monte">
      <title>Command Line Monte-Carlo</title>
      <sect1 status="command_line_intro">
        <title>Introduction</title>
        <para>First read through the use of ASSET in command-line mode for general scenario
          processing (as described in <xref linkend="user_command_line"/>), together with the
          general guidance in the ASSET approach to Monte Carlo simulation (as described in <xref
            linkend="user_monte_carlo"/>). The steps in this portion of the user guide will run
          through defining, running, then analysing a sample scenario. The scenario will be an
          extension of the previous scenario. </para>
      </sect1>
      <sect1 id="command_line_prep_data">
        <title>Preparing the data</title>
        <para>As with normal ASSET command-line processing two files are required; the scenario file
          and the control file. The difference from normal processing is that the control file also
          includes scenario generation instructions. We&apos;re going to work with modified versions
          of the previous files, so using your file manager (such as <application> Windows
            Explorer</application>) make duplicates of <filename>scenario_1.xml</filename> and
            <filename>control_1.xml</filename>, naming them as
            <filename>monte_scenario_1.xml</filename> and <filename>monte_control_1.xml</filename>.
          Note that currently the location of the <application>ASSET</application> schema <link
            linkend="User_URI">needs to be edited</link> prior to running Monte Carlo scenarios. </para>
        <sect2 id="tut_mod_scenario">
          <title>Modify the scenario</title>
          <para>The modification to be made to the scenario is that we are going to add a helo
            following a pre-determined search pattern. So, flash up
              <application>XMLSpy</application>, and load <filename>monte_scenario_1.xml</filename>
            . Navigate to the <guilabel>Participants</guilabel> element, collapse the existing
              <guilabel>SSK</guilabel> element, and insert a <guilabel>Helo</guilabel> element from
            the <guilabel>Append</guilabel> tab of the elements toolbox. Name it
              <computeroutput>Merlin_A</computeroutput>, mark it as an airborne
              <computeroutput>Helicopter</computeroutput> from <computeroutput>Blue</computeroutput>
            force (in the category), and add an <guilabel>Optic Sensor</guilabel>. Give the optic
            sensor a <guilabel>MinHeight</guilabel> of 30 metres. Next set the helo status and
            movement characteristics as shown in the following screenshot. </para>
          <figure float="0">
            <title>Overview track plot</title>
            <mediaobject>
              <imageobject>
                <imagedata fileref="figures/tutorial_helo_settings.gif"/>
              </imageobject>
            </mediaobject>
          </figure>
          <para>Next we will record the radiated characteristics of the helo. Put the cursor into
            the <guilabel>RadiatedCharacteristics</guilabel> element, and insert an
              <guilabel>Optic</guilabel> element from the <guilabel>Add Child</guilabel> tab. Mark
            the <guilabel>XSectArea</guilabel> of the helo as 40, and the height as 4 metres. </para>
          <para>Lastly we have to record the helicopter&apos;s search plan as a behaviour. Put the
            cursor into the <guilabel>RadiatedChars</guilabel> element, and insert
              <guilabel>Waterfall</guilabel> from the <guilabel>Insert</guilabel> tab of the
            Elements toolbar. Into the <guilabel>Waterfall</guilabel> behaviour insert a
              <guilabel>TransitWaypoint</guilabel> behaviour. Name it as <computeroutput>plan
              alpha</computeroutput>, set it to looping, and select <guilabel>OnTop</guilabel> as
            the visitor pattern. Set the speed as 80 knots, and instruct the helo to travel through
            coordinates at: <computeroutput>(0.2, 0.6)</computeroutput>,
              <computeroutput>(0.9,-0.3)</computeroutput>, <computeroutput>(0.9,
              0.7)</computeroutput> and <computeroutput>(0.2, 0.3)</computeroutput>. </para>
        </sect2>
        <sect2 id="tut_mod_control_file">
          <title>Modify the control file</title>
          <para>Next we&apos;re going to modify the control file to instruct ASSET to create a
            number of SSKs in order that we can examine how they react to our searching helo. Start
            by opening <filename>monte_control_1.xml</filename> in
            <application>XMLSpy</application>. Next change the <guilabel>OutputDirectory</guilabel>
            to <computeroutput>monte_results</computeroutput> so that all of our output data is
            together. Now we&apos;re going to insert a scenario generator element into the scenario
            controller, so first pit the cursor on the <guilabel>ObserverList</guilabel> element,
            and select <guilabel>ScenarioGenerator</guilabel> from the <guilabel>Insert</guilabel>
            tab of the elements toolbox. Right, set the <guilabel>Filename</guilabel> to
              <computeroutput>results</computeroutput>, and then insert a
              <guilabel>MultiParticipantGenerator</guilabel> from the <guilabel>Insert</guilabel>
            tab, as below: </para>
          <figure float="0">
            <title>Initial scenario geneation</title>
            <mediaobject>
              <imageobject>
                <imagedata fileref="figures/tutorial_monte_control1.gif"/>
              </imageobject>
            </mediaobject>
          </figure>
          <para>As you can see, we&apos;ve been provided with a
              <guilabel>ParticipantVariance</guilabel> (see <link linkend="G_VARIANCE"
              >Variance</link>in the Glossary) element to start us off - this is the data structure
            used to define how one particular participant is going to be <emphasis>cloned</emphasis>
            within the scenario. We&apos;re going to be making 16 new instances of our SSK, so enter
              <computeroutput>SSK_1</computeroutput> in the <guilabel>Name</guilabel> field and
              <computeroutput>16</computeroutput> in the <guilabel>Number</guilabel> field. <note>
              <para>There&apos;s an optional ParticipantVariance parameter which isn&apos;t shown in
                the screenshot. The <guilabel>inParallelPlanes</guilabel> attribute indicates to
                ASSET whether the multiple instances of this participant can see each other or not.
                The Monte Carlo simulation technique makes use of multiple participants to
                predicting the probability of a single course of action of a participant using the
                statistical analysis of many non-interacting instances of that participant. The
                multiple participants are marked as non-interacting by setting the
                  <guilabel>inParallelPlanes</guilabel> attribute to
                  <computeroutput>true</computeroutput>. </para>
            </note> Delete the <guilabel>LocationOffset</guilabel> element we&apos;ve been provided
            with, and replace it with an <guilabel>Attribute</guilabel> element - indicating that
            we&apos;re going to be varying one of the attributes of the SSK. Name this variance as
              <computeroutput>vary the course</computeroutput>, and set the <guilabel>id</guilabel>
            to <computeroutput>Status</computeroutput> to indicate that we&apos;re going to be
            changing an attribute of the Status element. Within the Attribute element we&apos;ve
            already been given a <guilabel>Range</guilabel> element by default, so just fill in its
            details to indicate values from 0 to 360 in 45 unit steps, as below. </para>
          <figure float="0">
            <title>Variance to apply to the SSK</title>
            <mediaobject>
              <imageobject>
                <imagedata fileref="figures/tutorial_monte_control2.gif"/>
              </imageobject>
            </mediaobject>
          </figure>
          <para>Note that additional attributes are available for varying how the random courses are
            generated. This first is <computeroutput>RandomModel</computeroutput>, which specifies
            which <link linkend="mod_random_distributions">random number distribution</link> used to
            generate the courses, and the second is
              <computeroutput>number_permutations</computeroutput>, which specifies that instead of
            creating 16 random courses, the 16 random courses should be taken from a pre-calculated,
            smaller number of random courses: 4 for example. Using a smaller number of random
            variables with <link linkend="obs_batch_collation">per-scenario analysis</link>
          </para>
          <note id="User_URI">
            <para>
              <application>ASSET</application> uses a variety of third party libraries to support
              its functionality, with two separate XML Importer libraries. Unfortunately the
              importer library used when conducting scenario generation displays its immaturity by
              requiring that the path to the Schema files be entered as a <abbrev>URI</abbrev>
              (Uniform Resource Identifier). Consequently the Schema location attributes in our two
              Monte Carlo data-files needs to be edited. Specifically the DOS-path to the
                <filename>ASSET.XSD</filename> as currently included in the file needs to prepended
              with <filename>file://</filename> and all <filename>\</filename> characters need to be
              replaced with <filename>/</filename>. A more versatile file importer will be
              incorporated once a stable, acceptable library comes available. Am alternative to
              including the full URI is to include the <filename>ASSET.XSD</filename> in the current
              working directory and just use include <filename>ASSET.XSD</filename> as the schema
              reference without any path details. </para>
          </note>
        </sect2>
        <sect2 id="tut_run_through_scenario">
          <title>Running the Monte Carlo scenario</title>
          <para>Monte Carlo simulations are started from the command line in the same way as
            conventional scenarios - so navigate to your installation directory and type the
            following: <computeroutput>asset monte_scenario_1.xml
              monte_control_1.xml</computeroutput>. </para>
          <para>You should see the progress of the scenario on the command line, and be left with a
              <filename>monte_results</filename> sub-directory containing a copy of the control file
            together with a single sub-directory. This sub-directory contains a copy of the
            generated scenario file ( <filename>results_1.xml</filename>) and our output files. If
            you examine the <filename>results_1.xml</filename> file you will see all 16 of the
            generated SSKs. Each is almost identical except for having varying unique courses. In
            the example I produced the SSKs have initial courses of 90 degrees, 135 degrees, 315
            degrees and so on. The <filename>PNG</filename> plot should look like that shown below: </para>
          <figure float="0">
            <title>Initial Monte Carlo results</title>
            <mediaobject>
              <imageobject>
                <imagedata fileref="figures/tutorial_monte_control3.gif" width="100%" scalefit="1"/>
              </imageobject>
            </mediaobject>
          </figure>
        </sect2>
        <sect2 id="tut_more_monte_carlo">
          <title>More Monte Carlo playing</title>
          <para>So, we&apos;ve experimented with creating multiple participants - but this is only
            half of ASSET&apos;s support for Monte Carlo simulation, it can also generate multiple
            scenarios. To do this, open up the <filename>Monte_control_1.xml</filename> file again,
            and insert a <guilabel>MultiScenarioGenerator</guilabel> in front of the
              <guilabel>MultiParticipantGenerator</guilabel>. Set the
              <guilabel>NameTemplate</guilabel> to <computeroutput>output</computeroutput> (to name
            our output files), then set the <guilabel>Number</guilabel> to
              <computeroutput>5</computeroutput> (to indicate that we want to work with 5 copies of
            the scenario). Insert a <computeroutput>Variance</computeroutput> into the
              <computeroutput>VarianceList</computeroutput> within which we&apos;re going to be
            varying the helo transit speed, so set the <guilabel>Name </guilabel> to
              <computeroutput>vary transit speed</computeroutput>. We&apos;re not directly referring
            to a participant here as we were in the multiple participant generator, so we have to
            use the <link linkend="G_XPATH">XPath</link> wild-carding syntax to identify the element
            we&apos;re going to adjust. We do this by referring to the status element beneath the
            parent element named <computeroutput>Merlin_A</computeroutput>. This reads as:
              <computeroutput>//*[@Name=&apos;Merlin_A&apos;]//TransitWaypoint/Speed</computeroutput>
          </para>
          <para>Lastly replace the <guilabel>LocationOffset</guilabel> with an
              <guilabel>Attribute</guilabel> to indicate that we&apos;re going to be changing an
            attribute, then indicate that we want to use a <guilabel>Range</guilabel> of values from
            40 to 200 in steps of 20, as below: </para>
          <figure float="0">
            <title>Scenario generation parameters</title>
            <mediaobject>
              <imageobject>
                <imagedata fileref="figures/tutorial_monte_control4.gif"/>
              </imageobject>
            </mediaobject>
          </figure>
          <para>Now run the scenario again. If you look into the <filename>monte_results</filename>
            sub-directory you will see a copy of the control file (named
              <filename>control_file.xml</filename>- gifted!), together with 5 sub-directories. In
            each is a new version of the scenario ( <filename>results_1.xml</filename> for example).
            Have a quick look at them, you&apos;ll see the 16 SSKs in each one, together with the
            varying transit speeds assigned to the helo. </para>
          <note>
            <para>When conducting a multi-scenario simulation, there is a need to track performance
              across all scenarios - not just within individual runs. This ability to define
              inter-scenario observers is described later in <xref linkend="monte_inter_scenario"/>
              . The inter-scenario observer is defined in the control file just like normal
              observers, but when initialising the scenario ASSET applies special processing to
              these observers to initialise them prior to running through the individual scenarios.
            </para>
          </note>
        </sect2>
      </sect1>
    </chapter>
    <chapter id="user_lookup_model">
      <title>Getting to know the ASSET Sensor Model</title>
      <sect1 id="tut_sensor_background">
        <title>Background</title>
        <para>In Autumn 2003 Jon Walters derived an improved above-water sensor model for use in
          ASSET. Significantly, this algorithm modelled the transition of a target from undetected
          to through detected and classified to identified - a concept not present in the existing
          model.</para>
        <para>The above-water sensor model utilises lookup tables to determine the environmental and
          spatial aspects of the sensor, sensor host, and target. Read more about the <link
            linkend="mod_lookup_model">improved lookup model</link> then run through this tutorial
          scenario. </para>
      </sect1>
      <sect1 id="tut_planning_scenario">
        <title>Planning the scenario</title>
        <para>The scenario we plan to model is that of a helicopter investigating a series of
          fishing vessels, trying to find a particular one. The helicopter first detects the vessels
          on radar, but since the radar sensor is typically unable to identify a target the helo
          closes to visual range to actually identify the target. Once the fishing vessel is
          identified as not being the target of interest the helo continues it&apos;s search
          path.</para>
        <para>So, we will be creating a helo and a number of fishing vessels. The helo will be
          equipped with <link linkend="mod_lookup_radar">radar</link> and <link
            linkend="mod_lookup_eyesight">optic</link> lookup sensors. The helo will conduct a
          coarse search, investigating all fishing boat contacts to identify the target of interest
          - one of a number of fishing boats randomly wandering around the area of interest. </para>
      </sect1>
      <sect1 id="tut_create_scenario_file">
        <title>Creating the scenario file (including environment)</title>
        <para>In this section we are going to start the skeleton of the scenario file, and define
          the environmental lookup tables used by the lookup sensors.</para>
        <para>Start off by repeating the steps of the earlier tutorials to <link
            linkend="tutorial_create_scenario">create the empty scenario file </link>, naming your
          scenario with something along the lines of "Lookup sensor tutorial". </para>
        <para>Now set the step time to 5 seconds, the scenario start time to
            <computeroutput>2003-01-24T13:00:03</computeroutput>, and the created time to
            <computeroutput>2004-01-12T13:00:03</computeroutput> (or even the real date if you
          want). </para>
        <para>Now for the scenario, which is inserted before the <guilabel>Participants</guilabel>
          item. So click on the <guilabel>Participants</guilabel> item, then on the
            <guilabel>Insert</guilabel> tab of the <guilabel>Elements</guilabel> toolbox. From the
          list of applicable items double-click on <guilabel>Environment</guilabel>, and it will
          appear. Now start off with the core environmental data items; <computeroutput>First lookup
            environment</computeroutput>, <computeroutput>2</computeroutput>, and
            <computeroutput>LIGHT_HAZE</computeroutput>. Next come the <link
            linkend="mod_lookup_model">lookup sensor</link>-specific environments. The lookup sensor
          guidance recorded earlier in the modelling guide contains tables of typical values. We'll
          be starting with the <link linkend="mod_lookup_radar">Radar</link> lookup model, taking
          the values from the earlier tables. Highlight the
            <guilabel>AtmosphericAttenuation</guilabel> attribute and double-click on the
            <guilabel>RadarLookupEnvironment</guilabel> element from the <guilabel>Insert</guilabel>
          toolbox. Name the Radar environment, and the start populating the
            <guilabel>TargetAspectSet</guilabel> with the Sigma values with the values recorded in
          the <link linkend="LOOKUP_SIGMA_TABLE">modelling guide</link>. Working from the
            <computeroutput>Frigate</computeroutput> down, select
            <computeroutput>Frigate</computeroutput> from the drop-down list for the
            <guilabel>Type</guilabel> attribute then enter the respective Sigma values for
            <guilabel>Dead Ahead</guilabel>, <guilabel>Bow</guilabel>, <guilabel>Beam</guilabel>,
            <guilabel>Quarter</guilabel>, and <guilabel>Astern</guilabel>. Once you've finished the
          row insert another by clicking on the <guilabel>1</guilabel> row counter and then clicking
          on <guilabel>TargetAspectDatum</guilabel> from the <guilabel>Elements</guilabel> toolbox.
          Insert the CVS values into this row and so on for the other participant types. </para>
        <para>In the spirit of having a go at sticking all sorts of data into the scenario we will
          provide a default Sigma value - to cover instances where we haven't provided a vessel-type
          (this would normally throw an error as <link linkend="NO_DEFAULT_WARNING">recorded
            below</link>). To do this click on the <guilabel>TargetAspectDatum</guilabel> item under
          your <guilabel>RadarLookupEnvironment</guilabel> then from the <guilabel>Add
            Child</guilabel> tab of the <guilabel>Attributes</guilabel> toolbox double-click on the
            <guilabel>UnknownType</guilabel> item. Provide a value of
            <computeroutput>500</computeroutput> for this attribute. </para>
        <para>Right, what's next. On to the <guilabel>TargetSeaStateSet</guilabel>. This is collated
          in a similar way to the <guilabel>TargetAspectSet</guilabel>, entering lists of values
          indexed against participant type. <application>ASSET</application> only requires data
          values for sea state one to six, if your scenario requires data in higher sea states they
          can be inserted from the <guilabel>Append</guilabel> or <guilabel>Insert</guilabel> tabs
          of the <guilabel>Attributes</guilabel> toolbox. </para>
        <para>Now that the radar is in there we'll move onto the visual environment lookup table.
          The routine here is similar to that for radar. Two of the four sub-tables store
          vessel-type related data similar those we've just entered, with the other two being simple
          lists. The vessel-related tables take optional <guilabel>UnknownType</guilabel> attributes
          as covered earlier. Lastly insert a <guilabel>MADLookupEnvironment</guilabel> - providing
          sample values for the four participant types covered earlier. As a helping hand, here is
          the text version of a sample lookup table: <computeroutput> &lt;RadarLookupEnvironment
            Name="normal radar data"&gt; &lt;TargetAspectSet UnknownType="100"&gt;
            &lt;TargetAspectDatum Type="FRIGATE" DeadAhead="1000" Bow="3000" Beam="4000"
            Quarter="3000" Astern="1000"/&gt; &lt;TargetAspectDatum Type="CARRIER" DeadAhead="2000"
            Bow="8000" Beam="10000" Quarter="8000" Astern="2000"/&gt; &lt;TargetAspectDatum
            Type="SUBMARINE" DeadAhead="0.5" Bow="0.5" Beam="0.5" Quarter="0.5" Astern="0.5"/&gt;
            &lt;TargetAspectDatum Type="FISHING_VESSEL" DeadAhead="5" Bow="8" Beam="10" Quarter="8"
            Astern="5"/&gt; &lt;/TargetAspectSet&gt; &lt;TargetSeaStateSet UnknownType="1"&gt;
            &lt;TargetSeaStateDatum Type="FRIGATE" SeaState_0="1" SeaState_1="1" SeaState_2="1"
            SeaState_3="1" SeaState_4="1" SeaState_5="0.95" SeaState_6="0.9"/&gt;
            &lt;TargetSeaStateDatum Type="CARRIER" SeaState_0="1" SeaState_1="1" SeaState_2="1"
            SeaState_3="1" SeaState_4="1" SeaState_5="1" SeaState_6="0.95"/&gt;
            &lt;TargetSeaStateDatum Type="SUBMARINE" SeaState_0="1" SeaState_1="1" SeaState_2="0.8"
            SeaState_3="0.75" SeaState_4="0.7" SeaState_5="0.5" SeaState_6="0.3"/&gt;
            &lt;TargetSeaStateDatum Type="FISHING_VESSEL" SeaState_0="1" SeaState_1="1"
            SeaState_2="0.96" SeaState_3="0.8" SeaState_4="0.75" SeaState_5="0.7"
            SeaState_6="0.5"/&gt; &lt;/TargetSeaStateSet&gt; &lt;/RadarLookupEnvironment&gt;
            &lt;VisualLookupEnvironment Name="normal vis data"&gt; &lt;VisualAttenuationDatum
            VeryClear="8e-5" Clear="2e-4" LightHaze="5e-4" Haze="1e-3" Mist="2e-3" Fog="4e-3"/&gt;
            &lt;TargetVisibilitySet UnknownType="0.12"&gt; &lt;TargetVisibilityDatum Type="CARRIER"
            Visibility="0.2"/&gt; &lt;TargetVisibilityDatum Type="FRIGATE" Visibility="0.2"/&gt;
            &lt;TargetVisibilityDatum Type="SUBMARINE" Visibility="0.12"/&gt;
            &lt;TargetVisibilityDatum Type="FISHING_VESSEL" Visibility="0.16"/&gt;
            &lt;/TargetVisibilitySet&gt; &lt;TargetSeaStateSet UnknownType="1"&gt;
            &lt;TargetSeaStateDatum Type="FRIGATE" SeaState_0="1" SeaState_1="1" SeaState_2="1"
            SeaState_3="1" SeaState_4="1" SeaState_5="0.95" SeaState_6="0.9"/&gt;
            &lt;TargetSeaStateDatum Type="CARRIER" SeaState_0="1" SeaState_1="1" SeaState_2="1"
            SeaState_3="1" SeaState_4="1" SeaState_5="1" SeaState_6="0.95"/&gt;
            &lt;TargetSeaStateDatum Type="SUBMARINE" SeaState_0="1" SeaState_1="1" SeaState_2="0.8"
            SeaState_3="0.75" SeaState_4="0.7" SeaState_5="0.5" SeaState_6="0.3"/&gt;
            &lt;TargetSeaStateDatum Type="FISHING_VESSEL" SeaState_0="1" SeaState_1="1"
            SeaState_2="0.9" SeaState_3="0.8" SeaState_4="0.75" SeaState_5="0.7"
            SeaState_6="0.5"/&gt; &lt;/TargetSeaStateSet&gt; &lt;LightLevelDatum Daylight="1"
            Dusk="0.4" MoonlitNight="0.3" DarkNight="0.05"/&gt; &lt;/VisualLookupEnvironment&gt;
            &lt;MADLookupEnvironment Name=""&gt; &lt;PredictedRangeSet&gt; &lt;PredictedRangeDatum
            Type="SUBMARINE" PredictedRange="1000"/&gt; &lt;PredictedRangeDatum
            Type="FISHING_VESSEL" PredictedRange="1200"/&gt; &lt;/PredictedRangeSet&gt;
            &lt;/MADLookupEnvironment&gt; </computeroutput>
        </para>
        <warning id="NO_DEFAULT_WARNING">
          <para>For most lookup tables <application>ASSET</application> will cease processing if a
            value is not provided for a particular vessel type (with the exception of <link
              linkend="LookupMADSensor">MAD</link> sensors where <application>ASSET</application>
            assumes that the target is not detectable via MAD). Providing a default value allows
              <application>ASSET</application> processing to continue, albeit with a suboptimal
            value. In normal use of <application>ASSET</application> you will have a clear idea of
            what participant types are involved and will create the table accordingly. The fact that
              <application>ASSET</application> stops when it encounters a participant type which
            hasn't been represented in the lookup tables acts in your favour here, since it reminds
            you to enter that data. Still, there may be occasions where a particularly complex
            scenario requires many participant types and you can't be bothered to populate parts of
            the lookup table which are insignificant to your tactical problem - fall back on the
              <guilabel>UnknownType</guilabel> values in these circumstances. </para>
        </warning>
      </sect1>
      <sect1 id="tut_fill_scenario_file">
        <title>Completing the scenario file</title>
        <para>Now we will complete the scenario definition.</para>
        <para>Next insert the first fishing boat. Put the cursor into the
            <guilabel>Participants</guilabel> element, select <guilabel>Add child</guilabel> from
          the <guilabel>Elements</guilabel> tab and double-click on <guilabel>Surface</guilabel> to
          insert a surface vessel. Fill out the surface vessel name and category to denote it as a
          fishing boat of <computeroutput>Green</computeroutput> (neutral) force. Give this fishing
          vessel an <guilabel>id</guilabel> of <computeroutput>55</computeroutput> - so we can use
          it in our search behaviour later. Also give it an initial location of 25.5 degrees North
          and 53.5 degrees East. Lastly give it some manoeuvring characteristics; as shown in the
          screenshot below (note that we haven&apos;t had to set any radiated characteristics for
          the fishing vessel - they aren&apos;t needed for the lookup sensor model). <figure
            float="0">
            <title>First fishing vessel</title>
            <mediaobject>
              <imageobject>
                <imagedata fileref="figures/lookup_tutorial1.gif"/>
              </imageobject>
            </mediaobject>
          </figure></para>
        <para>Next we&apos;ll give the fishing vessel a behaviour - wandering around an origin.Put
          the cursor on <guilabel>RadiatedCharacteristics</guilabel> and the select
            <guilabel>Waterfall</guilabel> from the <guilabel>Insert</guilabel> elements tab. <link
            linkend="attribute_name">Name</link> it something like "fisherman behaviour", set to be
            <link linkend="attribute_isAlive">Alive</link>, and that it should Stay Alive, then
          click onto the <guilabel>Add child</guilabel> tab and select <guilabel>Wander</guilabel>.
          Configure the <guilabel>Wander</guilabel> behaviour so that the fishing vessel wanders out
          to a limit of 40 miles from <computeroutput>25.5 North, 54 East</computeroutput>, at a
          speed of 6 knots and a height of <computeroutput>0</computeroutput> metres. </para>
        <para>Next duplicate the fishing vessel, to create our second vessel. Omit the id (so that
          ASSET automatically gives it an id), use a new name and a slightly different start
          location ( <computeroutput>25.6 degrees North and 53.3 degrees East</computeroutput>).
          Lastly produce another fishing boat with location of <computeroutput>25.4 degrees North
            and 53.2 degrees East</computeroutput>. </para>
        <para>That&apos;s the fishing boats done. Now move on to the helo. Collapse the third
          fishing boat, select it, then select <guilabel>Helo</guilabel> from the
            <guilabel>Append</guilabel> tab of the <guibutton>Elements</guibutton> toolbox. Name the
          helo as <computeroutput>Helo_1</computeroutput>. Set the category of the helo, and then
          it&apos;s initial status, as below <figure float="0">
            <title>Helo status</title>
            <mediaobject>
              <imageobject>
                <imagedata fileref="figures/lookup_tutorial5.gif"/>
              </imageobject>
            </mediaobject>
          </figure></para>
        <para/>
        <para> Next give the helo <guilabel>Optic Lookup</guilabel> and <guilabel>Radar
            Lookup</guilabel> sensors. These sensors are setup using a set of common attributes
          explained <link linkend="lookup_basics">earlier in the Modelling Guide</link>. Configure
          the <guilabel>Optic</guilabel> sensor as in the following screenshot. <figure float="0">
            <title>Helo Eyesight sensor</title>
            <mediaobject>
              <imageobject>
                <imagedata fileref="figures/lookup_tutorial2.gif"/>
              </imageobject>
            </mediaobject>
          </figure>Of significance, the helo crew scan the ocean every 10 seconds, after a target is
          detected the helo must close to 80% of the detection range and wait for 20 seconds to
          elapse before the target is classified. Next configure the radar sensor as in the
          following screenshot: <figure float="0">
            <title>Helo Radar sensor</title>
            <mediaobject>
              <imageobject>
                <imagedata fileref="figures/lookup_tutorial3.gif"/>
              </imageobject>
            </mediaobject>
          </figure>As you can see from the radar characteristics it&apos;s <guilabel>Classification
            Range Factor</guilabel> and <guilabel>Identification Range Factor</guilabel> are both
          zero, with the effect that the radar is unable to make the transition from
            <emphasis>detected</emphasis> to either <emphasis>classified</emphasis> or
            <emphasis>identified</emphasis>. </para>
        <para>Lastly we must set the behaviour of the helo - until we have detection state-aware
          behaviours we will instruct the helo to wander around the search area but detour to
          investigate any targets of interest, as in the following screenshot: <figure float="0">
            <title>Helo behaviours</title>
            <mediaobject>
              <imageobject>
                <imagedata fileref="figures/lookup_tutorial6.gif"/>
              </imageobject>
            </mediaobject>
          </figure></para>
        <para>After the behaviours come the final helo characteristics, the radiated energy and
          movement characteristics. For the purposes of our analysis we will not declare any
          radiated energy from the helo, but we will supply its movement characteristics, as shown
          below. <figure float="0" id="lookup_helo_chars">
            <title>Helo characteristics</title>
            <mediaobject>
              <imageobject>
                <imagedata fileref="figures/lookup_tutorial8.gif"/>
              </imageobject>
            </mediaobject>
          </figure></para>
      </sect1>
      <sect1 id="tut_create_control_file">
        <title>Creating the control file</title>
        <para>Lastly we just need to create the control file to run through the scenario, much as we
          did <link linkend="tutorial_create_control">earlier</link> in the tutorial. Configure the
          control file to run for 6 hours, outputting position to a Debrief Replay file, as follows:
            <figure float="0">
            <title>Lookup tutorial control file</title>
            <mediaobject>
              <imageobject>
                <imagedata fileref="figures/lookup_tutorial7.gif"/>
              </imageobject>
            </mediaobject>
          </figure></para>
      </sect1>
      <sect1 id="tut_running_through_scenario">
        <title>Running through the scenario</title>
        <para>So, now we&apos;re ready to run through the scenario. Navigate to your
            <application>ASSET</application> installation directory and type <filename>asset
            lookup_tutorial_scenario.xml lookup_test_control.xml </filename>. Because we've elected
          for a 5-second step time it will take a couple of minutes to run, but hang on &amp; it
          will still appear. <application>ASSET</application> will conduct the run, and leave your
          output file in this directory. </para>
      </sect1>
      <sect1 id="tut_analyse_results">
        <title>Analysing the results</title>
        <para>The only output requested for the run was the <application>Debrief</application> track
          file. Open <application>Debrief</application> and then load your
            <filename>res.rep</filename> data file. You will see the three fishermen together with
          the investigating helo. Experiment with switching <link
            linkend="attribute_record_positions">record decisions</link> on to find greater detail
          in the helo behaviour. </para>
      </sect1>
    </chapter>
    <chapter id="userguide_force_prot">
      <title>Modelling Force Protection</title>
      <sect1 id="force_prot_intro">
        <title>Introduction</title>
        <para>This portion of the <application>ASSET</application> tutorial will lead you through
          the design and creation of <application>ASSET</application> files suitable for analysis in
          a helicopter-based Force Protection scenario. Modelling and analysing the scenario will be
          conducted using the following steps: <orderedlist>
            <listitem>
              <para>Define problem</para>
            </listitem>
            <listitem>
              <para>Define environment</para>
            </listitem>
            <listitem>
              <para>Define participants and their sensors &amp; behaviours</para>
            </listitem>
            <listitem>
              <para>Create scenario file describing problem</para>
            </listitem>
            <listitem>
              <para>Create file to control running of ASSET</para>
            </listitem>
            <listitem>
              <para>Run through scenario</para>
            </listitem>
            <listitem>
              <para>Analyse scenario results</para>
            </listitem>
          </orderedlist></para>
        <para>So, we'll start off by talking through the problem and the analysis requirement then
          skim through creating the scenario/control files. You won't need a lot of guidance in
          creating the data files after all of the previous experience in this tutorial.</para>
      </sect1>
      <sect1 id="force_prot_define">
        <title>Define the problem</title>
        <para>The problem being addressed in this use of <application>ASSET</application> is that of
          a Merlin HM Mk1 performing force protection duties around ships of a task force. The helo
          conducts visual identification (without an EO device) of small vessels considered a
          potential threat to the force. In addition to analysing the search and identification task
          undertaken by the helo this scenario will additionally consider the effects of an unknown
          small vessel carrying a surface-to-air missile (SAM) with hostile intentions against the
          helo. We will need to consider the following: <itemizedlist>
            <listitem>
              <para>Is the likelihood of the helo being shot down related to the time of day, sea
                state, or atmospheric conditions?</para>
            </listitem>
            <listitem>
              <para>On average, for a given set of environmental conditions what proportion of the
                set of small vessels will be identified before the helo comes under fire from the
                hostile participant. </para>
            </listitem>
          </itemizedlist></para>
        <para>So we will perform multiple runs through a scenario containing a blue helo, multiple
          green fishing vessels and a single red fishing vessel. If the helo enters SAM range of the
          fishing vessel whilst in sight of the fishing vessel we will assume an attack happens and
          halt the scenario at that point ( <xref linkend="obs_proximity_detection_observer"/>).
          Otherwise each scenario will run for one hour ( <xref linkend="obs_time_observer"/> ). For
          each scenario we may want a track plot ( <xref linkend="obs_track_plot"/>), and Debrief
          replay files ( <xref linkend="mod_DebriefReplayObserver"/>).We will also want to keep a
          record of how many fishing vessels were successfully identified ( <xref
            linkend="obs_detection_observer"/>) </para>
      </sect1>
      <sect1 id="force_prot_define_env">
        <title>Define the environment</title>
        <para>This investigation will take place in a rectangular area of around 1600 square
          nautical miles. The <link linkend="optic_light">light</link> levels will vary from
          daylight to moonlit night, the <link linkend="optic_attenuation">atmospheric
            attenuation</link> from very clear to fog, and the <link linkend="optic_sea_state">sea
            states</link> from 1 through to 6. </para>
      </sect1>
      <sect1 id="force_prot_define_parts">
        <title>Define the participants, their sensors and behaviours</title>
        <para>The participants modelled will be a single helicopter and multiple fishing vessels. </para>
        <sect2>
          <title>Helicopter</title>
          <para>The helicopter will have the manoeuvering characteristics used in the lookup
            scenario example <link linkend="lookup_helo_chars">earlier</link>. It will be equipped
            with <link linkend="mod_lookup_radar">radar</link> and <link
              linkend="mod_lookup_eyesight">optic</link> sensors. </para>
          <para>The helicopter behaviour will be comprise a <link linkend="behaviour_Waterfall"
              >waterfall</link> of tiered behaviours. The lowest-priority behaviour will be to <link
              linkend="mod_wander">Wander</link> around the area of interest. The next higher
            priority will be to conduct a <link linkend="mod_ladder_search">ladder-search</link>.
            Highest of all will be the <link linkend="behaviour_investigate">investigate</link>
            behaviour, configured such that the helo attempts to <link linkend="lookup_definitions"
              >Identify</link> each fishing vessel. </para>
          <para>Lastly the helo is given its radiated and movement charateristics.</para>
        </sect2>
        <sect2>
          <title>Aggressive fishing vessel</title>
          <para>The first fishing vessel to be described will be the agressive fishing vessel
            carrying the SAM. This fishing vessel has an optic sensor and follows a <link
              linkend="mod_rectangle_wander">Rectangle Wander</link> (inside its <link
              linkend="behaviour_Waterfall">Waterfall</link> container) behaviour through the area
            of interest. </para>
        </sect2>
        <sect2>
          <title>Non-agressive fishing vessel</title>
          <para>Multiple instances of the non-agressive fishing vessel will be created to represent
            the standard fishing vessels occupying the area of interest. This fishing vessel
            requires no sensor and only uses the <link linkend="mod_rectangle_wander">Rectangle
              Wander</link> behaviour described above. </para>
        </sect2>
      </sect1>
      <sect1 id="force_prot_create_scenario">
        <title>Create the scenario file</title>
        <para>Hopefully the past parts of this tutorial, the guidance recorded above, and the
          analyst&apos;s scenario definition file will enable to you construct the scenario. A copy
          of the scenario is recorded below anyway. </para>
        <example>
          <title>Scenario file for Force Protection analysis</title>
          <programlisting>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
            &lt;Scenario Created="2001-12-12T12:23:00" Name="some test scenario"
				StartTime="2001-12-12T12:23:00"
				xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
				xsi:noNamespaceSchemaLocation="file:///d:/dev/Asset/src/schemas/ASSET.xsd"&gt;
            &lt;StepTime Units="seconds" Value="15"/&gt; &lt;Environment Name="PROT_ENV"
				AtmosphericAttenuation="CLEAR" SeaState="1"/&gt; &lt;Participants&gt; &lt;Helo
				Name="HELO_ALPHA" id="1" MonteCarloTarget="false"&gt; &lt;Category
				Environment="AIRBORNE" Force="BLUE" Type="HELICOPTER"/&gt; &lt;SensorFit&gt;
            &lt;OpticLookupSensor Name="Eyesight" VDR="0.16" MRF="1.05" CRF="0.8" IRF="0.4"
				id="444"&gt; &lt;TBDO Units="seconds" Value="10"/&gt; &lt;CTP Units="seconds"
				Value="20"/&gt; &lt;ITP Units="seconds" Value="20"/&gt;
            &lt;/OpticLookupSensor&gt; &lt;RadarLookupSensor Name="The radar" VDR="0.04"
				MRF="1.2" CRF="0" IRF="0" K="9200" id="555"&gt; &lt;TBDO Units="seconds"
				Value="11"/&gt; &lt;CTP Units="seconds" Value="0"/&gt; &lt;ITP Units="seconds"
				Value="0"/&gt; &lt;/RadarLookupSensor&gt; &lt;/SensorFit&gt; &lt;Status
				Course="55" Fuel="99"&gt; &lt;Location&gt; &lt;relativeLocation&gt; &lt;North
				Units="nm" Value="0"/&gt; &lt;East Units="nm" Value="0"/&gt; &lt;Height
				Units="ft" Value="500"/&gt; &lt;/relativeLocation&gt; &lt;/Location&gt;
            &lt;Speed Units="kts" Value="140"/&gt; &lt;/Status&gt; &lt;Waterfall Name="Go
				and do a couple of dips" IsActive="true" &gt; &lt;Investigate
				Name="Find fishermen" DetectionLevel="Identified" IsActive="true"&gt;
            &lt;TargetType&gt; &lt;Type Name="FISHING_VESSEL"/&gt; &lt;/TargetType&gt;
            &lt;/Investigate&gt; &lt;LadderSearch Name="First ladder search"
				LadderAxis="90"&gt; &lt;StartPoint&gt; &lt;relativeLocation&gt; &lt;North
				Units="nm" Value="0"/&gt; &lt;East Units="nm" Value="0"/&gt; &lt;Height
				Units="ft" Value="500"/&gt; &lt;/relativeLocation&gt; &lt;/StartPoint&gt;
            &lt;TrackSpacing Units="nm" Value="10"/&gt; &lt;LegLength Units="nm"
				Value="40"/&gt; &lt;/LadderSearch&gt; &lt;Wander Name="Stay in patrol area"&gt;
            &lt;Range Units="nm" Value="20"/&gt; &lt;Location&gt; &lt;relativeLocation&gt;
            &lt;North Units="nm" Value="0"/&gt; &lt;East Units="nm" Value="0"/&gt;
            &lt;/relativeLocation&gt; &lt;/Location&gt; &lt;Speed Units="kts"
				Value="40"/&gt; &lt;Height Units="nm" Value="0"/&gt; &lt;/Wander&gt;
            &lt;/Waterfall&gt; &lt;RadiatedCharacteristics/&gt;
            &lt;HeloMovementCharacteristics FuelUsageRate="0.0001" Name="RAW
				CHARACTERISTICS" DefaultTurnRate="3"&gt; &lt;MinSpeed Units="m/s"
				Value="0"/&gt; &lt;MaxSpeed Units="m/s" Value="200"/&gt; &lt;AccelerationRate
				Units="m/s/s" Value="4"/&gt; &lt;DecelerationRate Units="m/s/s" Value="2"/&gt;
            &lt;MinHeight Units="m" Value="10"/&gt; &lt;MaxHeight Units="m"
				Value="300"/&gt; &lt;DefaultClimbRate Units="m/s" Value="6"/&gt;
            &lt;DefaultDiveRate Units="m/s" Value="40"/&gt; &lt;DefaultClimbSpeed
				Units="m/s" Value="40"/&gt; &lt;DefaultDiveSpeed Units="m/s" Value="60"/&gt;
            &lt;/HeloMovementCharacteristics&gt; &lt;/Helo&gt; &lt;Surface
				Name="SAM_FISHER" MonteCarloTarget="false"&gt; &lt;Category
				Environment="SURFACE" Force="RED" Type="FISHING_VESSEL"/&gt; &lt;SensorFit&gt;
            &lt;OpticLookupSensor Name="Eyesight" VDR="0.16" MRF="1.05" CRF="0.8" IRF="0.4"
				id="444"&gt; &lt;TBDO Units="seconds" Value="10"/&gt; &lt;CTP Units="seconds"
				Value="20"/&gt; &lt;ITP Units="seconds" Value="20"/&gt;
            &lt;/OpticLookupSensor&gt; &lt;/SensorFit&gt; &lt;Status Course="22"
				Fuel="22"&gt; &lt;Location&gt; &lt;relativeLocation&gt; &lt;North Units="nm"
				Value="5"/&gt; &lt;East Units="nm" Value="5"/&gt; &lt;/relativeLocation&gt;
            &lt;/Location&gt; &lt;Speed Units="m/s" Value="16"/&gt; &lt;/Status&gt;
            &lt;Waterfall Name="Do some stuff" IsActive="true" &gt;
            &lt;RectangleWander Name="just wander around my area"&gt; &lt;Area&gt;
            &lt;TopLeft&gt; &lt;relativeLocation&gt; &lt;North Units="nm" Value="40"/&gt;
            &lt;East Units="nm" Value="40"/&gt; &lt;/relativeLocation&gt; &lt;/TopLeft&gt;
            &lt;BottomRight&gt; &lt;relativeLocation&gt; &lt;North Units="nm"
				Value="0"/&gt; &lt;East Units="nm" Value="0"/&gt; &lt;/relativeLocation&gt;
            &lt;/BottomRight&gt; &lt;/Area&gt; &lt;Speed Units="m/s" Value="6"/&gt;
            &lt;Height Units="m" Value="0"/&gt; &lt;/RectangleWander&gt; &lt;/Waterfall&gt;
            &lt;RadiatedCharacteristics/&gt; &lt;SurfaceMovementCharacteristics
				FuelUsageRate="0.006" Name="2"&gt; &lt;MinSpeed Units="m/s" Value="2"/&gt;
            &lt;MaxSpeed Units="m/s" Value="18"/&gt; &lt;AccelerationRate Units="m/s/s"
				Value="12"/&gt; &lt;DecelerationRate Units="m/s/s" Value="12"/&gt;
            &lt;TurningCircle Units="m" Value="600"/&gt;
            &lt;/SurfaceMovementCharacteristics&gt; &lt;/Surface&gt; &lt;Surface
				Name="GENERIC_FISHER" MonteCarloTarget="false"&gt; &lt;Category
				Environment="SURFACE" Force="GREEN" Type="FISHING_VESSEL"/&gt;
            &lt;SensorFit/&gt; &lt;Status Course="22" Fuel="22"&gt; &lt;Location&gt;
            &lt;relativeLocation&gt; &lt;North Units="nm" Value="4"/&gt; &lt;East
				Units="nm" Value="3"/&gt; &lt;/relativeLocation&gt; &lt;/Location&gt; &lt;Speed
				Units="m/s" Value="16"/&gt; &lt;/Status&gt; &lt;Waterfall Name="Fishing vessel
				behaviour" IsActive="true" &gt; &lt;RectangleWander Name="just
				wander around my area"&gt; &lt;Area&gt; &lt;TopLeft&gt;
            &lt;relativeLocation&gt; &lt;North Units="nm" Value="40"/&gt; &lt;East
				Units="nm" Value="40"/&gt; &lt;/relativeLocation&gt; &lt;/TopLeft&gt;
            &lt;BottomRight&gt; &lt;relativeLocation&gt; &lt;North Units="nm"
				Value="0"/&gt; &lt;East Units="nm" Value="0"/&gt; &lt;/relativeLocation&gt;
            &lt;/BottomRight&gt; &lt;/Area&gt; &lt;Speed Units="m/s" Value="6"/&gt;
            &lt;Height Units="m" Value="0"/&gt; &lt;/RectangleWander&gt; &lt;/Waterfall&gt;
            &lt;RadiatedCharacteristics/&gt; &lt;SurfaceMovementCharacteristics
				FuelUsageRate="0.006" Name="2"&gt; &lt;MinSpeed Units="m/s" Value="2"/&gt;
            &lt;MaxSpeed Units="m/s" Value="18"/&gt; &lt;AccelerationRate Units="m/s/s"
				Value="12"/&gt; &lt;DecelerationRate Units="m/s/s" Value="12"/&gt;
            &lt;TurningCircle Units="m" Value="600"/&gt;
            &lt;/SurfaceMovementCharacteristics&gt; &lt;/Surface&gt; &lt;/Participants&gt;
            &lt;/Scenario&gt; </programlisting>
        </example>
      </sect1>
      <sect1 id="force_prot_create_control">
        <title>Create the control file</title>
        <para>The control file is more challenging for this scenario than previous ones, we&apos;ve
          a fairly complex sensitivity analysis to support, together with producing a
          wider-than-previous range of participants. Its production is broken down into the three
          parts handling generating the <link linkend="multi_scen_gen">multiple scenarios</link>,
          generating the <link linkend="multi_part_gen">multiple random fishing vessels</link>
          within each scenario, and specifying the <link linkend="mod_observers">observers</link>
          which will control and observe the running scenarios. </para>
        <sect2>
          <title>Multi Scenario Generator</title>
          <para>The multi-scenario generator is configured to produce the required number of
            scenarios, with an indicated maximum number of permutations of each scenario <link
              linkend="G_VARIANCE">variance</link>. This max number of permutations is roughly
            calculated as the number of scenario runs requested divided by the product of the number
            of permutations allowed by the variances. After this header information the set of
            variances themselves are recorded. According to the analyst&apos;s problem statement
            there are variances to be defined: for atmospheric attenuation, sea state and light
            level. Each of these is implemented as a Choice variance where we supply a list of
            optional values to choose; though note that the Range variance could have been used for
            the sea-state variable. </para>
        </sect2>
        <sect2>
          <title>Multi Participant Generator</title>
          <para>The multi-participant generator is used to both give some randomness to the fishing
            vessel start positions and to create the series of fishing vessels representing the
            dense fishing area. First we will define the participant variance for the SAM-carrying
            fisherman. We provide the name of the scenario-file participant we are going to vary (
              <computeroutput>SAM_FISHER</computeroutput> in this case), and then indicate how many
            permutations of this participant are required (1). We then vary the initial location,
            course and speed. Next we specify the participant variance for the non-SAM carrying
            fishing vessel. Again we name the scenario participant we are varying (
              <computeroutput>SAM_FISHER</computeroutput>), and indicate how many permutations we
            require (49 to make a total number of 50 fishing vessels). Again we cary the initial
            location, course and speed. </para>
        </sect2>
        <sect2>
          <title>Observers</title>
          <para>Lastly we specify the observers for the scenario, comprising <link
              linkend="tut_fp_cont_obs">controlling</link> observers and <link
              linkend="tut_fp_recording_obs">recording</link> observers. </para>
          <sect3 id="tut_fp_cont_obs">
            <title>Controlling Observers</title>
            <para>These observers stop the scenario when a particular condition occurs. The two stop
              conditions for this analysis are the time limit (see <xref linkend="obs_time_observer"
              />) and the aircraft being shot down. We model the aircraft being shot down through
              stopping the scenario when the SAM-carrying fishing vessel is in visual contact with
              the helo and within weapons range (see <xref
                linkend="obs_proximity_detection_observer"/>). </para>
          </sect3>
          <sect3 id="tut_fp_recording_obs">
            <title>Recording Observers</title>
            <para>There are two thrusts to recording the output of this scenario analysis: to obtain
              an understanding of the whole batch of runs, and to be able to drill-down into the
              detail of particular runs. Working in reverse order, we retain individual run results
              by specifying either an observer producing a <link linkend="mod_DebriefReplayObserver"
                >track file</link> in <application>Debrief</application> replay format or one
              producing a <link linkend="obs_track_plot">single graphic image</link>. </para>
            <para>The batch recorders used for this analysis are specified such that the analysis
              Measures of Effectiveness ( <emphasis>whether the aircraft was shot down</emphasis>,
              and <emphasis>how many targets were identified</emphasis>) may be supported. The <link
                linkend="obs_final_state">Final State observer</link> is configured to record
              per-case results summarised as a <link linkend="obs_batch_collation">frequency
                list</link> - indicating to us how many scenarios of each permutation ended with
              helo-splashing versus time out. Secondly we use a <link
                linkend="obs_detection_observer">Detection Observer</link> configured to record how
              many fishing vessels were <link linkend="lookup_definitions">identified</link> by the
              helo. Per case processing is switched on again, so that our output results are matched
              against the variables of interest. </para>
            <para>The final control file is supplied below. <example>
                <title>Control file for Force Protection analysis</title>
                <programlisting>&lt;?xml version="1.0" encoding="UTF-8"?&gt;
                  &lt;!-- edited with XMLSPY v5 rel. 4 U (http://www.xmlspy.com) by Ian Mayo
						(PlanetMayo Ltd) --&gt; &lt;ScenarioController
						xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
						xsi:noNamespaceSchemaLocation="file:///d:/dev/Asset/src/schemas/ASSET.xsd"
						OutputDirectory="c:/temp/asset_test_output/force_prot2" RandomSeed="32"&gt;
                  &lt;ScenarioGenerator Filename="force_prot_res2"&gt; &lt;MultiScenarioGenerator
						NameTemplate="force_output4" Number="500" MaxPerms="100"&gt;
                  &lt;VarianceList&gt; &lt;Variance name="sea_state" id="//Environment"&gt;
                  &lt;Attribute name="SeaState"&gt; &lt;Choice&gt; &lt;Value value="1"/&gt;
                  &lt;Value value="2"/&gt; &lt;Value value="3"/&gt; &lt;Value value="4"/&gt;
                  &lt;Value value="5"/&gt; &lt;Value value="6"/&gt; &lt;/Choice&gt;
                  &lt;/Attribute&gt; &lt;/Variance&gt; &lt;Variance name="haze"
						id="//Environment"&gt; &lt;Attribute name="AtmosphericAttenuation"&gt;
                  &lt;Choice&gt; &lt;Value value="VERY_CLEAR"/&gt; &lt;Value value="CLEAR"/&gt;
                  &lt;Value value="LIGHT_HAZE"/&gt; &lt;Value value="HAZE"/&gt; &lt;Value
						value="MIST"/&gt; &lt;Value value="FOG"/&gt; &lt;/Choice&gt; &lt;/Attribute&gt;
                  &lt;/Variance&gt; &lt;Variance name="light_level" id="//Environment"&gt;
                  &lt;Attribute name="LightLevel"&gt; &lt;Choice&gt; &lt;Value
						value="DAYLIGHT"/&gt; &lt;Value value="DUSK"/&gt; &lt;Value
						value="MOON_NIGHT"/&gt; &lt;/Choice&gt; &lt;/Attribute&gt; &lt;/Variance&gt;
                  &lt;/VarianceList&gt; &lt;/MultiScenarioGenerator&gt;
                  &lt;MultiParticipantGenerator&gt; &lt;ParticipantVariance name="SAM_FISHER"
						number="1"&gt; &lt;Variance name="SAM_North" id="Status/Location//North"&gt;
                  &lt;Attribute name="Value"&gt; &lt;Range min="0" max="40" step="0.01"/&gt;
                  &lt;/Attribute&gt; &lt;/Variance&gt; &lt;Variance name="SAM_East"
						id="Status/Location//East"&gt; &lt;Attribute name="Value"&gt; &lt;Range min="0"
						max="40" step="0.01"/&gt; &lt;/Attribute&gt; &lt;/Variance&gt; &lt;Variance
						name="SAM_Speed" id="Status/Speed"&gt; &lt;Attribute name="Value"&gt; &lt;Range
						min="3" max="8" step="0.5"/&gt; &lt;/Attribute&gt; &lt;/Variance&gt;
                  &lt;Variance name="SAM_Speed" id="Status"&gt; &lt;Attribute name="Course"&gt;
                  &lt;Range min="0" max="360" step="1"/&gt; &lt;/Attribute&gt; &lt;/Variance&gt;
                  &lt;Variance name="SAM_wander_corner" id="/RectangleWander/Area/TopLeft"&gt;
                  &lt;LocationArea RandomModel="Uniform"&gt; &lt;WorldArea&gt; &lt;TopLeft&gt;
                  &lt;relativeLocation&gt; &lt;North Units="nm" Value="41"/&gt; &lt;East
						Units="nm" Value="39"/&gt; &lt;/relativeLocation&gt; &lt;/TopLeft&gt;
                  &lt;BottomRight&gt; &lt;relativeLocation&gt; &lt;North Units="nm"
						Value="39"/&gt; &lt;East Units="nm" Value="41"/&gt; &lt;/relativeLocation&gt;
                  &lt;/BottomRight&gt; &lt;/WorldArea&gt; &lt;/LocationArea&gt; &lt;/Variance&gt;
                  &lt;/ParticipantVariance&gt; &lt;ParticipantVariance name="GENERIC_FISHER"
						number="4"&gt; &lt;Variance name="GENERIC_NORTH" id="Status/Speed"&gt;
                  &lt;Attribute name="Value"&gt; &lt;Range min="3" max="8" step="0.5"/&gt;
                  &lt;/Attribute&gt; &lt;/Variance&gt; &lt;Variance name="GENERIC_NORTH"
						id="/Status/Location/relativeLocation/North"&gt; &lt;Attribute name="Value"&gt;
                  &lt;Range min="0" max="40" step="0.01"/&gt; &lt;/Attribute&gt;
                  &lt;/Variance&gt; &lt;Variance name="GENERIC_EAST"
						id="/Status/Location/relativeLocation/East"&gt; &lt;Attribute name="Value"&gt;
                  &lt;Range min="0" max="40" step="0.01"/&gt; &lt;/Attribute&gt;
                  &lt;/Variance&gt; &lt;Variance name="GENERIC_COURSE" id="Status"&gt;
                  &lt;Attribute name="Course"&gt; &lt;Range min="0" max="360" step="1"/&gt;
                  &lt;/Attribute&gt; &lt;/Variance&gt; &lt;/ParticipantVariance&gt;
                  &lt;/MultiParticipantGenerator&gt; &lt;/ScenarioGenerator&gt;
                  &lt;ObserverList&gt; &lt;TimeObserver Name="1 Hour Scenario" Active="true"&gt;
                  &lt;Duration Units="hours" Value="2.5"/&gt; &lt;/TimeObserver&gt;
                  &lt;StopOnProximityDetectionObserver Name="HELO detected within SAM range"
						Active="true"&gt; &lt;Target&gt; &lt;TargetType&gt; &lt;Type
						Name="HELICOPTER"/&gt; &lt;/TargetType&gt; &lt;/Target&gt; &lt;Watch&gt;
                  &lt;TargetType&gt; &lt;Type Name="FISHING_VESSEL"/&gt; &lt;Type Name="RED"/&gt;
                  &lt;/TargetType&gt; &lt;/Watch&gt; &lt;Range Units="nm" Value="2.5"/&gt;
                  &lt;/StopOnProximityDetectionObserver&gt; &lt;TrackPlotObserver Name="get a
						track plot" Active="true" show_positions="false"&gt; &lt;GridDelta Units="nm"
						Value="5"/&gt; &lt;/TrackPlotObserver&gt; &lt;DebriefReplayObserver Name="keep
						tracks" Active="false" record_decisions="false" record_detections="false"
						record_positions="true" file_name="all_tracks"/&gt; &lt;DebriefReplayObserver
						Name="watch helo decisions" Active="false" record_decisions="true"
						record_detections="false" record_positions="false"
						file_name="helo_decisions"&gt; &lt;SubjectToTrack&gt; &lt;Type
						Name="HELICOPTER"/&gt; &lt;/SubjectToTrack&gt; &lt;/DebriefReplayObserver&gt;
                  &lt;DetectionObserver Name="per-case inter-scenario detections achieved"
						Active="true" DetectionLevel="Identified"&gt; &lt;Target&gt; &lt;TargetType&gt;
                  &lt;Type Name="FISHING_VESSEL"/&gt; &lt;Type Name="GREEN"/&gt;
                  &lt;/TargetType&gt; &lt;/Target&gt; &lt;Watch&gt; &lt;TargetType&gt; &lt;Type
						Name="HELICOPTER"/&gt; &lt;/TargetType&gt; &lt;/Watch&gt; &lt;BatchCollator
						Active="true" PerCase="true" OnlyBatchReporting="true"
						CollationMethod="AVERAGE"/&gt; &lt;/DetectionObserver&gt;
                  &lt;FinalStateObserver Name="Why did they stop" Active="true"&gt;
                  &lt;BatchCollator Active="true" PerCase="true" CollationMethod="FREQUENCY_LIST"
						OnlyBatchReporting="true"/&gt; &lt;/FinalStateObserver&gt;
                  &lt;ElapsedTimeObserver Name="How long did each case run for - and what where
						they called" Active="true"&gt; &lt;BatchCollator Active="true" PerCase="true"
						CollationMethod="ITEMIZED_LIST" OnlyBatchReporting="true"/&gt;
                  &lt;/ElapsedTimeObserver&gt; &lt;ElapsedTimeObserver Name="How long did it run
						for - and what where they called" Active="false"&gt; &lt;BatchCollator
						Active="true" PerCase="false" CollationMethod="ITEMIZED_LIST"
						OnlyBatchReporting="true"/&gt; &lt;/ElapsedTimeObserver&gt;
                  &lt;/ObserverList&gt; &lt;/ScenarioController&gt; </programlisting>
              </example></para>
          </sect3>
        </sect2>
      </sect1>
      <sect1 id="force_prot_run_scenario">
        <title>Run through the scenario</title>
        <para>Ok, run through the scenario by typing <filename>ASSET.BAT scenario_file.xml
            control_file.xml</filename>. <application>ASSET</application> will now generate,
          metamorphosize, and store to disk the new scenario permutations. It will run through them,
          and finally output the results of the inter-scenario observers. <tip>
            <para>When running through the Force Protection with scenario with large number of
              scenario (500) and participant (49) permutations <application>ASSET did trip over with
                a <guilabel>Memory limit exceeded</guilabel> warning during the scenario generation
                stage. Currently the scenarios are all generated in memory, and the volume used can
                exceed the <application>ASSET</application> default (256Mb). Increasing the maximum
                memory allocated to 512Mb prevented the error occurring, with memory consumption
                dropping to normal levels once <application>ASSET</application> started executing
                the scenarios. The memory limit is increased by editing the
                  <filename>ASSET.BAT</filename> batch file to change <filename>-Xmx256m</filename>
                to <filename>-Xmx512M</filename>
              </application>
            </para>
          </tip></para>
      </sect1>
      <sect1 id="force_prot_analyse_scenario">
        <title>Analyse the scenario results</title>
        <para>Hey, I&apos;m not the analyst. Here goes anyway: <orderedlist>
            <listitem>
              <para>Examine the inter-scenario observer output files, attempting to identify
                patterns of results across the range of permutations of variables of
                interest.</para>
            </listitem>
            <listitem>
              <para>Where you&apos;re not aware of the cause for a particular pattern in the data
                view load one of that permutation&apos;s track plot images into Internet Explorer
                and try to recognise what happened. If all doesn&apos;t come clear load the
                data-file into Debrief and step through the scenario. Optionally you can re-run the
                scenario requesting successively more detailed recording.</para>
            </listitem>
            <listitem>
              <para>If you don&apos;t need to run through the full set of permutations to
                investigate a particular pattern, create a control-file and run this itself within
                  <application>ASSET</application> against a particular scenario file generated for
                the permutation of interest. </para>
            </listitem>
            <listitem>
              <para>Obtain a report for last time you did this work. Change the date and re-order
                the conclusions. Submit to the staffing loop...</para>
            </listitem>
          </orderedlist></para>
      </sect1>
    </chapter>
    <chapter id="userguide_sm_search">
      <title>Submarine Search</title>
      <sect1 id="subsearch_intro">
        <title>Introduction</title>
        <para>The example scenarios presented so far largely focus on helicopter based tactics -
          with interactions dominated by detections from above-water sensors. This section of the
          tutorial will switch to the other significant area of detection modelling within
            <application>ASSET</application>, focussing on <link linkend="mod_detection">underwater
            acoustic sensors</link>. </para>
        <para>The tactical problem to be considered entails an SSN performing a series of movements
          and active sonar transmissions (as shown in the diagram <link linkend="SubSearchDiag"
            >below</link>) with the intention of influencing an opposing force SSK. Airborne
          participants will provide radar coverage, though this will be modelled at a level above
          the MPAs themselves; through a detection performance observer. </para>
        <para> The analysis of the problem will include variation in the SSN's prescripted search
          plan and the behaviour (aggressive vs evasive) of the SSK. We will start off by performing
          a series of <link linkend="user_command_line_monte">command-line Monte Carlo</link>
          simulations to work through a large number of permutations, then further investigate
          scenarios of interest using the <link linkend="userguide_workbench">Workbench</link> GUI
          environment. </para>
        <para>Since the SSN in this scenario is not responsive to the SSKs, we are able to use <link
            linkend="parallel_planes">parallel planes</link> processing - our scenario will contain
          the single blue searcher but many red ssks all operating in <link
            linkend="parallel_planes">parallel planes</link> unaware of each other. This will both
          bring performance advantages, and allow the multiple SSK permutations to be monitored
          within a single <link linkend="userguide_workbench">Workbench</link> session. <figure
            float="0" id="SubSearchDiag">
            <title>Overview of submarine search problem</title>
            <mediaobject>
              <imageobject>
                <imagedata fileref="figures/SubmarineSearchTutorialDiag.gif"  width="100%" scalefit="1"/>
              </imageobject>
            </mediaobject>
          </figure></para>
      </sect1>
      <sect1>
        <title id="SM_SCENARIO_FILE">Preparing the data</title>
        <sect2>
          <title>Environment</title>
          <para>Start off by <link linkend="tutorial_create_scenario">generating the scenario
              file</link>, inserting the desired environment at the start (note that the
            environmental tables used for lookup sensors are not required here - no lookup sensors
            are required for the scenario). I suggest a low sea-state and relatively clear
            atmosphere to start with to encourage interaction. </para>
        </sect2>
        <sect2>
          <title>Participants</title>
          <sect3>
            <title>SSK</title>
            <para>Next come with the participants, starting with the SSK. Give it a name
              (obviously), something like <emphasis>Target</emphasis> should do. Next comes its
                <link linkend="RECHARGE_NOTE">charge rate</link>, I found
                <computeroutput>0.005</computeroutput> gave realistic enough results. Lastly
              indicate that the SSK is a Monte Carlo Target - to receive special <link
                linkend="parallel_planes">parallel planes</link> processing. Then comes the
                <guilabel>Category</guilabel>, which will indicated that this a
                <computeroutput>SUBSURFACE, RED, SUBMARINE</computeroutput>. </para>
            <para>The sensor fit represents the next data to record, for our example we'll equip the
              SSK with <guilabel>Broadband Sensor</guilabel> and <guilabel>Active
                Intercept</guilabel> sensors (giving the broadband sensor an aperture of 130
              degrees). For the initial status of the ssk place it using a <guilabel>Relative
                Location</guilabel> at (0nm,0nm,-60m), with a course of 0, fuel level of 100, and
              speed of 10 kts. Before we take on the compex task of defining the SSK behaviour we'll
              finish off the simpler components. So, give the SSK a
                <guilabel>RadiatedCharacteristics</guilabel> item, and insert
                <guilabel>SSKBroadband</guilabel>
              <link linkend="mod_acoustic_rad">radiated noise</link> dataset. Specify a Base Noise
              Level of 70, and a Snort Noise Level of 120. </para>
            <sidebar>
              <para>As a reminder, the SSK has two broadband <link linkend="mod_acoustic_rad"
                  >radiated noise</link> levels: a quiet one for when running deep on main motor
                (battery-powered) and a noisier one for when snorting at periscope depth. </para>
            </sidebar>
            <para>Lastly indicate the submarine's movement characteristics, using the
                <guilabel>SSMovementCharacteristics</guilabel> structure. I used the following
              values: </para>
            <para>
              <programlisting>
                &lt;SSMovementCharacteristics FuelUsageRate="0.0002" Name="SSN Movement"&gt;
                &lt;MinSpeed Units="kts" Value="1"/&gt;
                &lt;MaxSpeed Units="kts" Value="12"/&gt;
                &lt;AccelerationRate Units="kt/s" Value="1"/&gt;
                &lt;DecelerationRate Units="kt/s" Value="1"/&gt;
                &lt;MinHeight Units="m" Value="-300"/&gt;
                &lt;MaxHeight Units="m" Value="-18"/&gt;
                &lt;DefaultClimbRate Units="ft/s" Value="1"/&gt;
                &lt;DefaultDiveRate Units="ft/s" Value="1"/&gt;
                &lt;TurningCircle Units="m" Value="600"/&gt;
                &lt;/SSMovementCharacteristics&gt;
              </programlisting>
            </para>
            <para>The last item to be entered for the SSK is its behaviour. In support of our
              analysis objectives we're going to supply the SSK with two alternate behaviours. Our
              Monte Carlo processing can then provide target instances demonstrating either an
              Aggressive or Evasive posture. The two high level behaviours are contained in a <link
                linkend="behaviour_switch">Switch</link> container. So, start off by inserting a
                <link linkend="behaviour_switch">Switch</link> object immediately below the SSK
              status. Give the switch a name, and indicate the detault behaviour to be executed (
                <computeroutput>1</computeroutput> will do). Each of the two behaviours will be
              contained in a <link linkend="behaviour_Waterfall">Waterfall</link> structure. We'll
              start off with the Evasive behaviour. So insert the Waterfall structure, and give it a
              name of something like <computeroutput>Evasive</computeroutput>. Into the Waterfall we
              will insert the hierarchical SSK evade behaviour, starting with the highest priority.
              In this instance we will make the SSK maintaining it's batteries at a safe level the
              highest priority behaviour, so insert <guilabel>SSKRecharge</guilabel> fom from
                <guilabel>Elements</guilabel> tab. Name it as <computeroutput>Emergency
                Snort</computeroutput>, set the minimum level as 5 and the safe level as 15, and
              indicate that the SSK will snort at a speed of 4 knots. </para>
            <para>So, when the SSK battery level reaches dangerously low levels it will conduct a
              snort however hostile its current environment may be. Obviously it won't conduct a
              very long snort - just enought to keep the SSK operational.</para>
            <para>The next component of the SSK evasive behaviour will cover the evasion itself.
              Beneatch the <guilabel>SSK Recharge</guilabel> component insert an
                <guilabel>Evade</guilabel> component, naming it <computeroutput>Avoid
                SSN</computeroutput>. Configure this behaviour to continue evading for a period of
              30 minutes, at a depth of 80m (that's a height of -80m by the way), and at a speed of
              6 knots. Lastly, indicate that the SSK will be evading all
                <computeroutput>Blue</computeroutput> targets. To specify Blue force participants as
              targets, put the cursor into the <guilabel>TargetType</guilabel> element, and
              double-click <guilabel>Type</guilabel> from the <guilabel>Add child</guilabel> tab of
              the <guilabel>Elements</guilabel> toolbox. Within the <guilabel>Type</guilabel>
              element select <computeroutput>BLUE</computeroutput> from the drop-down list. </para>
            <para>Beneath the <computeroutput>Evade</computeroutput> behaviour insert another
                <computeroutput>SSK Recharge</computeroutput> behaviour, to represent normal snort
              behaviour. This snort behaviour will be conducted whenever the battery level falls
              below 30%, on which the SSK will attempt to snort back up to 100%, though not when in
              contact with any blue targets. Set the <computeroutput>EvadeThese</computeroutput>
              type to <computeroutput>BLUE</computeroutput> as you did with the
                <computeroutput>Evade</computeroutput> behaviour above. </para>
            <para>The lowest-level component of the Evasive SSK behaviour is the general patrol
              behaviour. This is represented through a <link linkend="mod_rectangle_wander"
                >Rectangle Wander</link> element, inserted from the <guilabel>Add child</guilabel>
              tab of the <guilabel>Elements</guilabel> toolbox, giving a sensible name, a speed of 6
              knots, and a height of -80m (representing a depth of 80m). By default the top left and
              bottom right corners are specified using Short-Location elements (which take lat and
              long expressed as decimal degrees) . We will be specifying them using
              Relative-Location elements, whcih express the location as ranges from the origin.
              Start to replace the existing elements by selecting the first
                <computeroutput>shortLocation</computeroutput>, then double-click on
                <computeroutput>relativeLocation</computeroutput> from the
                <guilabel>Insert</guilabel> tab of the <guilabel>elements</guilabel> toolbar. Now
              you can delete the existing <computeroutput>shortLocation</computeroutput> item. And
              repeat this process for the other 3 corner references (no, it isn't as long-whinded in
              real-life as when written down). Set the top-left coordinates to 60nm North, 0nm East,
              and bottom-right to 0nm North, 120Nm West. And that's the SSK evasive behaviour
              complete. </para>
            <para>Next comes the SSK aggressive behaviour. Now, my definition of this behaviour is
              very similar to the evasive behaviour. So start off by making a duplicate of the
              previous <computeroutput>Evasive</computeroutput> Waterfall component, renaming it to
                <computeroutput>Aggressive</computeroutput>. Within this component both of the
                <computeroutput>SSK Recharge</computeroutput> and the <computeroutput>Rectangle
                Wander</computeroutput> behaviours remain unchanged, but we will exchange the
                <computeroutput>Evade</computeroutput> behaviour for an
                <computeroutput>Intercept</computeroutput> one. Delete the
                <computeroutput>Evade</computeroutput> behaviour first, then insert an
                <computeroutput>Intercept</computeroutput> behaviour from the
                <guilabel>Insert</guilabel> tab of the <guilabel>Elements</guilabel> toolbox.
              Configure the Intercept behaviour to allow speed changes and specify that the SSK will
              attempt to intercept Blue submarines <footnote>
                <para>Sharp-eyed techno-geek readers will have noticed that we could have
                  represented these two behaviours complete. We could have created a single SSK
                  behaviour containing the two recharge and single rectangle wander elements, with
                  the <link linkend="behaviour_switch">Switch</link> between the two recharges. This
                  Switch could then have contained the two alternate Evade and <link
                    linkend="intercept_behaviour">Intercept</link> behaviours. Whilst this structure
                  would represent our two behaviours in a more compact form, it could ultimately
                  hinder the amount of changes which could be made between the two - having two
                  completely separate behaviour waterfalls provides the greatest room for changes.
                </para>
              </footnote>. And that is the SSK complete. </para>
            <para>Next comes the SSN. Start off by giving it a category of <computeroutput>Blue,
                Subsurface, Submarine</computeroutput>. Then provide it with a sensor-fit comprising
                <computeroutput>Active Broadband Sensor</computeroutput> (source level:148,
              aperture:130, working: false <footnote>
                <para>we are setting the working attribute to false to indicate that the sonar isn't
                  transmitting at the start of the scenario - other elements of the SSN behaviour
                  set working to true to indicate that the sensor is transmitting on active.</para>
              </footnote>). Also provide a standard <link linkend="mod_medium_bb">Broadband</link>
              Sensor (aperture:130), and <link linkend="mod_medium_nb">Narrowband</link> sensor
              (steady time 10 minutes). For the SSN initial status give it a full fuel load <footnote>
                <para>yes, fuel level is irrelevant for an SSN in ASSET, it is provided for
                  completeness</para>
              </footnote>, and indicate that it is heading North at 10 knots. Make it's initial
              location 1/2 Nm North &amp; East of the origin, at a depth of 60m (using a
                <computeroutput>relativeLocation</computeroutput>). </para>
            <para>And now on to the SSN behaviour. Insert a
                <computeroutput>Waterfall</computeroutput> element beneath the existing status
              element, naming it something like <computeroutput>SSN Search</computeroutput>. The
              first item in the ssn search is a <link linkend="mod_working_transit">Working
                Transit</link>, which allows a participant to conduct a transit whilst making
              regular stops to perform a particular activity. So, insert the <computeroutput>Working
                Transit</computeroutput> behaviour into the SSN's parent
                <computeroutput>Waterfall</computeroutput> behaviour, configuring it with a name
              ("sweeping active transit"), number of stops to make (8), indicate that the SSN should
              not repeat the transit on completion (Looping:false), and to transit at 12 knots.
              Define the path to travel through as passing through the following sets of coordinates
              expressed as relative locations in North, East nautical miles: (0,0) (30,10) (50,25)
              (55,40). Into the Working Transit insert the following behaviour (activity) performed
              at 8 points during the transit: <figure float="0" id="SubActiveTXDiag">
                <title>Submarine active transmissions</title>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="figures/TutSSNWorkingTransit.gif"/>
                  </imageobject>
                </mediaobject>
              </figure></para>
            <para>After the sweeping curve of active transmissions (as shown in the <link
                linkend="SubSearchDiag">initial diagram</link>) the submarine the moves into it's
              passive search area, so insert a <link linkend="mod_wander">Wander</link> behaviour
              representing the passive search. Configure the Wander behaviour with a range of 20
              nautical miles, centre the behaviour on the relative location 15nm North, 40Nm East,
              at a depth of 100m and speed of 12 knots. Next for the SSN comes it's definition of
              radiated noise - set the broadband base noise level to be 70 decibels. Finally
              configure the SSN movement parameters, as shown below:
              <programlisting>&lt;SSMovementCharacteristics FuelUsageRate="0" Name="SSN Movement"&gt;
                &lt;MinSpeed Units="kts" Value="1"/&gt;
                &lt;MaxSpeed Units="kts" Value="28"/&gt;
                &lt;AccelerationRate Units="kt/s" Value="1"/&gt;
                &lt;DecelerationRate Units="kt/s" Value="1"/&gt;
                &lt;MinHeight Units="m" Value="-300"/&gt;
                &lt;MaxHeight Units="m" Value="-18"/&gt;
                &lt;DefaultClimbRate Units="ft/s" Value="1"/&gt;
                &lt;DefaultDiveRate Units="ft/s" Value="1"/&gt;
                &lt;TurningCircle Units="m" Value="600"/&gt;
                &lt;/SSMovementCharacteristics&gt;</programlisting>.
              And that's the end of the SSN definition, now onto the MPS definition. </para>
            <para>Start off by inserting a <computeroutput>Fixed Wing</computeroutput> participant
              to the scenario, naming it <computeroutput>MPA</computeroutput> - or similar. Then
              configure the MPA as <computeroutput>Airborne, Blue, MPA</computeroutput>. Provide the
              MPA with a <link linkend="mod_lookup_radar">radar</link> configured as below: <figure
                float="0" id="MPARadarParams">
                <title>MPA Radar parameters</title>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="figures/TutSubSearchMPARadar.gif"/>
                  </imageobject>
                </mediaobject>
              </figure></para>
            <para>Then go on to set the initial status of the MPA; full fuel tanks, located at a
              position 30nm North, 90nm east, travelling on 060 degrees at 90 knots. The MPA
              behaviour model is quite simple for this scenario, performing a rectangle wander
              within the corners 60Nm North, 60Nm East, 0Nm North, 120Nm East, travelling at 110
              knots at an altitude of 2000 metres. Lastly enter the Fixed Wing Movement
              Characteristics :
              <programlisting>&lt;FixedWingMovementCharacteristics FuelUsageRate="0.00001" Name="MPA Flight" DefaultTurnRate="2"&gt;
                &lt;MinSpeed Units="kts" Value="70"/&gt;
                &lt;MaxSpeed Units="kts" Value="260"/&gt;
                &lt;AccelerationRate Units="kt/s" Value="5"/&gt;
                &lt;DecelerationRate Units="kt/s" Value="7"/&gt;
                &lt;MinHeight Units="m" Value="1000"/&gt;
                &lt;MaxHeight Units="m" Value="6000"/&gt;
                &lt;DefaultClimbRate Units="ft/s" Value="3"/&gt;
                &lt;DefaultDiveRate Units="ft/s" Value="10"/&gt;
                &lt;DefaultClimbSpeed Units="kts" Value="90"/&gt;
                &lt;DefaultDiveSpeed Units="kts" Value="120"/&gt;
                &lt;/FixedWingMovementCharacteristics&gt;</programlisting></para>
            <para>And that completes the MPA description, after which we move on to the control file
              in the next section.</para>
          </sect3>
        </sect2>
      </sect1>
      <sect1>
        <title id="SM_SCENARIO_CONTROL_FILE">Control file</title>
        <para>The control file for this problem will comprise scenario generation instructions (to
          allow us to run through a batch of simulations), participant generation instructions (to
          allow us to simulataneously model a number of ssk targets running in <link
            linkend="parallel_planes">parallel planes</link>), and observer definitions used to
          record analysis outputs and to terminate the scenario. </para>
        <para>Start off by creating the empty control file, as we did <link
            linkend="tutorial_create_control">earlier</link>. Set the <link
            linkend="ScenarioOutputDirectory">output directory</link> to somewhere tidy like
            <filename>c:\asset\sm_output</filename> Insert your scenario generator, inserting a
            <computeroutput>MultiScenarioGenerator</computeroutput> into it. Within the
          multi-scenario generator set the <link linkend="ScenarioNameTemplate">name template</link>
          to something useful like <computeroutput>sm_search</computeroutput>, which will become the
          prefix for the automatically generated scenarios. Also set the <link
            linkend="ScenarioNumber">number</link> of scenarios to be generated - start off with
            <computeroutput>10</computeroutput> for now. Also into the Multi Scenario Generator
          element we have to specify what we want <application>ASSET</application> to vary. For this
          tactical problem we will experiment with how frequently the searching SSN conducts active
          transmissions during the sweeping curve, by varying the number of stops on the <link
            linkend="mod_working_transit">Working Transit</link>. Do this by inserting a single
          Variance element, itself containing an <computeroutput>Attribute</computeroutput> element
          into Multi-scenario generator variances list. The list may have sample elements already,
          just ditch them if there are. Now configure this variance to indicate that it is the
            <computeroutput>WorkingTransit</computeroutput> element that we are going to modify, the
            <computeroutput>NumStops</computeroutput> is the name of the <link
            linkend="mod_gen_attribute">attribute</link> to modify within it, and that we want a
            <link linkend="mod_gen_range">range</link> of values between 3 and 12 provided (to
          represent the number of times the submarine will stop). <figure float="0">
            <title>Variance in submarine search</title>
            <mediaobject>
              <imageobject>
                <imagedata fileref="figures/SMSearchVariance.gif"/>
              </imageobject>
            </mediaobject>
          </figure></para>
        <para>Next we move onto the <link linkend="mod_multiple_participant">participant
            generation</link> element. Start off by inserting the
            <computeroutput>MultiParticipantGenerator</computeroutput> into the scenario generator.
          Configure this by indicating that we want <link linkend="mod_part_number">100
            targets</link> to be generated, and that the <link linkend="mod_part_name">participant
            name</link> begin with <computeroutput>TGT</computeroutput>. Note that we don't have to
          set the <computeroutput>inParallelPlanes</computeroutput> attribute here, since it is
          already defined ( <computeroutput>MonteCarloTarget = true</computeroutput>) for the SSK in
          the scenario file. We do, however, have to specify the variances to apply to the multiple
          SSKs. This is a two-stage process, first setting the general attributes to vary, and then
          specifying where ASSET should place the SSKs. The first variance to insert will vary the
          speed at which the SSK patrols - so the name is
          <computeroutput>SSK_Speed</computeroutput>, the id is
            <computeroutput>/RectangleWander/Speed</computeroutput>
          <footnote>
            <para>Which means: <variablelist>
                <varlistentry>
                  <term>/</term>
                  <listitem>
                    <para>At the end of the participant identifer (which gets prefixed to the id
                      before use) there is a trailing slash. Adding this second trailing slash means
                        <emphasis>descend as far as you like through the description of this
                        participant</emphasis>
                    </para>
                  </listitem>
                </varlistentry>
                <varlistentry>
                  <term>RectangleWander</term>
                  <listitem>
                    <para>Stop when you get to a RectangleWander behaviour</para>
                  </listitem>
                </varlistentry>
                <varlistentry>
                  <term>/Speed</term>
                  <listitem>
                    <para>Find the Speed element within the RectangleWander behaviour</para>
                  </listitem>
                </varlistentry>
              </variablelist></para>
          </footnote>, and we are varying the <computeroutput>Value</computeroutput> attribute
          between <computeroutput>3</computeroutput> and <computeroutput>8</computeroutput> in
            <computeroutput>0.5</computeroutput> knot steps. Next we are going to vary the initial
          course. So, add a new variance called <computeroutput>SSK_Course</computeroutput>, and
          give it the simple <guilabel>id</guilabel> of <computeroutput>Status</computeroutput>.
          Indicate that the we are going to vary the value of the <guilabel>Attribute</guilabel>
          name <computeroutput>Course</computeroutput> within the vessel status, providing values
          between <computeroutput>0</computeroutput> and <computeroutput>360</computeroutput> at
            <computeroutput>1</computeroutput> degree steps. </para>
        <para>The next item to vary is more significant to our particular analysis, varying the
          posture of the SSK. As you no doubt remember we stored the two mutually exclusive SSK
          behaviours in a <link linkend="behaviour_switch">Switch</link> construct. The Switch
          construct contained the index of which behaviour to activate. We are going to use a
          variance to randomly select one of these behaviours. So, insert a new
            <guilabel>Variance</guilabel> item titled <computeroutput>SSK Posture</computeroutput>
          with an XPath id of <computeroutput>Switch</computeroutput>. Next indicate that we are
          going to vary an <guilabel>Attribute</guilabel> through a <computeroutput>
            <link linkend="mod_gen_choice">Choice</link>
          </computeroutput> of values: <computeroutput>1</computeroutput> and
            <computeroutput>2</computeroutput>. </para>
        <para>Lastly we will define the area through which we want our series of SSKs to be placed.
          This is through use of a <link linkend="mod_gen_dist">ParticipantLocation</link>
          construct. Into this we define a <guilabel>WorldArea</guilabel> comprising top-left and
          bottom-right corners. The top-left (expressed in relative distances:
            <computeroutput>relativeLocation</computeroutput>) us at 60Nm North, 0Nm East and the
          bottom-right is at 0Nm North and 120Nm East. </para>
        <para>After the scenario generation instructions we move on to the
            <guilabel>ObserverList</guilabel>, which indicates which <link linkend="mod_referees"
            >referees</link>and <link linkend="mod_observers">observers</link> we want to monitor
          the running scenario. The observers we will use will record tracks to file for us, and
          stop the scenario after a set period. The first track recorder will be the <link
            linkend="obs_track_plot">Track Plot Observer</link>, used to give us a graphic plot of
          the tracks on completion. Configure the track plot observer to be
            <computeroutput>Active</computeroutput>, to show positions, give it a sensible filename,
          and ask for a grid to be placed over the image on completion (10Nm would seem about right
          for our scenario size). Also specify that
            <computeroutput>only_final_positions</computeroutput> should be provided (to avoid
          receiving a dense mass of target tracks). Next comes an observer used to create Debrief
          files covering the period: <link linkend="mod_DebriefReplayObserver">Debrief Replay
            Observer</link>. Indicate that you want this to record decisions and positions, but not
          detections - just to keep the volume of information down. </para>
        <para>To prevent the scenario from running on ad infinitum add a <link
            linkend="obs_time_observer">Time Observer</link>, configured to stop the scenario after
          36 hours. And that completes the control file. </para>
      </sect1>
      <sect1>
        <title>Running through the scenario</title>
        <sect2>
          <title>Quick-look in Workbench</title>
          <para>To get some quick feedback on how we've designed the scenario we will first run it
            through the <application>ASSET</application>
            <application>Workbench</application>
            <footnote>
              <para>This quick test will verify that our scenario and control files are valid and
                complete, and also highlight any glaring errors before we switch to batch
                processing.</para>
            </footnote>. So, start off by double-clicking on the <filename>workbench.exe</filename>
            application in your <application>ASSET</application> installation directory. </para>
          <para>Once the <application>Workbench has opened, initiate the <guilabel>Monte Carlo
                Loader</guilabel> form byclicking on the <inlinegraphic
                fileref="figures/MonteCarlo.gif" format="GIF"/> button from the
                <guilabel>File</guilabel> sub-toolbar of the <guilabel>Controls</guilabel> toolbar.
              The Monte Carlo loader will open. Into the <guilabel>Scenario file:</guilabel> box
              drag your submarine search scenario file, and into the <guilabel>Control
                file:</guilabel> box drag your control file. Next press the
                <guibutton>Generate</guibutton> button and watch the scenario generation progress
              reported before your very eyes (as below). </application>
            <figure float="0">
              <title>Scenario generation from Workbench</title>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="figures/SMSearchProgress.gif"/>
                </imageobject>
              </mediaobject>
            </figure></para>
          <para>On the <application>ASSET</application> plot you will also see the blue SSN and MPA,
            together with the 100 SSK targets. Open up the status panel for one of the SSKs near the
            SSN so that we can monitor what it's doing. Step forward a couple of times to allow the
            status to update, then examine what the SSK is currently doing (the line of text at the
            top of the panel). Due to the names we supplied for the behaviours this should contain a
            clue about whether this is an evasive or aggressive target. Now run the scenario forward
            on automatic and when the SSN starts it's all-sector active transmissions (when you see
            it change direction frequently) the SSK you are looking at should either turn to
            intercept or turn away. Good, that's the scenario checked. Now for the batch mode
            processing. </para>
        </sect2>
        <sect2>
          <title>Batch processing</title>
          <para>To perform the batch-mode processing I would copy the scenario and control files
            into the <application>ASSET</application> installation directory. Then open a command
            line console, and type <computeroutput>ASSET scenario.xml control.xml</computeroutput>.
              <application>ASSET</application> should now start processing the scenarios in batch
            mode, giving you the following results on the console. <figure float="0">
              <title>Monitoring batch processing</title>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="figures/SMSearchScreen.gif"/>
                </imageobject>
              </mediaobject>
            </figure></para>
          <para>Once the processing is complete you can load any of the <filename>.rep</filename>
            files into <application>Debrief</application>. Unfortunately the analysis problem under
            consideration here doesn't lend itself to statistical analysis. One of the best
            overviews is to quickly flick through some of the track plot images to recognise
            clusters of ssks (only possible if you set
              <computeroutput>only_show_final_positions</computeroutput>, else you just have a mush
            of overlapping tracks). </para>
        </sect2>
      </sect1>
    </chapter>
    <chapter id="userguide_eclipse">
      <title>Eclipse-based Workbench</title>
      <sect1 id="user_eclipse">
        <title>Introduction</title>
        <para>The <application>ASSET Workbench</application> is a graphical front-end to the
            <application>ASSET</application> modelling engine. Together with its integrated
            <application>Debrief</application> application it's able to support the full modelling
          lifecyle. <link linkend="mod_scenario_intro">Scenario</link> and <link
            linkend="mod_scenario_control">Control</link> files are edited and loaded into the
            <application>Workbench</application>, and then you step forward through the scenario.
          Graphical dialogs are provided to allow you to drill-down into the detailed attributes,
          settings, and behaviours of the scenario participants - giving you fine control and
          detailed understanding of a live simulation. The <application>Workbench</application>
          application makes extensive re-use of components developed for MWC's <ulink
            url="www.debrief.info">Debrief</ulink> application - particularly with regard to the
          graphical plot, property editing, and core units (distance, locations, areas). </para>
      </sect1>
      <sect1 id="user_workbench">
        <title>Workbench user interface</title>
        <para>The following diagram highlights the main areas of the
            <application>Workbench</application> user interface, though note that the screen
          elements are completely configurable - elements can be drag/dropped to any other location
          (including out of the application): <figure float="0">
            <title>Screenshot of Workbench application</title>
            <mediaobject>
              <imageobject>
                <imagedata fileref="figures/workbench_view.png"  width="100%" scalefit="1"/>
              </imageobject>
            </mediaobject>
          </figure><variablelist>
            <varlistentry>
              <term>Toolbar</term>
              <listitem>
                <para>Along the top of the <application>Workbench</application> user interface is
                  the toolbar. This toolbar supports file-based operations (such as save), and
                  geospatial operations (such as zoom-in, fit to window) for when a 2d geospatial
                  plot is being viewed - either when running live or in post-event analysis (via
                    <application>Debrief</application>). </para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>Time Controller</term>
              <listitem>
                <para>The time controller displays the current model time, and provides operations
                  to restart a scenario, play automatically or step forward a single step. The time
                  controller properties (available from the dropdown menu) allow the time-step sizes
                  to be adjusted.</para>
              </listitem>
            </varlistentry>
            <varlistentry id="ECLIPSE_PROPERTIES_WINDOW">
              <term>Properties Window</term>
              <listitem>
                <para>In the top-right of the screenshot is the properties window - which displays
                  editable properties for the currently selected object, regardless of where the
                  selection is (layer manager, gui, scenario controller).</para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>Plot</term>
              <listitem>
                <para>The right-hand side of the screen is dedicated to the Plot itself, a
                  2-dimensional snapshot view of the scenario. Double-clicking on a participant's
                  icon will open that participant in the properties window, and the <guilabel>Chart
                    Features</guilabel> sub-toolbar of the <guilabel>Controls</guilabel> toolbar
                  allows graphic items to be added to the plot (contours, grids, scales,
                  annotations. </para>
              </listitem>
            </varlistentry>
          </variablelist></para>
        <sect2 id="ScenarioController">
          <title>Scenario Controller</title>
          <para/>
        </sect2>
      </sect1>
    </chapter>
    <chapter id="user_factory">
      <title>Factory</title>
      <para>The ASSET Tactics Factory is an application used to create initial best-guess tactics
        for a defined tactical scenario. Whilst there is no expectation that the output of the ASSET
        Tactics Factory will provide a tactic suitable for direct use at sea, the application is
        capable of identifying the mathematically optimal <footnote>
          <para>Actually, whilst the genetic algorithm employed in the factory can deliver the
            mathematically optimal solution, it is better at identifying a near-optimal solution in
            a fraction of the time necessary for an exhaustive search.</para>
        </footnote> tactic for a particular problem. This optimal tactic can then be used as a
        starting point by the human tactician. </para>
      <para>
        <figure id="factory_flows">
          <title>Flow of information within ASSET Factory</title>
          <mediaobject>
            <imageobject>
              <imagedata fileref="figures/diagram_illustrating_genetic_alg.gif"  width="100%" scalefit="1"/>
            </imageobject>
          </mediaobject>
        </figure>
      </para>
      <para>As illustrated in <xref linkend="factory_flows"/>, three sets of data must be loaded
        prior to running: <variablelist>
          <varlistentry>
            <term>Base Scenario</term>
            <listitem>
              <para>This is the scenario used as a base template for the problem to be
                analysed</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>Observers</term>
            <listitem>
              <para>The list of observers provide two facilities: the provide the score necessary
                for quantitative analysis of a particular scenario (such as time to weapon release,
                % area searched), together with scenario control facilities (such as stop after 4
                hours running, or stop on weapon release).</para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>Parameters to vary</term>
            <listitem>
              <para>This is a list describing what to vary within the base scenario in each
                permutation. Each item identifies what parameter in the base scenario is to be
                varied, together with instructions in how to produce the new value (such as random
                integers between 0 and 360).</para>
            </listitem>
          </varlistentry>
        </variablelist></para>
    </chapter>
    <chapter id="userguide_workbench">
      <title>Custom Workbench (legacy)</title>
      <sect1 id="user_workbench_legacy">
        <title>Introduction</title>
        <para>The <application>ASSET Workbench</application> is a custom graphical front-end to the
            <application>ASSET</application> modelling engine. Scenario (and occasionally Control)
          files are loaded into the <application>Workbench</application>, and then you step forward
          through the scenario. Graphical dialogs are provided to allow you to drill-down into the
          detailed attributes, settings, and behaviours of the scenario participants - allowing (to
          a limited degree) interactive scenario design and modification to be performed. The
            <application>Workbench</application> application makes extensive re-use of components
          developed for MWC's <ulink url="www.debrief.info">Debrief</ulink> application -
          particularly with regard to the graphical plot, property editing, and core units
          (distance, locations, areas). <note>
            <para>The custom ASSET workbench was superceded in 2009 by the updated Eclipse-based
              workbench that integrates Debrief UI components with extensive Eclipse
              capabilities.</para>
          </note></para>
      </sect1>
      <sect1>
        <title>Workbench user interface</title>
        <para>The following diagram highlights the main areas of the
            <application>Workbench</application> user interface: <figure float="0">
            <title>Screenshot of Workbench application</title>
            <mediaobject>
              <imageobject>
                <imagedata fileref="figures/WorkbenchGUI.gif" width="100%" scalefit="1"/>
              </imageobject>
            </mediaobject>
          </figure><variablelist>
            <varlistentry>
              <term>Toolbar</term>
              <listitem>
                <para>In the top-left hand corner of the <application>Workbench</application>
                  interface is the toolbar. This comprises a series of toolbars, one of which (
                    <guilabel>Controls</guilabel>) contains its own series of toolbars. Lower
                  sections provide more detail on individual toolbar buttons. In addition to the
                    <guilabel>Controls</guilabel> toolbar, the <guilabel>Behaviours</guilabel> and
                    <guilabel>Vessels</guilabel> toolbars provide a library of behaviours and
                  vessels suitable for inclusion in a scenario. Drag a vessel onto the Plot to
                  create and position it, drag a Behaviour onto the Waterfall editor to add that
                  behaviour to the current vessel. </para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>Tote</term>
              <listitem>
                <para>The tote is located immediately below the toolbar, and displays the current
                  model time.</para>
              </listitem>
            </varlistentry>
            <varlistentry id="WORKBENCH_PROPERTIES_WINDOW">
              <term>Properties Window</term>
              <listitem>
                <para>Below the Tote is the properties window, a holder for a wide range of editor
                  panels - from the Layer Manager which shows all current data stored, through to
                  the vessel status viewer which shows the course, speed, depth (demanded and
                  current) for the selected participant, together with providing access to the
                  editable attributes of that participant - all in the tabbed properties
                  window.</para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>Plot</term>
              <listitem>
                <para>The right-hand side of the screen is dedicated to the Plot itself, a
                  2-dimensional snapshot view of the scenario. Double-clicking on a participant's
                  icon will open that participant in the properties window, and the <guilabel>Chart
                    Features</guilabel> sub-toolbar of the <guilabel>Controls</guilabel> toolbar
                  allows graphic items to be added to the plot (contours, grids, scales,
                  annotations. </para>
              </listitem>
            </varlistentry>
          </variablelist></para>
      </sect1>
      <sect1 id="manual_load_force_prot">
        <title>Loading Force Protection scenario</title>
        <para>In this section we'll re-use the Force Protection scenario described above, but gain a
          feel for the interaction of the participants by graphically viewing the evolving
          scenario.</para>
        <para>So, double-click on <filename>workbench.exe</filename> to open the
            <application>Workbench</application>. Almost immediately the ASSET Splash Screen ( <link
            linkend="Workbench_splash">below</link>) will display (significantly showing the build
          date of the current version in the lower right-hand corner), and a few seconds later the
            <application>Workbench</application> itself will be visible. <figure float="0"
            id="Workbench_splash">
            <title>Workbench splash screen</title>
            <mediaobject>
              <imageobject>
                <imagedata fileref="figures/WorkbenchSplash.gif" width="100%" scalefit="1"/>
              </imageobject>
            </mediaobject>
          </figure></para>
        <para>The <application>Workbench</application> is going to generate a number of targets on
          our behalf in this run, so start by opening the <guilabel>Monte Carlo loader</guilabel> by
          clicking on the <inlinegraphic fileref="figures/MonteCarlo.gif" format="GIF"/> button from
          the <guilabel>File</guilabel> sub-toolbar of the <guilabel>Controls</guilabel> toolbar.
          The Monte Carlo loader will open in the Properties Window, as shown below. <figure
            float="0" id="Workbench_MonteLoader">
            <title>Monte Carlo file loader</title>
            <mediaobject>
              <imageobject>
                <imagedata fileref="figures/WorkbenchMonteCarlo.gif" width="100%" scalefit="1"/>
              </imageobject>
            </mediaobject>
          </figure>As you can see, the Monte Carlo loader has labels indicating the Scenario and
          Control files, beneath this is a reporting window, and beneath this are the Import and
          Close buttons. The reporting window is provided to give you feedback during the
          potentially lengthy import/participant generation process. So, to start off with, drag and
          drop the scenario you created for the Force Protection exercise on to the
            <emphasis>Scenario file</emphasis> label. You will see the label get updated with the
          new filename, and the <guibutton>Import</guibutton> button become enabled. To just load
          this scenario as-is, you would click on the <guibutton>Import</guibutton> button, but we
          are just using the scenario as a template - wishing to create multiple instances of the
          Green friendly fishing vessel. So, drag the Force Protection control file onto the
            <emphasis>Control file:</emphasis> label. As you do this, the
            <guibutton>Import</guibutton> button will change to <guibutton>Generate</guibutton>,
          ackowledging that you no longer just want to import the scenarion, but wish to run it
          through the <link linkend="multi_part_gen">Multiple Participant Generator</link>. So,
          press the <guibutton>Generate</guibutton> button and you will see a scrolling set of
          messages grow in the reporting window ( <link linkend="WorkBenchMonteComplete"
            >below</link>), followed by the new participants appearing on the
            <guilabel>Plot</guilabel>. <figure float="0" id="WorkBenchMonteComplete">
            <title>Participant generation complete</title>
            <mediaobject>
              <imageobject>
                <imagedata fileref="figures/WorkbenchLoadedMonteCarlo.gif" width="100%" scalefit="1"/>
              </imageobject>
            </mediaobject>
          </figure></para>
        <tip>
          <para>Some of the steps performed during multiple participant generation can take 10s of
            seconds - if nothing else the scrolling messages provide you with an indication that
            yes, something is happening.</para>
        </tip>
      </sect1>
      <sect1 id="manual_stepping_forward">
        <title>Moving the scenario forward</title>
        <para>Now that our data is loaded, and we can see the dozens of participants on the plot,
          it's time to move foward. From the <guilabel>Controls</guilabel> toolbar, select the
            <guilabel>ASSET</guilabel> sub-toolbar. The five buttons on this toolbar operate as
          follows: <variablelist>
            <varlistentry id="STEP_BUTTON">
              <term>Step <inlinegraphic fileref="figures/VCRForward.gif" format="GIF"/>
              </term>
              <listitem>
                <para>perform a single step forward in the scenario, according to the <link
                    linkend="scenario_time_step">scenario time step</link>
                </para>
              </listitem>
            </varlistentry>
            <varlistentry id="RUN_BUTTON">
              <term>Run <inlinegraphic fileref="figures/VCRFastForward.gif" format="GIF"/>
              </term>
              <listitem>
                <para>run the scenario forward automatically, pausing briefly according to the <link
                    linkend="application_time_step">application time step</link> configured </para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term id="PAUSE_BUTTON">Pause <inlinegraphic fileref="figures/VCRPause.gif"
                  format="GIF"/>
              </term>
              <listitem>
                <para>suspend the automatic progression of the scenario</para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term id="RESTART_BUTTON">Restart <inlinegraphic fileref="figures/VCRBegin.gif"
                  format="GIF"/>
              </term>
              <listitem>
                <para>restart the scenario - returning all participants to their original location
                  and state</para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term id="EXIT_BUTTON">Exit <inlinegraphic fileref="figures/VCRStop.gif" format="GIF"
                />
              </term>
              <listitem>
                <para>exit the <application>ASSET Workbench</application>
                </para>
              </listitem>
            </varlistentry>
          </variablelist></para>
        <para>In the startup state as shown <link linkend="WorkBenchMonteComplete">above</link>, we
          can see all of the target vessels, but they all have the label
            <emphasis>inactive</emphasis> placed alongside them. The default plotting standard for
          participants is to represent them as a symbol annotated with a description of their
          current behaviour. Since the scenario hasn't moved forward yet
            <application>ASSET</application> does not know what each participant is doing. Pressing
          the <link linkend="STEP_BUTTON">Step</link> button once will move the scenario forward one
          step, and when redrawn the plot will correctly show the participant
          states.WorkbenchWithStates.gif <figure float="0" id="WorkBenchMonteAfterStep">
            <title>States shown after single step</title>
            <mediaobject>
              <imageobject>
                <imagedata fileref="figures/WorkbenchWithStates.gif" width="100%" scalefit="1"/>
              </imageobject>
            </mediaobject>
          </figure></para>
        <para>The high number of participants shown does make it difficult to view all of their
          states, but we will tidy that up later. If you press the <link linkend="STEP_BUTTON"
            >Step</link> button a few more times you will see the movement of the participants -
          with the faster-moving helo visible at the bottom-left of the plot. Now try clicking the
            <link linkend="RUN_BUTTON">Run</link> button, and see the scenario move forward in front
          of you - with the time being updated on the Tote. Now <link linkend="PAUSE_BUTTON"
            >Pause</link> the scenario to give us time to think. That's better. Also close the
            <guilabel>Monte Carlo Loader</guilabel> using its <guibutton>Close</guibutton> button to
          make more space in the <guilabel>properties window</guilabel>. </para>
      </sect1>
      <sect1 id="manual_plot_manipulation">
        <title>Manipulating the Plot</title>
        <para>So, before we start drilling down into the data in front of us, we're just going to
          tidy the plot. First select the <guilabel>View</guilabel> sub-toolbar of the
            <guilabel>Controls</guilabel> toolbar. This toolbar contains the following controls: <variablelist>
            <varlistentry id="REFRESH_BUTTON">
              <term>Refresh <inlinegraphic fileref="figures/repaint.gif" format="GIF"/>
              </term>
              <listitem>
                <para>Redraw the plot</para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term id="FIT_TO_WIN_BUTTON">Fit to window <inlinegraphic
                  fileref="figures/fit_to_win.gif" format="GIF"/>
              </term>
              <listitem>
                <para>Zoom out (or in) to ensure that all participants are displayed in as much
                  detail as possible</para>
              </listitem>
            </varlistentry>
            <varlistentry id="PAN_BUTTON">
              <term>Pan <inlinegraphic fileref="figures/drag.gif" format="GIF"/>
              </term>
              <listitem>
                <para>Left-click on the plot and drag to move around the view</para>
              </listitem>
            </varlistentry>
            <varlistentry id="RNG_BRG_BUTTON">
              <term>Range/Bearing <inlinegraphic fileref="figures/rng_brg.gif" format="GIF"/>
              </term>
              <listitem>
                <para>Left-click on the plot and drag to measure range and bearing between two
                  points - the results are shown at the bottom left of the
                    <application>Workbench</application> window </para>
              </listitem>
            </varlistentry>
            <varlistentry id="ZOOM_IN_BUTTON">
              <term>Zoom in <inlinegraphic fileref="figures/zoomin.gif" format="GIF"/>
              </term>
              <listitem>
                <para>Left-click on the plot and drag to select an area to zoom in on</para>
              </listitem>
            </varlistentry>
            <varlistentry id="ZOOM_OUT_BUTTON">
              <term>Zoom Out <inlinegraphic fileref="figures/zoomout.gif" format="GIF"/>
              </term>
              <listitem>
                <para>Click on this button to zoom the view out to cover approximately twice the
                  current area</para>
              </listitem>
            </varlistentry>
          </variablelist></para>
        <para>Start by clicking on the <link linkend="ZOOM_IN_BUTTON">zoom-in</link> button. If it's
          not already depressed it now will be. Now drag the cursor over the bottom left-hand
          quadrant of the plot containing the searching helicopter (or other quadrant if you have
          moved forward far enough). You should now see many fewer participants, and be able to read
          their status messages more clearly. Also experiment with clicking on the <link
            linkend="RNG_BRG_BUTTON">Range-Bearing tool</link> and measuring the range from the Helo
          to the nearest fishing vessel - as below: <figure float="0" id="WorkBenchRangeBearing">
            <title>Measuring Range and Bearing on the plot</title>
            <mediaobject>
              <imageobject>
                <imagedata fileref="figures/WorkbenchRngBrg.gif" width="100%" scalefit="1"/>
              </imageobject>
            </mediaobject>
          </figure></para>
        <para>Now click on the <link linkend="PAN_BUTTON">Pan</link> tool and drag the mouse on the
            <guilabel>Plot</guilabel> - this will move your view of the plot. Next, click on the
            <link linkend="ZOOM_OUT_BUTTON">zoom-out</link> button to zoom out on the plot, and
          lastly click on the <link linkend="FIT_TO_WIN_BUTTON">Fit to Window</link> to zoom out to
          view the full dataset. </para>
        <para>Next, we will briefly examine the <guilabel>Chart Features</guilabel> toolbar. This
          toolbar provides a set of non-tactical graphic items which may be added to the plot: <variablelist>
            <varlistentry id="SCALE_BUTTON">
              <term>Scale <inlinegraphic fileref="figures/scale.gif" format="GIF"/>
              </term>
              <listitem>
                <para>Place a scale on the plot - with either automatic or manual limits</para>
              </listitem>
            </varlistentry>
            <varlistentry id="GRID_BUTTON">
              <term>Grid <inlinegraphic fileref="figures/grid.gif" format="GIF"/>
              </term>
              <listitem>
                <para>Place a user-configured grid on the plot. World-scale units (degrees, minutes)
                  have a Greenwich Meridian/Equator origin, whereas local area units (miles, metres)
                  have an origin at the bottom-left of the plot.</para>
              </listitem>
            </varlistentry>
            <varlistentry id="VPF_BUTTON">
              <term>VPF Layers <inlinegraphic fileref="figures/vpf.gif" format="GIF"/>
              </term>
              <listitem>
                <para>Place a configurable set of VPF layers on the plot. (see <xref
                    linkend="VPF_LAYERS"/>) </para>
              </listitem>
            </varlistentry>
            <varlistentry id="COAST_BUTTON">
              <term>Coastline <inlinegraphic fileref="figures/coast.gif" format="GIF"/>
              </term>
              <listitem>
                <para>Because of storage constraints <application>ASSET</application> is distributed
                  by default with a coarse global vectored coastline - suitable for providing the
                  user with a very rough feel of their location. </para>
              </listitem>
            </varlistentry>
            <varlistentry id="ETOPO_BUTTON">
              <term>ETOPO Gridded Data <inlinegraphic fileref="figures/etopo.gif" format="GIF"/>
              </term>
              <listitem>
                <para>Show global gridded depth data on the plot, optionally with contours. (see
                    <xref linkend="ETOPO_LAYERS"/>) </para>
              </listitem>
            </varlistentry>
          </variablelist></para>
        <para>Try clicking on the <link linkend="GRID_BUTTON">Grid</link> or <link
            linkend="SCALE_BUTTON">Scale</link> button to add either to the plot. On clicking each
          one it's attributes will become editable in the <guilabel>Properties Window</guilabel>. </para>
        <note id="VPF_LAYERS">
          <para>The VPF dataset (Vector Product Format) is a set of vectored data showing physical
            and human features. Significantly it contains global depth contours at 200, 600, 1000.
            2000, 4000, 6000, and 8000 meter intervals. It also contains political boundaries
            together with significant roads and railways. The unclassified dataset is obtained from
            the US NIMA organisation, arriving on 4 CD-ROMS. <figure float="0" id="WorkBenchVPF">
              <title>Sample of VPF data</title>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="figures/VPF_Layer9.gif"/>
                </imageobject>
              </mediaobject>
            </figure></para>
        </note>
        <note id="ETOPO_LAYERS">
          <para>ETOPO is a global gridded depth/height database at 2 minute intervals. ETOPO is also
            obtained from NIMA, as well as within the full <application>ASSET</application>
            installation set. <figure float="0" id="WorkBenchEtopo">
              <title>Sample of ETOPO data</title>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="figures/etopo_data.gif"/>
                </imageobject>
              </mediaobject>
            </figure></para>
        </note>
      </sect1>
      <sect1 id="manual_scenario_interrogation">
        <title>Interrogating the scenario</title>
        <para>In addition to editing the plot within the <application>Workbench</application> we are
          also able to drill down into the content of the scenario. Two methods are typically used
          to start interrogating the scenario - <link linkend="WORKBENCH_DOUBLE_CLICK"
            >double-clicking on the plot</link> and using the <link
            linkend="WORKBENCH_LAYER_MANAGER">Layer Manager</link>. </para>
        <sect2 id="WORKBENCH_DOUBLE_CLICK">
          <title>Double-clicking the plot</title>
          <para>The <application>Workbench</application> should currently be showing a zoomed in
            portion of the total tactical area, possibly with one or more scales or grids added from
            the previous step. If you're not looking at a view like this, just perform a <link
              linkend="FIT_TO_WIN_BUTTON">Fit to Window</link>, then zoom in to cover around 25% of
            the tactical area ensuring that you have included our Blue searcher. Hover the mouse
            over the blue helo and a tooltip will appear detailing the name of the participant, its
            current hierarchy of behaviours and current status. In the sample scenario loaded for
            the tutorial the tooltip text was: <computeroutput>HELO_ALPHA:Go and do a couple of
              dips:First ladder search:Performing ladder search:Heading for Point:2 21 degs 72 m_sec
              152m</computeroutput>. As you hover the mouse around the plot you will see the tooltip
            update to reflect the status of the nearest participant. If you right-click on an empty
            region of sea a popup-menu will appear. This menu contains options and commands used to
            change the format/presentation of the plot - attributes not directly related to any
            scenario participants. Alternatively, if you right-click on one of the participants then
            you will see the general commands at the bottom of the menu together with any specific
            to the current participant at the top (as shown below). The general trend of the popup
            menu is that each editable item has an entry titled "Edit <emphasis>xxx</emphasis>"
            which will open the property editor for that window, followed by a cascaded child menu
            containing directly editable attributes of that item. In the screenshot below we can see
            that the <emphasis>ShowContact</emphasis> attribute of <guilabel>HELO_ALPHA</guilabel>
            can be ticked (to switch the functionality on) if desired. <figure float="0"
              id="WorkBenchPopup">
              <title>Sample of popup menu in Workbench</title>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="figures/WorkbenchPopupMenu.gif"/>
                </imageobject>
              </mediaobject>
            </figure> If you single-click anywhere on the plot then the popup menu will dissappear.
            Finally, double-click on the blue helo, and its <link linkend="WORKBENCH_STATUS_EDITOR"
              >status editor</link> will appear in the <link linkend="WORKBENCH_PROPERTIES_WINDOW"
              >properties window</link>. </para>
        </sect2>
        <sect2 id="WORKBENCH_LAYER_MANAGER">
          <title>Layer Manager</title>
          <para>An alternative way of accessing the current scenario is through the Layer Manager.
            This window provides a tree-view of the currently loaded data. Open the Layer Manager by
            clicking on the <guilabel>Show Layer Manager</guilabel> icon ( <inlinegraphic
              fileref="figures/layer_mgr.gif" format="GIF"/>) from the <guilabel>File</guilabel>
            toolbar. <figure float="0" id="WorkBenchLayerMgr">
              <title>Workbench Layer Manager</title>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="figures/WorkbenchLayerMgr.gif"/>
                </imageobject>
              </mediaobject>
            </figure> In its startup view the Layer Manager provides a top-level view of the data
            collated into groups. In the example above the <guilabel>Chart Features</guilabel> group
            contains two items. Clicking on the key symbol to the left of the folder icon will open
            up that group and allow you to set the child items on/off or double-click to edit them.
            Of significance to this example the <guilabel>Scenario</guilabel> group contains 51
            items (participants). Right-clicking on the <guilabel>Scenario</guilabel> group provides
            access to the Scenario formatting options. Open the cascading menu titled <guilabel>Edit
              Scenario</guilabel>and clear the tick box labelled <guilabel>Show Activity</guilabel>.
            At last all of the vessel activity labels have dissappeared. </para>
          <para>Back to the Layer Manager, opening the <guilabel>Scenario</guilabel> group will show
            all of the participants listed by name. In the example scenario loaded the blue helo
              <guilabel>HELO_ALPHA</guilabel> is listed first. Right-clicking on each item provides
            the popup menu seen earlier, and double-clicking on each one opens it in the vessel
            status editor. </para>
        </sect2>
        <sect2 id="WORKBENCH_STATUS_EDITOR">
          <title>Vessel Editor</title>
          <para>So, at last we've go to the Vessel Editor itself. <figure float="0"
              id="WorkbenchVesselEditor">
              <title>Vessel Editor</title>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="figures/WorkbenchVesselStatusEditor.gif"/>
                </imageobject>
              </mediaobject>
            </figure>The editor itself is split into three zones. At the top is a line of text
            recording the current activity of the participant. In the centre are a series of graphic
            controls indicating the current and demanded vessel states (course, speed, depth, fuel
            level where applicable), and at the bottom are a series of buttons used to open further
            editors/monitors as follows. <variablelist>
              <varlistentry>
                <term>Status</term>
                <listitem>
                  <para>to view/modify the current <link linkend="vessel_status">vessel
                      status</link>
                  </para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term>Detections</term>
                <listitem>
                  <para>to view a waterfall display of sensor <link linkend="mod_detection"
                      >detections</link> (where bearing is provided by the sensor) </para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term>Noise Levels</term>
                <listitem>
                  <para>to view/modify the current <link linkend="mod_radiated_noise">radiated
                      noise</link> levels used in underwater detection modelling </para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term>Sensor</term>
                <listitem>
                  <para>To view the <link linkend="lookup_basics">detection components</link> of
                    in-contact sensors </para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term>Behaviour</term>
                <listitem>
                  <para>To view/modify the participant behaviour by drilling down through the <link
                      linkend="behaviour_Waterfall">Waterfall</link> of child behaviours </para>
                </listitem>
              </varlistentry>
              <varlistentry>
                <term>Movement</term>
                <listitem>
                  <para>To view/modify the <link linkend="mod_vessel_movement">movement
                      characteristics</link> specific to this participant </para>
                </listitem>
              </varlistentry>
            </variablelist></para>
          <sect3>
            <title>Status Editor</title>
            <para><figure float="0" id="WorkbenchStatusEditor">
                <title>Vessel Status Editor</title>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="figures/WorkbenchStatusEditor.gif"/>
                  </imageobject>
                </mediaobject>
              </figure>This panel shows the current (not demanded) course, speed, location and fuel
              level for this participant. Each of the values can be edited to change the vessel
              status - including moving it to some other location on the plot. </para>
          </sect3>
          <sect3 id="WorkbenchDetectionViewer">
            <title>Detection Viewer</title>
            <para><figure float="0">
                <title>Sensor Detection Viewer</title>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="figures/WorkbenchDetectionViewer.gif"/>
                  </imageobject>
                </mediaobject>
              </figure>This viewer provides a scrolling waterfall of detection bearings. Whilst not
              all sensors provide bearing information, detections from those that do are shown in
              this panel. At the foot of the plot are controls to alter the amount of detection
              history shown, whether or not to show a legend, and the time format. </para>
          </sect3>
          <sect3 id="rad_noise_editor">
            <title>Radiated Noise Editor</title>
            <para><figure float="0" id="WorkbenchRadNoiseViewer">
                <title>Radiated Noise Editor</title>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="figures/WorkbenchRadNoiseEditor.gif"/>
                  </imageobject>
                </mediaobject>
              </figure>When utilising underwater detection modelling each participant must be
              provided with <link linkend="mod_radiated_noise">radiated noise</link>
              characteristics, as used within the <link linkend="mod_detection">acoustic detection
                algorithms</link>. This editor shows a list of the radiated noise mediums supported
              by the current participant, and if any are double-clicked the attributes of that
              medium are opened in an editor in the bottom half of the panel. </para>
          </sect3>
          <sect3 id="sensor_monitor">
            <title>Sensor Monitor</title>
            <para>The sensor monitor is build from two panels. The first provides a list of sensors
              for the current participant. For each sensor you are offered the choice of <link
                linkend="WorkbenchSensorMonitor2">viewing its performance</link> , viewing a plot of
              current contacts, or <link linkend="WorkbenchSensorEditor">editing</link> the sensor
              attributes. <figure float="0" id="WorkbenchSensorMonitor1">
                <title>Sensor Monitor Overview</title>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="figures/WorkbenchSensorMonitor1.gif"/>
                  </imageobject>
                </mediaobject>
              </figure>Clicking on the <guilabel>Edit</guilabel> button will open the edit dialog.
              Different sensors have different editable attributes, but all share the core
              attributes of <guilabel>Name</guilabel> and <guilabel>Working</guilabel> - where
              obviously clearing the tick against the <guilabel>Working</guilabel> attribute
              disables that sensor. <figure float="0" id="WorkbenchSensorEditor">
                <title>Sensor Editor</title>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="figures/WorkbenchSensorEditor.gif"/>
                  </imageobject>
                </mediaobject>
              </figure>Alternatively, clicking on the Monitor tab opens a table which indicates the
              components of the detection algorithm for each in-contact target. <tip>
                <para>On first opening the table resizes to accommodate the current number of
                  in-contact targets. If the table is opened when the current participant holds no
                  targets it will be of minimal size, and when in contact the targets may not be
                  visible. Simple resize the table to view them.</para>
              </tip><figure float="0" id="WorkbenchSensorMonitor2">
                <title>Sensor Monitor Detail</title>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="figures/WorkbenchSensorMonitor2.gif"/>
                  </imageobject>
                </mediaobject>
              </figure>Two types of detection modelling ( <link linkend="mod_detection">underwater
                acoustic</link> and <link linkend="mod_lookup_model">lookup</link>) are supported
              within <application>ASSET</application>, each based on a different core algorithm. The
              Sensor Monitor is able to present the components of either modelling mechanism,
              dynamically updated as the scenario moves forward. </para>
            <para>Lastly, <application>ASSET</application> is able to provide a <link
                linkend="WorkbenchDetectionViewer">scrolling waterfall plot</link> showing the
              detections for a particular sensor - similar to the plot provided for detections
              across a participant's full sensor fit. </para>
          </sect3>
          <sect3>
            <title>Waterfall Editor</title>
            <para>The Waterfall Editor is discussed further <link
                linkend="WORKBENCH_WATERFALL_EDITOR">below</link>. </para>
          </sect3>
          <sect3>
            <title>Movement Editor</title>
            <para>Each participant has its own set of <link linkend="mod_movement">manoeuvring
                characteristics</link>, with different classes of participants having different
              types of characteristic available (fishing vessels do not have climb rates for
              instance). The movement editor allows you to edit those characteristics, changing
              acceleration, fuel usage rate, speed limits, etc. <figure float="0"
                id="WorkbenchMovementEditor">
                <title>Movement Editor</title>
                <mediaobject>
                  <imageobject>
                    <imagedata fileref="figures/WorkbenchMovementEditor.gif"/>
                  </imageobject>
                </mediaobject>
              </figure></para>
          </sect3>
        </sect2>
        <sect2 id="WORKBENCH_WATERFALL_EDITOR">
          <title>Waterfall Editor</title>
          <para>Design of participant <link linkend="mod_behaviours">behaviours</link> forms a
            significant part of solving tactical problems using <application>ASSET</application>.
            The highest level behaviour within participants is the <link
              linkend="behaviour_Waterfall">Waterfall</link>, which contains a cascading list of
            child behaviours - if a higher level behaviour isn't applicable then control will
            cascade down to lower levels until one takes effect. </para>
          <para>This cascade of behaviours is presented in the Waterfall editor. Within the initial
            panel (shown below) behaviours can be moved up and down the priority order, and
            double-clicking on any opens up their editor. <figure float="0"
              id="WorkbenchWaterfallEditor">
              <title>Waterfall Editor</title>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="figures/WorkbenchWaterfallEditor.gif"/>
                </imageobject>
              </mediaobject>
            </figure>The editor for most child behaviours is a property editor looking similar to
            the property editor shown below, though some types of attribute are specific to
            behaviours - such as the <link linkend="WorkbenchCategoryEditor">category</link> editor
            shown further down. <figure float="0" id="WorkbenchBehaviourEditor">
              <title>Behaviour Editor</title>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="figures/WorkbenchBehaviourEditor.gif"/>
                </imageobject>
              </mediaobject>
            </figure>
            <link linkend="mod_category">Categories</link> provide a useful way of making a body of
            vessels the subject of a behaviour without having to resort to individual filenames
            and/or id numbers. To identify a type of target as a subject of a behaviour select one
            or more categories from the lists provided (not all lists have to be represented). Thus,
            to indicate that a behaviour (such as <link linkend="behaviour_investigate"
              >Investigate</link>) applies to all friendly fishing vessels select
              <guilabel>GREEN</guilabel> force and <guilabel>FISHING_VESSEL</guilabel> as the type.
            Alternatively, to indicate that the behaviour applies to all unarmed shipping also
            select the <guilabel>OILER</guilabel> and <guilabel>TROOP_CARRIER</guilabel>categories.
              <figure float="0" id="WorkbenchCategoryEditor">
              <title>Category Editor</title>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="figures/WorkbenchCategoryEditor.gif"/>
                </imageobject>
              </mediaobject>
            </figure></para>
        </sect2>
      </sect1>
    </chapter>
  </book>
  <book id="system_documentation">
    <title>
      <application>ASSET</application> System Documentation </title>
    <bookinfo>
      <revhistory>
        <revision>
          <revnumber>0.5</revnumber>
          <date>28th June 2002</date>
          <revdescription>
            <para>Initial Skeleton</para>
          </revdescription>
        </revision>
      </revhistory>
      <date>June 2002</date>
      <copyright>
        <year>2001,2002</year>
      </copyright>
      <author>
        <firstname>Ian</firstname>
        <surname>Mayo</surname>
        <affiliation>
          <orgname>PlanetMayo Ltd.</orgname>
          <address>
            <street>34 Shearwater Avenue</street>
            <city>Fareham</city>
            <state>HANTS</state>
            <postcode>PO16 8YE</postcode>
            <email>info@planetmayo.co.uk</email>
          </address>
        </affiliation>
      </author>
      <abstract>
        <title>The <application>ASSET</application> User Guide </title>
        <para id="user_abstract">The <application>ASSET</application> System Documentation is an
          essential tool to the <application>ASSET</application> maintainer or developer, providing
          an architectural overview in addition to guidance in how to make specific modifications.
          The <application>ASSET</application> maintainer or developer should be familiar with the
          application, and know their way around the <link linkend="modelling_guide">Modelling
            Guide</link> and the <link linkend="user_guide">User Guide</link>. </para>
      </abstract>
    </bookinfo>
    <chapter id="system_architecture">
      <title>Architecture</title>
      <para>This chapter gives an overview of the architecture of <application>ASSET</application>,
        both logically (in abstract terms) and physically (naming Java classes). </para>
      <sect1 id="sys_model_arch">
        <title>Model Architecture</title>
        <para>Interfaces are used extensively within the application to provide modularity. All
          sensors implement a sensor interface, behaviours implement a behaviour interface, and so
          on, thus allowing objects to be simply dropped into a parent.</para>
      </sect1>
      <sect1 id="sys_app_arch">
        <title>Application Architecture</title>
        <para>ASSET draws many GUI components from MWC&apos;s Debrief application. Debrief is a 2
          and 3 dimensional application used for analysis of maritime vessel tracks. Code providing
          plotting of 2 and 3 data onto a tactical chart, the general graphical user interface,
          toolbars, property editors and property windows, storing data to XML file format has all
          been taken from Debrief&apos;s Open Source code set.</para>
        <para>The source code produced in support of ASSET following the following general
          guidelines: <variablelist>
            <varlistentry>
              <term>Isolate GUI code</term>
              <listitem>
                <simpara>Where possible, GUI code is contained in classes which contain as little
                  non-GUI code as possible - that is all moved into a parent or support class. This
                  is to ease the task of automated testing, which becomes many times more difficult
                  once a real GUI is involved</simpara>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>Isolate modelling code</term>
              <listitem>
                <simpara>Code modules which model real-world entities should not know about nor be
                  concerned with application specifics such as GUI or storing to disk</simpara>
              </listitem>
            </varlistentry>
          </variablelist>The following diagram illustrates this encapulation. <figure
            id="arch_encapsulation">
            <title>Example of code encapsulation within ASSET</title>
            <mediaobject>
              <imageobject>
                <imagedata fileref="figures/Arch_Encapsulation.gif" width="100%" scalefit="1"/>
              </imageobject>
            </mediaobject>
          </figure></para>
        <sect2>
          <title>Overview</title>
          <para>Inheritance is used extensively within the ASSET suite, reducing development times
            and maintenance costs. Common functionality is moved as far "up" the inheritance tree as
            possible, both at initial design and during refactoring in subsequent code changes. An
            example of this inheritance is the ASSET Workbench, which draws first on non-workbench
            related Java Swing components and then on non-Swing related components (see <xref
              linkend="arch_workbench"/>). </para>
        </sect2>
        <sect2 id="sys_server">
          <title>Workbench</title>
          <para>The Workbench application meets a specific set of ASSET requirements, providing a
            dynamic "gods-eye" view of a scenario, with the user able to edit/review attributes of
            any entity in the loaded scenario. The application itself is a collection of ASSET (and
            Debrief) GUI components, some standard ASSET tools, and a Workbench-specific set of
            tools and layers. <figure id="arch_workbench">
              <title>GUI interface for ASSET Workbench</title>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="figures/Arch_Workbench.gif" width="100%" scalefit="1"/>
                </imageobject>
              </mediaobject>
            </figure></para>
        </sect2>
        <sect2>
          <title>Server</title>
          <para>The <ulink url="http://intranet2/coag/asset/api/ASSET/Server/CoreServer.html"
              >Server</ulink> is a black-box software component capable of reading in scenario and
            control files, and moving through one or more scenarios to their conclusion. Essentially
            it provides the following functionality: <orderedlist>
              <listitem>
                <simpara>Load/save a scenario to/from disk</simpara>
              </listitem>
              <listitem>
                <simpara>Create new (blank) scenario</simpara>
              </listitem>
              <listitem>
                <simpara>Retreve a list of currently loaded scenarios</simpara>
              </listitem>
            </orderedlist></para>
        </sect2>
        <sect2>
          <title>Data objects</title>
          <para>The real-world entities modelled within ASSET normally comprise the following
            components: <orderedlist>
              <listitem>
                <simpara>Code module the behaviour of the real-world entity</simpara>
              </listitem>
              <listitem>
                <simpara>Code module detailing what is user-editable about this entity (speed,
                  behaviour, category, name), and what editors to use</simpara>
              </listitem>
              <listitem>
                <simpara>Code module supporting XML read/write of this entity, to make it
                  persistent.</simpara>
              </listitem>
            </orderedlist></para>
        </sect2>
        <sect2 id="sys_permanent_storage">
          <title>Permanent Storage (XML)</title>
          <para>XML is used as the format for permanent storage of ASSET scenarios. The manner in
            which data is stored to XML format is specified using a number of Document Type
            Definition ( <acronym>DTD</acronym>) files. The DTD files <ulink url="dtd/index.html"
              >are documented</ulink> within the ASSET documentation set, and can be read by a
            number of XML editor applications. </para>
          <para>SAX is used to parse the XML files into ASSET, using the manager class at <ulink
              url="http://intranet2/coag/asset/api/ASSET/Util/XML/ASSETReaderWriter.html"
              >ASSETReaderWriter</ulink>. </para>
        </sect2>
        <sect2>
          <title>Communications</title>
          <para>The <application>Observer</application> application within
              <application>ASSET</application> inherently relies on networked communications.
            Additionally, when the <application>Playground</application> application is running in
            Network mode it uses networked communications to interact with a remote scenario -
            either running in another <application>Playground</application> or
              <application>WorkBench.</application>
          </para>
        </sect2>
        <sect2 id="sys_record_to_file">
          <title>Recording results to file</title>
          <para>Quite a complex inheritance tree is used to provide record-to-file functionality, in
            order to cater for Observers which require to write results to file at the end of a run,
            during a run, or at the end of batch of runs. The inheritance tree is shown below:
              <figure id="record_to_file_observers_diag">
              <title>Inheritance tree for record-to-file observers</title>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="figures/RecordToFileObservers.gif" width="100%" scalefit="1"/>
                </imageobject>
              </mediaobject>
            </figure></para>
        </sect2>
        <sect2>
          <title>Network communications</title>
          <para>Networked communications within ASSET occur in one of two modes, read-only
            communications where an observer watches an evolving scenario, or read-write where a
            remote user interacts with an evolving scenario.</para>
          <sect3>
            <title>Read-only communications</title>
            <para>The control flow of initiating and terminating read-only communications is shown
              in the figure below.</para>
            <figure id="read_only_comms">
              <title>Remote read-only communications</title>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="figures/RemoteCommsStructure.gif" width="100%" scalefit="1"/>
                </imageobject>
              </mediaobject>
            </figure>
          </sect3>
        </sect2>
      </sect1>
    </chapter>
    <chapter id="sys_monte_carlo">
      <title>Monte Carlo generation</title>
      <sect1 id="sys_monte_intro">
        <title>Introduction</title>
        <para>This section covers the component of ASSET used for generating new permutations of an
          existing scenario. Monte Carlo simulation techniques are used to investigate the
          probability of a particular outcome by evaluation of multiple permutations of one or more
          characteristics across multiple scenarios ( <link linkend="multi_scen_gen">multiple
            scenario generation.</link>) together with multiple permutations of a scenario
          participants within one scenario ( <link linkend="multi_part_gen">multiple participant
            generation</link>). </para>
        <para> One, or both of the generation mechanisms may be usefully employed in Monte Carlo
          analysis. See the relevant sections for the detail of how each generation technique is
          implemented, but when both are in use the following is performed: <orderedlist>
            <listitem>
              <para>Generate series of new scenarios permutations (in memory)</para>
            </listitem>
            <listitem>
              <para>For each scenario permutation, generate multiple participants</para>
            </listitem>
            <listitem>
              <para>Store series of scenarios to disk</para>
            </listitem>
          </orderedlist></para>
      </sect1>
      <sect1 id="multi_part_gen">
        <title>Multiple participant generation</title>
        <para>The use of multiple instances of a particular participant in a scenario effectively
          allows many scenario permutations to be performed at once - provided the required scenario
          changes are limited to one or more participants of one force.Running through these
          scenarios uses a special ASSET mode known as <link linkend="parallel_planes">Parallel
            Planes Processing</link>. </para>
        <para>This generation mechanism is performed as follows: <orderedlist>
            <listitem>
              <para>Load scenario template from disk</para>
            </listitem>
            <listitem>
              <para>Load variance file from disk</para>
            </listitem>
            <listitem>
              <para>Create new (cloned) copy of scenario</para>
            </listitem>
            <listitem>
              <para>Looping through each participant <link linkend="G_VARIANCE">variance</link>: <orderedlist>
                  <listitem>
                    <para>Remove the current instance of that participant from the scenario</para>
                  </listitem>
                  <listitem>
                    <para>Looping through the required number of permutations: <orderedlist>
                        <listitem>
                          <para>Create a (cloned) copy of the participant</para>
                        </listitem>
                        <listitem>
                          <para>Apply the series of variances to it</para>
                        </listitem>
                        <listitem>
                          <para>Insert the new participant back into the scenario</para>
                        </listitem>
                      </orderedlist></para>
                  </listitem>
                </orderedlist></para>
            </listitem>
          </orderedlist></para>
        <sect2 id="mod_gen_dist">
          <title>Target distributions</title>
          <para>When creating a series of participants it is common to want to distribute them
            evenly through an area. This is performed using a
              <classname>ParticipantLocation</classname> construct within the variance file. The
            construct contains definitions of the top left and bottom right corners of the area.
            Into this area an even distribution of targets is produced as follows: <orderedlist>
              <listitem>
                <para>Calculate area of distribution (in m in this case)</para>
              </listitem>
              <listitem>
                <para>Divide area by number of targets to give target separation</para>
              </listitem>
              <listitem>
                <para>Produce point at top-left, then work across top of area producing a new point
                  at each separation until reach right-hand of area</para>
              </listitem>
              <listitem>
                <para>Step down to next row, and repeat</para>
              </listitem>
            </orderedlist></para>
        </sect2>
        <sect2 id="parallel_planes">
          <title>Parallel Planes Processing</title>
          <para>Conventional use of ASSET to analyse the effects of varying a set of scenario
            characteristics requires many model runs. Some of these problems may, however
            alternately be expressed in such a way that ASSET is able to combine many unique
            scenario instances into a single run - typically where the participants of one force
            conduct their behaiour irrespective of the actions of the other force. </para>
          <para>For example, we may have a problem where we wish to investigate varying the search
            speed of a searching participant, aiming to optimise the chances of a detecting a single
            target on a fixed route (commercial shipping route). We can generate a scenario
            containing many instances of the searching asset, each containing a different search
            speed, together with a single target. When running through this scenario we can analyse
            the comparative performance of the many searchers - all from a single model run. The
              <link linkend="parallel_planes_layout">screenshot below</link> illustrates this.
            Assume that the red participant (bottom left) is the hostile vessel following a
            commercial shipping route, and that the blue participants represent a search participant
            starting the search from a range of start locations. We can run the scenario forward,
            monitoring for how many of the blue searchers detect the red vessel. The start points
            which do (or don't) result in a target detection can then be subsequently analysed in
            greater depth. Here parallel planes processing has given an overview result of many
            scenario permutations in a single run. <figure id="parallel_planes_layout">
              <title>Parallel planes layout</title>
              <mediaobject>
                <imageobject>
                  <imagedata fileref="figures/p_planes_demo.gif"/>
                </imageobject>
              </mediaobject>
            </figure></para>
          <para>As explained earlier, this model use does rely on one one force acting as a
            "clockwork-mouse", acting completely irrespective of the other. Not many scenarios are
            able to represented in a way which meets this constraint, but the parallel planes
            processing certainly offers a worthwhile shortcut to those that do.</para>
        </sect2>
      </sect1>
      <sect1 id="multi_scen_gen">
        <title>Multiple scenario generation</title>
        <para>Where the <emphasis>multiple participant generation</emphasis> trick isn&apos;t
          sufficient, we have to resort to creating complete new permutations of our scenario of
          interest. Each new scenario permutation is given a unique name (either through sequential
          numbering or by appending details of the specific <link linkend="G_VARIANCE"
            >variances</link> applied). </para>
        <para>Normally the new scenario permutations are written to disk prior to ASSET working its
          way through them. Thus the new scenario files can be inspected in an XML viewer/editor or
          even loaded directly into the <link linkend="user_workbench">Workbench</link> for detailed
          analysis. </para>
        <para>The processes used to generate multiple scenarios is shown in the Monte Carlo Workflow
          diagram shown in the User Guide at <xref linkend="fig_monte_workflow"/>
        </para>
        <sect2 id="monte_inter_scenario">
          <title>Inter-scenario observers</title>
          <para>Normal scenario observers are created afresh for each scenario run, recording
            details of events during that scenario. Inter-scenario observers track results across a
            series of runs, however, and keep their output file open between runs. Their processing
            is as shown in the figures below:</para>
          <figure id="high_level_inter_scenario">
            <title>High-level processing for inter-scenario observers</title>
            <mediaobject>
              <imageobject>
                <imagedata fileref="figures/InterScenarioObserverDiagram.gif" width="100%" scalefit="1"/>
              </imageobject>
            </mediaobject>
          </figure>
          <note>
            <para>The <link linkend="G_CASE_CODE">case code</link> is a significant component within
              inter-scenario observer processing. This code is unique to each permutation of <link
                linkend="G_VARIANCE">variances</link> used. Thus an <link
                linkend="monte_inter_scenario">Inter-scenario observer</link> may gather statistics
              either using the unique scenario name, or against the case-code for that scenario,
              outputting the collated statistics on batch completion. </para>
          </note>
          <para>An example of an Inter-scenario observer is the
              <guilabel>DetectionAchievedObserver</guilabel>, which monitors whether a particular
            target type is detected by a particular host type, maintaining a log which indicates
              <emphasis>true</emphasis> or <emphasis>false</emphasis> for all scenarios within the
            multi-scenario run. </para>
          <tip>
            <para>Hey, if you think that processing inter/intra scenario observers is a handful, you
              should see the <link linkend="sys_record_to_file">inheritance tree</link>
            </para>
          </tip>
        </sect2>
      </sect1>
    </chapter>
    <chapter id="sys_typical_tasks">
      <title>Typical Tasks</title>
      <para>This section provides an overview of how to conduct typical development/maintenance
        tasks</para>
      <sect1 id="sys_modelling_tasks">
        <title>Modelling Related</title>
        <para/>
        <sect2>
          <title>Adding a new vehicle</title>
          <para/>
        </sect2>
        <sect2>
          <title>Adding a new sensor</title>
          <para/>
        </sect2>
        <sect2>
          <title>Adding a new behaviour</title>
          <para/>
        </sect2>
      </sect1>
      <sect1 id="sys_app_tasks">
        <title>Application Related</title>
        <para/>
        <sect2>
          <title>Adding a new graphic plot feature</title>
          <para/>
        </sect2>
        <sect2>
          <title>Adding a new editor</title>
          <para/>
        </sect2>
        <sect2>
          <title>Creating a new front-end</title>
          <para/>
          <sect3>
            <title>Re-using the standard front-end</title>
            <para/>
          </sect3>
          <sect3>
            <title>Creating a fresh front-end</title>
            <para/>
          </sect3>
        </sect2>
      </sect1>
    </chapter>
    <chapter id="chap_code_conventions">
      <title>Code Conventions</title>
      <para>The ASSET software uses mostly standard coding conventions similar to most of those
        available on the Internet: focussing on self-documentiation and ease of readability through
        liberal use of white-space.</para>
      <sect1 id="sys_version_control">
        <title>Version Control</title>
        <para>Version history information is included at the top of ASSET source files through use
          of a CVS template in the javadoc. This version history records the name of the last author
          and the date last checked-in.</para>
        <para>In addition to this, source code files which contain tactical models (such as those
          recorded in the modelling guide) implement the MWCModel interface - and it&apos;s
          getVersion() method. The body of this method contains a quoted CVS macro which will always
          store the date last checked-in, and the javadoc comment contains a complete history of
          check-in comments- providing an insight into how that module has changed. <figure>
            <title>Source code sample containing version details</title>
            <mediaobject>
              <imageobject>
                <imagedata fileref="figures/ModelVersionScreenshot.gif"/>
              </imageobject>
            </mediaobject>
          </figure></para>
        <para>The modification date can the be retrieved programmatically (to indicate the build
          dates of current software components), and the history can be retrieved using the javadoc
          compiler as shown below. <figure>
            <title>Javadoc snippet containing version details</title>
            <mediaobject>
              <imageobject>
                <imagedata fileref="figures/ModelVersionScreenshot2.gif"/>
              </imageobject>
            </mediaobject>
          </figure></para>
      </sect1>
    </chapter>
  </book>
</set>
