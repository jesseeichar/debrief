<?xml version="1.0" encoding="UTF-8"?>
<project name="org.mwc.asset.help" default="docbook_to_eclipse" basedir=".">

	<!-- and the cvs-logging related ones -->
	<property name="rootDir" value="../" />
	<property name="scrapRootDir" value="d:/dev/cmap_net" />
	<property name="contribDir" value="${rootDir}/contribs" />
	<property name="sourceDir"
	          value="../"
	          description="top level directory within which all our sources are stored" />
	<property name="deployDir"
	          value="${rootDir}/deploy"
	          description="where we start building the output set" />
	<property name="buildSVNLogDir" value="${deployDir}/svn" />

	<!-- and the docbook/help related bits -->
	<property name="contribDir" value="${rootDir}/contribs" />
	<property name="helpDir" value="./" />
	<property name="helpDest" value="${helpDir}/html/legacy" />
	<property name="pdfDest" value="${helpDir}/html/pdf" />

	<target name="clear_output" description="ditch the existing output files">
		<delete dir="${helpDest}" />
	</target>

	<target name="docbook_to_eclipse" description="Generate html from docbook">
		<!-- clear the output directories -->
		<antcall target="clear_output">
		</antcall>

		<!-- generate the output -->
		<mkdir dir="${helpDest}" />
		<mkdir dir="${pdfDest}" />

		<!-- build the history content 
		<antcall target="cvs_log" />-->

		<!-- generate the HTML  -->
		<echo message="Generating HTML" />
		<java classpath="${contribDir}/saxon6_5_2/saxon.jar"
		      fork="yes"
		      dir="${helpDest}"
		      classname="com.icl.saxon.StyleSheet"
		      maxmemory="128m">
			<arg value="../../../org.mwc.asset.help/docbook/asset_help.xml" />
			<arg value="../../../org.mwc.asset.help/docbook/eclipse_html_style.xsl" />
		</java>

		<!-- hey, to maintain the correct document locations, we've got to copy the generated content back
		  into the top-level of the docbook output directories -->
		<echo message="Copying HTML" />
		<copy todir="${helpDest}/" preservelastmodified="yes">
			<fileset dir="${helpDest}/html/legacy" />
		</copy> 
		<!-- and delete the duff directory (to stop us getting confused... -->
		<delete dir="${helpDest}/html/legacy" /> 


		<!-- also copy the images to the target directory -->
		<echo message="Copying images" />
		<copy todir="${helpDest}/figures" preservelastmodified="yes">
			<fileset dir="${helpDir}\docbook/figures" />
		</copy>
		<copy todir="${helpDest}/images" preservelastmodified="yes">
			<fileset dir="${helpDir}/docbook/images" />
		</copy>
		<!-- and the stylesheet -->
		<echo message="Copying stylesheet" />
		<copy todir="${helpDest}" preservelastmodified="yes">
			<fileset file="${helpDir}/docbook/Header.css" />
		</copy>

		<!-- make sure the help file gets moved across -->
		<echo message="Copying stylesheet" />
		<copy file="${helpDir}/docbook/Header.css"
		      verbose="true"
		      failonerror="true"
		      todir="${helpDest}"
		      preservelastmodified="yes" />

		<!-- lastly, do the pdf stage-->
		<antcall target="docbook_to_pdf"></antcall> 
		
	</target>


	<target name="docbook_to_pdf"  description="Generate html from docbook">

		<property name="fopVersion"
		          value="fop-0.95"
		          description="the current version of FOP" />
		<property name="fopDir"
		          value="${rootDir}/contribs/${fopVersion}"
		          description="where the fop libraries are located" />
		<property name="docName"
		          value="AssetNG.pdf"
		          description="The ASSET documentation file" />
		<property name="xml.dir"
		          value="docbook"
		          description="where our docbook sources are" />
		
		<property name="pdfDestination" value="../org.mwc.cmap.combined.feature/root_installs"/>
		<echo message="Ditching old pdf"/>
		<delete file="${pdfDestination}/${docName}"/>

		<echo message="ditching old fo document"/>
		<delete file="${rootDir}/org.mwc.asset.help/docbook/out.fo" />

		<!-- produce the FO file, ready for PDF -->
		<echo message="going from xml to FO" />
		<property name="docbook.home"    value="${rootDir}/contribs/docbook-xsl-1.72.0"/>
		<property name="saxon.dir"       value="${rootDir}/contribs/saxon6_5_2"/>
		<property name="xml.dir"         value="${helpDir}docbook"/>
		<property name="fo.dir"          value="fo"/>
		<xslt style="${xml.dir}/fo_style.xsl"
		      classpath="${saxon.dir}/saxon.jar"
		      in="${xml.dir}/asset_help.xml"
		      out="${xml.dir}/out.fo" />

		<echo message="output to fo complete, now going to pdf" />		

		<taskdef name="fop" classname="org.apache.fop.tools.anttasks.Fop">
			<classpath>
				<pathelement location="${fopDir}/build/fop.jar" />
				<pathelement location="${fopDir}/lib/avalon-framework-4.2.0.jar" />
				<pathelement location="${fopDir}/lib/batik-all-1.7.jar" />
				<pathelement location="${fopDir}/lib/commons-logging-1.0.4.jar" />
				<pathelement location="${fopDir}/lib/xmlgraphics-commons-1.3.1.jar" />
				<pathelement location="${fopDir}/lib/commons-io-1.3.1.jar" />
			</classpath>
		</taskdef>

		<fop format="application/pdf"
		     basedir="docbook"
		     fofile="docbook/out.fo"
		     outfile="docbook/AssetNG.pdf" />
		
		<!-- ditch the fo file, we don't want it in version tracking -->
		<delete file="docbook/out.fo" failonerror="true" />

		<!-- ok, move the output file to the target directory -->
		<move file="docbook/AssetNG.pdf" todir="${pdfDestination}" failonerror="true" />
 	</target>

</project>
