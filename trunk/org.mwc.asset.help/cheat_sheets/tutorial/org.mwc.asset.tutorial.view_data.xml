<?xml version="1.0" encoding="UTF-8"?>
<cheatsheet title="Quick run-through">
	<intro>
		<description>
			These few steps will familiarise you with the ASSET user interface and general processes involved with creating a simulation.  In an earlier cheat sheet you should have created an empty project, and in there you provided a link to the sample ASSET data.
		</description>
	</intro>
	<item title="Checking you have some data">
		<description>
			In an earlier cheat sheet you should have created an empty project and linked in the sample ASSET data.  If you didn&apos;t, then frankly you&apos;re buggered - so if I was you I&apos;d go back and do it right now.
		</description>
	</item>
 <item
       title="ASSET data files">
    <description>
       ASSET breaks down the information required to run through a scenario into two separate file types:  <b>scenario</b> files describe what&apos;s to be simulated, and <b>control</b> files direct ASSET in how to run the simulation. Whilst both types of file contain data stored in the textual <b>xml</b> data format, the ASSET working practice is that scenario files have the <b>.asset</b> file suffix (to help you to organise your data)
    </description>
 </item>
  <item
       title="ASSET modelling process">
    <description>
    The process you&apos;ll follow when using ASSET will be as follows:  <b>1</b> define your scenario, <b>2</b> specify how the senario will be controlled, <b>3</b> load the datafiles, <b>4</b> run through the scenario, <b>5</b> analyse the scenario results.  </description>
 </item>
 <item
       title="Open a scenario file">
    <description>
      Right, let&apos;s start off with a scenario file.  Double-click on the <b>ForceProt.asset</b> data file in the <b>AssetData</b> folder of your navigator.  It will open in the central editor pane.  
    </description>
 </item>
 <item
       title="The ASSET XML editor">
    <description>
      ASSET&apos;s xml editor uses a two-tab construct.  At the foot of the editor pane you&apos;ll see two tabs, one named <b>Design</b> and the other named <b>Source</b>.  The Design tab is a tree-oriented editor that gives you an overview of your scenario, the Source tab lets you get right down in the weeds.
    </description>
 </item>
 <item
       title="Have a look at the scenario">
    <description>
    In the Design view, you&apos;ll see that the top-level element in our tree is the <b>Scenario</b>, and this contains child elements that specify the time-step, the environment used for the simulation, and the participants in the simulation.  In <b>xml</b>, these data structures are called <b>elements</b>, they&apos;re annotated in the design view with an <b>e</b> symbol.   Data items in these elements are called <b>attributes</b> - which are annotated with a <b>a</b> symbol.  To the right of the participants element you&apos;ll see some green text that specifies what types of element can be added to the participants element - in this case the list of platform types that can be specified.  If you right-click on the <b>Participants</b> element and select <b>Add Child</b> you&apos;ll see a list of platform types that can be added - but we&apos;ll leave that for later.  Open the participants element by clicking on the triangle to the left of it, and you&apos;ll see it contains three <b>surface</b> vessels and a single <b>ssk</b>. Open the first surface vessel and you&apos;ll see it&apos;s called HVU.  Attributes are edited with the <b>Properties</b> view.  Open this using the Window/Show View/Properties menu, or by clicking the <b>Click to perform</b> button below. Next,  feel free to browse through the HVU child elements to view the data structures.
    </description>
    <command
          required="false"
          serialization="org.eclipse.ui.views.showView(org.eclipse.ui.views.showView.viewId=org.eclipse.ui.views.PropertySheet)"/>
 </item>
 
 <item
       title="How do we describe a participant?">
    <description>
           As you continue to look into the HVU you will learn about how we define scenario elements.  The first element in the HVU Surface vessel is the <b>Category</b>.  If you look into this you&apos;ll see  we&apos;ve indicated the HVU is a <b>Blue</b>, <b>Carrier</b> that travels on the <b>Surface</b>.  Having these categories let us define behaviours and characteristics that are not dependent on a single defined participant, but on a class of participants.  A <b>Red</b> platform may choose to avoid <b>Blue</b>, to follow <b>Carrier</b>s, or it may be only detectable by <b>Surface</b> assets.  If you select the <b>Category</b> element you will see that the individual categories are maintained down in the <b>Properties</b> window.  Click on the <b>Type</b> attribute to see the other available types.  Next for the HVU you will see the <b>SensorFit</b>.  Aah, it hasn&apos;t got any. But, if we right-click on the <b>SensorFit</b> element we will see the range of available sensors from the <b>Add Child</b> drop down menu. Next down from <b>SensorFit</b> is <b>Status</b>. This is a description of where the participant is at the start of the simulation, his course, and his speed.
    </description>
 </item>
 <item
       href="/org.mwc.asset.help/html/legacy/mod_behaviours.html"
       title="And the behaviour of a participant?">
    <description>
           Next down from the status is a really important part of the definition: the behaviour for this participant.  It&apos;s the behaviours that normally form the meat of a tactical simulation problem.  See the help link for this item to get an overview of behaviours.  Unfortunately the HVU has a really boring behaviour definition, so instead of looking at the HVU, move down to the submarine (SSK) participant, named <b>SSK</b>.  The behaviour for the SSK is defined in a <b>Waterfall</b> block - that&apos;s a series of behaviours where the model tests the first one to see if it&apos;s applicable, if it isn&apos;t it moves down the list until it finds an applicable behaviour. This <b>Waterfall</b> has two elements; an <b>Evade</b> and a <b>RectangleWander</b>. As you work your way through the <b>Evade</b> element you&apos;ll see he&apos;s going to travel for 2 hours at -60 feet at 6 knots from any <b>Blue</b> asset.  If he isn&apos;t in contact with any blue assets then the waterfall behaviour passes down to the next element: the <b>RectangleWander</b>. In this element you&apos;ll see he will wander at 4kts and -40m, in a specified area.iours where the model tests the first one to see if it&apos;s applicable, if it isn&apos;t it moves down the list until it finds an applicable behaviour. This <b>Waterfall</b> has two elements; an <b>Evade</b> and a <b>RectangleWander</b>. As you work your way through the <b>Evade</b> element you&apos;ll see he&apos;s going to travel for 2 hours at -60 feet at 6 knots from any <b>Blue</b> asset.  If it isn&apos;t in contact with any blue assets then the waterfall behaviour passes down to the next element: the <b>RectangleWander</b>. In this element you&apos;ll see he will wander at 4kts and -40m, in a specified area. As you work your way through the <b>Evade</b> element you&apos;ll see he&apos;s going to travel for 2 hours at -60 feet at 6 knots from any <b>Blue</b> asset.
    </description>
 </item>
 <item
       title="But I haven't seen a real sensor">
    <description>
       The HVU didn&apos;t have any sensors, but the SSK has.  Have a look in the <b>SensorFit</b> element.  Here you&apos;ll see a <b>TypedCookieSensor</b>.  This is a very simple sensor type that uses a cookie-cutter range-dependent detection algorithm, with ranges expressed against specific participant types. Here you&apos;ll see the SSK can detect any <b>BLUE</b> participant at 8 nautical miles. This construct could include more <b>TypedRangeDoublet</b> objects to provide different ranges for <b>Carrier</b> and <b>Frigate</b> or any other ASSET category type.
    </description>
 </item>
 <item
       title="And vessel performance?">
    <description>
       The HVU didn&apos;t have any sensors, but the SSK has.  Have a look in the <b>SensorFit</b> element.  Here you&apos;ll see a <b>TypedCookieSensor</b>.  This is a very simple sensor type that uses a cookie-cutter range-dependent detection algorithm, with ranges expressed against specific participant types. Here you&apos;ll see the SSK can detect any <b>BLUE</b> participant at 8 nautical miles. This construct could include more <b>TypedRangeDoublet</b> objects to provide different ranges for <b>Carrier</b> and <b>Frigate</b> or any other ASSET category type.
    </description>
 </item>
 <item
       title="View a control file">
    <description>
    Ok, close the scenario file by clicking on the <b>x</b> symbol in the tab above it. Now, double-click on <b>ForceProt.xml</b>. When this opens you&apos;ll see it&apos;s a <b>ScenarioController</b> element that contains two children, a <b>ScenarioGenerator</b> (that describes how random variances should be applied to your scenario), plus an <b>ObserverList</b> that defines a series of control structures that listen to your running scenario - recording observations to file or interacting with the scenario itself.<br/>
If you look into the <b>ScenarioGenerator</b> object you&apos;ll see it contains an element that defines multiple participants - <b>300</b> of the vessel named <b>SSK</b>.  It also varies their initial course, and where they start.<br/> 
If you open the <b>ObserverList</b> you&apos;ll see it contains 6 observers that control how long the scenario runs for, producing a track plot image, producing Debrief plot files, plus indications of how to display/control detections.ctions.ons.
    </description>
 </item>
 <item
       title="Open the scenario controller">
    <description>
       For the next step you&apos;ll need the <b>Scenario Controller</b> view open - so do that using the Window/Show view menu, or by clicking on the <b>Click to perform</b> button below.
    </description>
        <command
          required="false"
          serialization="org.eclipse.ui.views.showView(org.eclipse.ui.views.showView.viewId=org.mwc.asset.ScenarioController2)"/>
 </item>
 <item
       title="Load the data">
    <description>
       Now, drag the two <b>ForceProt</b> files onto the <b>Data files</b> area at the top of the Scenario Controller view.  It may take a few seconds to load - because ASSET is generating 300 random SSKs, as requested in the control file. You&apos;ll see panel update to show the file names.  In the table in the lower-half of the view the scenario has been added - with a status of <b>Waiting</b>.  The columns to the right-hand side of the table show the current value of any assigned observers that are capable of providing a running commentary.
    </description>

 </item>
 <item
       title="Run the scenario">
    <description>
       Right, now to run the scenario.  Well, before we run the scenario we have to tie in the observers to the scenario. Do this by clicking on the <b>Init</b> button in the <b>Selected scenario</b> area of the scenario controller.  After the scenario has initialised the <b>Play</b> and <b>Step</b> buttons will become enabled.  Click on the <b>Step</b> button a few times, and you&apos;ll see the scenario time (green text on black background) move forward.  Then click on <b>Play</b> and the scenario will run through to completion.  It may take a few minutes - we&apos;ve created 300 target vessels remember.
    </description>
 </item>
 <item
       title="Watch the scenario">
    <description>
       Were you expecting a little more graphic detail? Ok.  Before we do, we will restart the scenario.  Do this by first clicking on the <b>Reload data files</b> yellow-arrows icon in the mini toolbar at the top of the scenario controller. Now re-do the <b>Init</b> for the scenario, and lastly click on the globe icon in the mini-toolbar.  Your plot should now open, showing a spread of red ssk icons across the screen, with the random courses we specified in the control file.   Click on the <b>Step</b> button a few times and you&apos;ll see the scenario move forward.  Click on <b>Play</b> and you&apos;ll see it move forward. It will take 2 minutes or so to complete, but not too long.
    </description>
 </item>
 <item
       title="What can we analyse?">
    <description>
       Right, it&apos;s finally finished running. What do you do now? That&apos;s it, you do some analysis.  If you look in your <b>Navigator</b> pane, you'll see a <b>ForceProt</b> folder (this was the folder name specified in the control file). Have a look in there and you'll see a <b>.rep</b> and a <b>.png</b> file.  Double-click on the png to open it, and you'll see a snapshot. You could alternatively double-click on the rep file to open it in the Debrief editor, though I wouldn&apos;t recommend it in this case because it contains soooo many tracks.
    </description>
 </item>

</cheatsheet>
