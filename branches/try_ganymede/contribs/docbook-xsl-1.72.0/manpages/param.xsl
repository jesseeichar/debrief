<?xml version="1.0" encoding="utf-8"?><xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:src="http://nwalsh.com/xmlns/litprog/fragment" exclude-result-prefixes="src" version="1.0">

<!-- This file is generated from param.xweb; do not edit this file! -->

<!-- ********************************************************************
     $Id: param.xweb 6530 2007-01-19 11:40:50Z xmldoc $
     ********************************************************************

     This file is part of the XSL DocBook Stylesheet distribution.
     See ../README or http://nwalsh.com/docbook/xsl/ for copyright
     and other information.

     ******************************************************************** -->

<xsl:param name="man.break.after.slash">0</xsl:param>
<xsl:param name="man.hyphenate">0</xsl:param>
<xsl:param name="man.hyphenate.urls">0</xsl:param>
<xsl:param name="man.hyphenate.filenames">0</xsl:param>
<xsl:param name="man.hyphenate.computer.inlines">0</xsl:param>
<xsl:param name="man.justify">0</xsl:param>
<xsl:param name="man.indent.width">4</xsl:param>
<xsl:param name="man.indent.refsect" select="0"/>
<xsl:param name="man.indent.blurbs" select="1"/>
<xsl:param name="man.indent.lists" select="1"/>
<xsl:param name="man.indent.verbatims" select="1"/>
  <xsl:param name="man.font.funcprototype">BI</xsl:param>
  <xsl:param name="man.font.funcsynopsisinfo">B</xsl:param>
  <xsl:param name="man.font.table.headings">B</xsl:param>
  <xsl:param name="man.font.table.title">B</xsl:param>
<xsl:param name="man.output.manifest.enabled" select="0"/>
<xsl:param name="man.output.manifest.filename">MAN.MANIFEST</xsl:param>
<xsl:param name="man.output.quietly" select="0"/>
<xsl:param name="man.output.encoding" select="'UTF-8'"/>
<xsl:param name="man.output.in.separate.dir" select="0"/>
<xsl:param name="man.output.lang.in.name.enabled" select="0"/>
<xsl:param name="man.output.base.dir">man/</xsl:param>
<xsl:param name="man.output.subdirs.enabled" select="1"/>
  <xsl:param name="man.string.subst.map.local.pre"/>
<xsl:param name="man.string.subst.map">

  <!-- ******************************************************************** -->
  <!-- *  -->
  <!-- * The backslash and dot (\, .) characters have special meaning -->
  <!-- * for roff, so we escape those characters when they appear in -->
  <!-- * the source content, and we use certain (arbitrarily -->
  <!-- * selected) Unicode characters as the internal representations -->
  <!-- * for those characters, then replace them with real -->
  <!-- * backslashes and dots in output. In addition, for certain -->
  <!-- * reasons, we do the same thing for dashes. The mappings of -->
  <!-- * those characters to the Unicode characters we use to -->
  <!-- * represent them is hard-coded: -->
  <!-- *  -->
  <!-- *   - U+2591 = dash -->
  <!-- *   - U+2593 = backslash -->
  <!-- *   - U+2302 = dot -->
  <!-- *  -->
  <!-- ******************************************************************** -->

  <!-- * escape backslashes in content; we use "\e" instead of "\\" -->
  <!-- * because the groff docs say that's the correct thing to do; also -->
  <!-- * because testing shows that "\\" doesn't always work as expected; -->
  <!-- * for example, "\\" within a table seems to mess things up -->
  <substitution oldstring="\" newstring="\e"/>
  <!-- * fix bad font-request capitalization in .SH (stylesheet artifact) -->
  <substitution oldstring="▓FB" newstring="\fB"/>
  <substitution oldstring="▓FI" newstring="\fI"/>
  <substitution oldstring="▓FR" newstring="\fR"/>
  <!-- * remove no-break marker at beginning of line (stylesheet artifact) --> 
  <substitution oldstring="▒▀" newstring="▒"/>
  <!-- * replace U+2580 no-break marker (stylesheet-added) w/ no-break space -->
  <substitution oldstring="▀" newstring="\ "/>
  <!-- * replace U+2593 marker with backslash --> 
  <substitution oldstring="▓" newstring="\"/>
  <!-- * escape dashes in content (only at line beginnings) -->
  <substitution oldstring="&#xA;." newstring="&#xA;\&amp;."/>
  <!-- * replace U+2302 marker with dot -->
  <substitution oldstring="⌂" newstring="."/>
  <!-- * escape dashes in content -->
  <substitution oldstring="-" newstring="\-"/>
  <!-- * replace U+2591 marker with dash -->
  <substitution oldstring="░" newstring="-"/>

  <!-- ==================================================================== -->

  <!-- * squeeze multiple newlines before a roff request  -->
  <substitution oldstring="&#xA;&#xA;." newstring="&#xA;."/>
  <!-- * remove any .sp occurences that directly follow a .PP  -->
  <substitution oldstring=".PP&#xA;.sp" newstring=".PP"/>
  <!-- * squeeze multiple newlines after start of no-fill (verbatim) env. -->
  <substitution oldstring=".nf&#xA;&#xA;" newstring=".nf&#xA;"/>
  <!-- * squeeze multiple newlines after REstoring margin -->
  <substitution oldstring=".RE&#xA;&#xA;" newstring=".RE&#xA;"/>
  <!-- * an apostrophe at the beginning of a line gets interpreted as a -->
  <!-- * roff request (groff(7) says it is "the non-breaking control -->
  <!-- * character"); so we must add backslash before any apostrophe -->
  <!-- * found at the start of a line -->
  <substitution oldstring="&#xA;'" newstring="&#xA;\'"/>
  <!-- * -->
  <!-- * non-breaking space -->
  <!-- * -->
  <!-- * A no-break space can be written two ways in roff; the difference, -->
  <!-- * according to the "Page Motions" node in the groff info page, ixsl: -->
  <!-- * -->
  <!-- *   "\ " = -->
  <!-- *   An unbreakable and unpaddable (i.e. not expanded during filling) -->
  <!-- *   space. -->
  <!-- * -->
  <!-- *   "\~" = -->
  <!-- *   An unbreakable space that stretches like a normal -->
  <!-- *   inter-word space when a line is adjusted."  -->
  <!-- * -->
  <!-- * Unfortunately, roff seems to do some weird things with long -->
  <!-- * lines that only have words separated by "\~" spaces, so it's -->
  <!-- * safer just to stick with the "\ " space -->
  <substitution oldstring=" " newstring="\ "/>
  <!-- * x2008 is a "punctuation space"; we must replace it here because, -->
  <!-- * for certain reasons, the stylesheets add it before and after -->
  <!-- * every Parameter in Funcprototype output -->
  <substitution oldstring=" " newstring=" "/>
  <!-- * -->
  <!-- * Now deal with some other characters that are added by the -->
  <!-- * stylesheets during processing. -->
  <!-- * -->
  <!-- * bullet -->
  <substitution oldstring="•" newstring="\(bu"/>
  <!-- * left double quote -->
  <substitution oldstring="“" newstring="\(lq"/>
  <!-- * right double quote -->
  <substitution oldstring="”" newstring="\(rq"/>
  <!-- * left single quote -->
  <substitution oldstring="‘" newstring="\(oq"/>
  <!-- * right single quote -->
  <substitution oldstring="’" newstring="\(cq"/>
  <!-- * copyright sign -->
  <substitution oldstring="©" newstring="\(co"/>
  <!-- * registered sign -->
  <substitution oldstring="®" newstring="\(rg"/>
  <!-- * servicemark... -->
  <!-- * There is no groff equivalent for it. -->
  <substitution oldstring="℠" newstring="(SM)"/>
  <!-- * trademark... -->
  <!-- * We don't do "\(tm" because for console output, -->
  <!-- * groff just renders that as "tm"; that is: -->
  <!-- * -->
  <!-- *   Product&#x2122; -> Producttm -->
  <!-- * -->
  <!-- * So we just make it to "(TM)" instead; thus: -->
  <!-- * -->
  <!-- *   Product&#x2122; -> Product(TM) -->
  <substitution oldstring="™" newstring="(TM)"/>

  <!-- ==================================================================== -->

  <!-- * we use U+2592 as a marker for the newline before output of <sbr>; -->
  <!-- * so we now need to replace U+2592 marker with a real newline -->
  <substitution oldstring="▒" newstring="&#xA;"/>

</xsl:param>
<xsl:param name="man.string.subst.map.local.post"/>
<xsl:param name="man.links.are.numbered">1</xsl:param>
<xsl:param name="man.links.are.underlined">1</xsl:param>
<xsl:param name="man.links.list.enabled">1</xsl:param>
<xsl:param name="man.links.list.heading" select="''"/>
<xsl:param name="variablelist.term.separator">, </xsl:param>
<xsl:param name="variablelist.term.break.after">0</xsl:param>
<xsl:param name="man.charmap.enabled" select="1"/>
<xsl:param name="man.charmap.uri" select="''"/>
<xsl:param name="man.charmap.use.subset" select="1"/>
<xsl:param name="man.charmap.subset.profile">
@*[local-name() = 'block'] = 'Miscellaneous Technical' or
(@*[local-name() = 'block'] = 'C1 Controls And Latin-1 Supplement (Latin-1 Supplement)' and
 @*[local-name() = 'class'] = 'symbols'
) or
(@*[local-name() = 'block'] = 'General Punctuation' and
 (@*[local-name() = 'class'] = 'spaces' or
  @*[local-name() = 'class'] = 'dashes' or
  @*[local-name() = 'class'] = 'quotes' or
  @*[local-name() = 'class'] = 'bullets'
 )
) or
@*[local-name() = 'name'] = 'HORIZONTAL ELLIPSIS' or
@*[local-name() = 'name'] = 'WORD JOINER' or
@*[local-name() = 'name'] = 'SERVICE MARK' or
@*[local-name() = 'name'] = 'TRADE MARK SIGN' or
@*[local-name() = 'name'] = 'ZERO WIDTH NO-BREAK SPACE'
</xsl:param>
<xsl:param name="man.segtitle.suppress" select="0"/>
<xsl:param name="man.table.footnotes.divider">----</xsl:param>
<xsl:param name="man.subheading.divider">========================================================================</xsl:param>
<xsl:param name="man.subheading.divider.enabled">0</xsl:param>
<xsl:param name="refentry.date.profile.enabled">0</xsl:param>
<xsl:param name="refentry.meta.get.quietly" select="0"/>
<xsl:param name="refentry.manual.profile.enabled">0</xsl:param>
<xsl:param name="refentry.source.name.profile.enabled">0</xsl:param>
<xsl:param name="refentry.version.profile.enabled">0</xsl:param>
<xsl:param name="refentry.source.name.suppress">0</xsl:param>
<xsl:param name="refentry.version.suppress">0</xsl:param>
<xsl:param name="refentry.date.profile">
  (($info[//date])[last()]/date)[1]|
  (($info[//pubdate])[last()]/pubdate)[1]
</xsl:param>
<xsl:param name="refentry.manual.fallback.profile">
refmeta/refmiscinfo[1]/node()</xsl:param>
<xsl:param name="refentry.manual.profile">
  (($info[//title])[last()]/title)[1]|
  ../title/node()
</xsl:param>
<xsl:param name="refentry.source.fallback.profile">
refmeta/refmiscinfo[1]/node()</xsl:param>
<xsl:param name="refentry.source.name.profile">
  (($info[//productname])[last()]/productname)[1]|
  (($info[//corpname])[last()]/corpname)[1]|
  (($info[//corpcredit])[last()]/corpcredit)[1]|
  (($info[//corpauthor])[last()]/corpauthor)[1]|
  (($info[//orgname])[last()]/orgname)[1]|
  (($info[//publishername])[last()]/publishername)[1]
</xsl:param>
<xsl:param name="refentry.version.profile">
  (($info[//productnumber])[last()]/productnumber)[1]|
  (($info[//edition])[last()]/edition)[1]|
  (($info[//releaseinfo])[last()]/releaseinfo)[1]
</xsl:param>
<xsl:param name="man.th.title.max.length">20</xsl:param>
<xsl:param name="man.th.extra2.max.length">30</xsl:param>
<xsl:param name="man.th.extra3.max.length">30</xsl:param>
<xsl:param name="man.th.extra1.suppress">0</xsl:param>
<xsl:param name="man.th.extra2.suppress">0</xsl:param>
<xsl:param name="man.th.extra3.suppress">0</xsl:param>
<xsl:param name="email.delimiters.enabled">1</xsl:param>
</xsl:stylesheet>
    